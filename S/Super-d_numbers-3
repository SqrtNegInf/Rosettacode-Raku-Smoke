#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Super-d_numbers
#c# 2019-10-11 >RC
#m# MOAR: OK
#j#  JVM: BROKEN
#n# Divide and conquer is the strategy, but how to exit early (i.e. not have fixed termination value)?
#n# Using an X::AdHoc exception to leave the .race block
#n# Similar issue raised in comment @ https://6guts.wordpress.com/2017/03/16/considering-hyperrace-semantics/
#n# Due to overhead, concurrency makes little sense for d < 6, but code does return correct results for all d
#n# $chunk, $max-plus are tunable parameters, that scale with $d; depending how these are set there's the danger 
#n# of missing a value in the 'first N' series, but maybe I can have just a little bit of peril?
#n# 2023-04-08 On Ubuntu, '2' case failing, so  just test '3' and up
#n# 2024-05-14 Failed, instead of  '1471 1645' got '1645 1752', likely 'race' condition (happened once before, 2023-10-24)
#n# OEIS:A032743 Super-2 Numbers (2 * n^2 contains substring '22' in its decimal expansion).
#n# OEIS:A014569 Super-3 Numbers (3n^3 contains substring '333' in its decimal expansion).
#n# OEIS:A032744 Super-4 Numbers (4 * n^4 contains substring '4444' in its decimal expansion).
#n# OEIS:A032745 Super-5 Numbers (5 * n^5 contains substring '55555' in its decimal expansion).
#n# OEIS:A032746 Super-6 Numbers (6 * n^6 contains substring '666666' in its decimal expansion).
#n# OEIS:A032747 Super-7 Numbers (7 x n^7 contains substring '7777777' in its decimal expansion).

# 7:  119.011u   2.402s  2:18.58  87.6% no concurrency
# 8: 2246.582u  46.147s 50:03.70  76.3%      "
# 9:   inconceivably yuge!

# 7:   99.542u   5.656s  0:18.26 576.0% with concurrency
# 8: 1026.182u  44.661s  2:54.86 612.3%      "
# 9: 9250.339u 379.611s 26:21.92 608.7%      "

my @res;

sub super-d ($d,$max) {
    my $max-plus = $max + floor 2 × $max/$d;
    my @super[2 × $max-plus];
    {
        my $digits = $d x $d;
        my $chunk  = 250 × $d;
        my atomicint $found = 0;
        (0, 1×$chunk, 2×$chunk ... *).race(:8degree, :1batch).map: -> $i {
             @super[$found⚛++] = $_ if ($_ ** $d × $d).contains($digits) for 1+$i .. 1+$i+$chunk;
             X::AdHoc.new.throw if $found ≥ $max-plus;
        }
        CATCH { when X::AdHoc { return @super.grep(so *).sort.head($max) } }
    }
}

@res.push: "$_: " ~ join ' ', super-d($_,10) for 3..7;

.say for @res;

#2: 19 31 69 81 105 106 107 119 127 131
my $ref = q:to/END/;
3: 261 462 471 481 558 753 1036 1046 1471 1645
4: 1168 4972 7423 7752 8431 10267 11317 11487 11549 11680
5: 4602 5517 7539 12955 14555 20137 20379 26629 32767 35689
6: 27257 272570 302693 323576 364509 502785 513675 537771 676657 678146
7: 140997 490996 1184321 1259609 1409970 1783166 1886654 1977538 2457756 2714763
END
#8: 185423 641519 1551728 1854230 6415190 12043464 12147605 15517280 16561735 18542300
#9: 17546133 32613656 93568867 107225764 109255734 113315082 121251742 175461330 180917907 182557181

use Test;
is @res.join("\n"), chomp $ref;
