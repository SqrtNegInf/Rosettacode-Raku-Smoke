#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Simulated_annealing
#c# 2020-01-23 <RC, 2020-01-27 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch?
#n# 2022-11-04 replace call to built-in 'rand' for output stability (slower this way, so reduce iterations)
#n#
#n#
#n# Notes on revisions (see .1 for original version as uploaded by Hkdtam++)
#n#
#n# more flexible on input grid (but must be perfect square), 'magic' numbers keyed to 10x10 grid go away
#n# make distance array available globally (no lookup function)
#n# more idiomatic syntax (e.g. no C-style loops)
#n# remove intermediate variables when feasible
#n# rename some variables to better reflect their roles
#n# reformat code to emphasize parallelism
#n# .rotor suffices to make grid output (no separate print routine)
#n# output follows task spec (less is more)
#n# limit displayed values to non-redonkulous precision (this is not the LIGO experiment)
#n# extended sigil-less style (temp. variable kludges clobbered with 'anonymous containers', thundergnat++)
#n# single/double quote style: former for static strings, latter for ones needing interpolation
#n# eliminated 'sa' as routine (to eliminate need for globals could have packed *everything* into it, but 6-of-one, 1/2-dozen...)

my @res;

use myRNG;
#my $rng = myRNG.new: :seed=123456;    # no
#my $rng = myRNG.new: :seed(123456);   # OK
#my $rng = myRNG.new( :seed=123456 );  # OK
 my $rng = myRNG.new( :seed(123456) );

# simulation setup
my \cities = 100;  # number of cities
my \kmax   = 1e5;  # iterations to run
my \kT     = 1;    # initial 'temperature'

die 'City count must be a perfect square.' if cities.sqrt != cities.sqrt.Int;

# locations of (up to) 8 neighbors, with grid size derived from number of cities
my \gs = cities.sqrt;
my \neighbors = [1, -1, gs, -gs, gs-1, gs+1, -(gs+1), -(gs-1)];

# matrix of distances between cities
my \D = [;];
for 0 ..^ cities² -> \j {
    my (\ab, \cd)       = (j/cities, j%cities)».Int;
    my (\a, \b, \c, \d) = (ab/gs, ab%gs, cd/gs, cd%gs)».Int;
    D[ab;cd] = sqrt (a - c)² + (b - d)²
}

sub T(\k, \kmax, \kT)      { (1 - k/kmax) × kT }                                 # temperature function, decreases to 0
sub P(\ΔE, \k, \kmax, \kT) { exp -ΔE / T(k, kmax, kT) }                          # probability to move from s to s_next
sub Es(\path)              { sum (D[ path[$_]; path[$_+1] ] for 0 ..^ +path-1) } # energy at s, to be minimized

# variation of E, from state s to state s_next
sub delta-E(\s, \u, \v) {
    my (\a,   \b,  \c,  \d) = D[s[u-1];s[u]], D[s[u+1];s[u]], D[s[v-1];s[v]], D[s[v+1];s[v]];
    my (\na, \nb, \nc, \nd) = D[s[u-1];s[v]], D[s[u+1];s[v]], D[s[v-1];s[u]], D[s[v+1];s[u]];
    if    v == u+1 { return (na + nd) - (a + d) }
    elsif u == v+1 { return (nc + nb) - (c + b) }
    else           { return (na + nb + nc + nd) - (a + b + c + d) }
}

# E(s0), initial state
my \s = @ = flat 0, pickall(1 ..^ cities), 0;
#my \s = @ = flat 0, (1 ..^ cities).pick(*), 0;  # use anonymous array container to create sigil-less variable
my \E-min-global = my \E-min = $ = Es(s);       # likewise, with scalar

# redundant -- 1st row of progress table shows the same information
#@res.push: 'kT = ' ~ \kT;  
#@res.push: 'E(s0): ' ~ E-min.fmt('%.1f');

for 0 ..^ kmax -> \k {
    @res.push: sprintf 'k:%8u  T:%4.1f  Es: %3.1f' , k, T(k, kmax, kT), Es(s)
        if k % (kmax/10) == 0;

    # valid candidate cities (exist, adjacent)
    my \cv = neighbors[8×$rng.next-rat] + s[ my \u = 1 + floor((cities-1)×$rng.next-rat)];
    next if cv ≤ 0 or cv ≥ cities or D[s[u];cv] > sqrt(2);

    my \v  = s[cv];
    my \ΔE = delta-E(s, u, v);
    if ΔE < 0 or P(ΔE, k, kmax, kT) ≥ $rng.next-rat { # always move if negative
        (s[u], s[v]) = (s[v], s[u]);
        E-min += ΔE;
        E-min-global = E-min if E-min < E-min-global;
    }
}

@res.push: "\nE(s_final): " ~ E-min-global.fmt('%.1f');
@res.push: "Path:\n" ~ s».fmt('%2d').rotor(20,:partial).join: "\n";

say my $result = @res.join("\n");

my $ref = q:to/END/;
k:       0  T: 1.0  Es: 514.3
k:   10000  T: 0.9  Es: 198.4
k:   20000  T: 0.8  Es: 194.2
k:   30000  T: 0.7  Es: 175.8
k:   40000  T: 0.6  Es: 160.2
k:   50000  T: 0.5  Es: 158.4
k:   60000  T: 0.4  Es: 145.7
k:   70000  T: 0.3  Es: 134.9
k:   80000  T: 0.2  Es: 132.3
k:   90000  T: 0.1  Es: 132.2

E(s_final): 131.9
Path:
 0 22 42 41 40 51 50 60 70 80 61 62 63 73 72 82 71 81 90 91
92 93 74 64 54 55 67 78 89 99 79 68 57 56 66 76 87 77 86 96
85 75 65 45 44 33 32 31 30 10  1  2  3  4 14 24 34 43 53 20
21 11 12 13 23 35 26 27 37 47 46 36 25 15 16  5  6  7  8  9
19 18 17 28 38 29 39 48 59 49 58 69 88 98 97 95 94 84 83 52
 0
END

use Test;
is @res.join("\n"), chomp $ref;
