#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Synchronous_concurrency
#c# 2015-12-23 <RC
#m# MOAR: OK
#j#  JVM: OK
#f# RC file: sync_concur.txt

my $out = open('run/sync_concur.txt', :w);

sub MAIN ($infile = "ref/sync_concur.base") {
    $infile.IO.lines ==> printer() ==> my $count;
    $out.say: "printed $count lines";
    $out.close;
}

sub printer(*@lines) {
    my $lines;
    for @lines {
	$out.say: $_;
	++$lines;
    }
    $lines;
}

#Concurrent units are established by use of the feed operator, which works much like an in-process object pipe. Since the final feed goes to a variable declaration that belongs to the outer thread, it serves as a backchannel from the printer thread. In this case the outer thread signals the desire for a line count by terminating the pipe to the printing thread.
#(Note: soon these will be implemented with real threads in Raku, but this is currently emulated with coroutine semantics, aka lazy lists.)

