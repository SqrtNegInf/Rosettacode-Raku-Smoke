#!/usr/bin/env raku
#u# https://www.rosettacode.org/wiki/Sorting_algorithms/Merge_sort
#c# 2023-10-01 <RC
#m# MOAR: OK
#j# JVM:  BROKEN

# no I/O or other blocking operation included -> low thread number appropriate - saving one for the system
$*SCHEDULER = ThreadPoolScheduler.new( max_threads => Kernel.cpu-cores - 1 );

# many calculations but single calculation is fast -> large batch size appropriate
my UInt $BATCH = 2**10;

#| Recursive, multi-thread, merge-sort implementation
multi merge-sort-parallel ( @a where @a.elems < 2) { @a }
multi merge-sort-parallel ( @a ) {

	my $m = @a.elems div 2;

	my @l = $m > $BATCH
			  ?? start { samewith @a[ 0 ..^ $m ] }
			  !!         samewith @a[ 0 ..^ $m ];

	# meanwhile recursively sort right side
	my @r = samewith @a[ $m ..^ @a ];

	# if we went parallel on left side, we need to await the result
	await @l[0] andthen @l = @l[0].result if @l[0] ~~ Promise;

	# short cut - in case of no overlapping left and right parts
	return flat @l, @r if @l[*-1] !after @r[0];
	return flat @r, @l if @r[*-1] !after @l[0];

	# merge step
	return flat gather {
		take @l[0] before @r[0]
				?? @l.shift
				!! @r.shift
		     while @l and @r;

		take @l, @r;
	}
}

use Test;
my @testcases =
		() => (),
		<a>.List => <a>.List,
		<a a> => <a a>,
		("b", "a", 3) => (3, "a", "b"),
		<h b a c d f e g> => <a b c d e f g h>,
		<a 🎮 3 z 4 🐧> => <a 🎮 3 z 4 🐧>.sort
		;

sub test-and-benchmark(&function) {
	say &function.name;
	say "Testing";
	is-deeply &function(.key), .value, .key ~ "  =>  " ~ .value for @testcases;
}

&test-and-benchmark(&merge-sort-parallel);
