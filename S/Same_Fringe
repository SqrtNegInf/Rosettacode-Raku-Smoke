#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Same_Fringe
#c# 2015-10-26 <RC
#m# MOAR: OK
#j#  JVM: OK


# Works with: Rakudo version #67 ("Bicycle")
#Unlike in Perl 5, where => is just a synonym for comma, in Raku it creates a true Pair object. So here we use Pair objects for our "cons" cells, just as if we were doing this in Lisp. We use the gather/take construct to harvest the leaves lazily as the elements are visited with a standard recursive algorithm, using multiple dispatch to differentiate nodes from leaves. The eqv value equivalence is applied to the two lists in parallel.

sub fringe ($tree) {
    multi sub fringey (Pair $node) { fringey $_ for $node.kv; }
    multi sub fringey ( Any $leaf) { take $leaf; }

    gather fringey $tree;
}

sub samefringe ($a, $b) { fringe($a) eqv fringe($b) }

my $a = 1 => 2 => 3 => 4 => 5 => 6 => 7 => 8;
my $b = 1 => (( 2 => 3 ) => (4 => (5 => ((6 => 7) => 8))));
my $c = (((1 => 2) => 3) => 4) => 5 => 6 => 7 => 8;

my $x = 1 => 2 => 3 => 4 => 5 => 6 => 7 => 8 => 9;
my $y = 0 => 2 => 3 => 4 => 5 => 6 => 7 => 8;
my $z = 1 => 2 => (4 => 3) => 5 => 6 => 7 => 8;

use Test;
is (so samefringe $a, $a), True, 'You got it...';
is (so samefringe $a, $b), True, 'You got it...';
is (so samefringe $a, $c), True, 'You got it...';

is (samefringe $a, $x), False, 'You not it...';
is (samefringe $a, $y), False, 'You not it...';
is (samefringe $a, $z), False, 'You not it...';
