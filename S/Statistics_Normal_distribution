#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Statistics/Normal_distribution
#c# 2016-03-19 <RC, 2018-03-27 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2020-10-07 now stable?
#n# 2021-03-04 not bothering to test the graph until 'srand' issues fixed
#n# 2022-11-01 replace call to built-in 'rand' for output stability

class splitmix64 {
    has $!state;
    submethod BUILD ( Int :$seed where * >= 0 = 1 ) { $!state = $seed }
    method next-int {
        my $next = $!state = ($!state + 0x9e3779b97f4a7c15) +& (2⁶⁴ - 1);
        $next = ($next +^ ($next +> 30)) × 0xbf58476d1ce4e5b9 +& (2⁶⁴ - 1);
        $next = ($next +^ ($next +> 27)) × 0x94d049bb133111eb +& (2⁶⁴ - 1);
        ($next +^ ($next +> 31)) +& (2⁶⁴ - 1);
    }
    method next-rat { self.next-int / 2⁶⁴ }
}

my $rng = splitmix64.new( :seed(123456) );

sub normdist ($m, $σ) {
    my $r = sqrt -2 × log $rng.next-rat;
    my $Θ = τ × $rng.next-rat;
    $r × cos($Θ) × $σ + $m;
}

sub MAIN ($size = 100000, $mean = 50, $stddev = 4) {
my @res1;
my @res2;
    my @dataset = normdist($mean,$stddev) xx $size;

   #my $m = [+](@dataset) / $size;
    my $m = sum(@dataset) / $size;
    @res1.push: (:$m);

   #my $σ = sqrt [+](@dataset X** 2) / $size - $m**2;
    my $σ = sqrt sum(@dataset X** 2) / $size - $m**2;
    @res1.push: (:$σ);

    (my %hash){.round}++ for @dataset;
    my $scale = 180 × $stddev / $size;
    constant @subbar = < ⎸ ▏ ▎ ▍ ▌ ▋ ▊ ▉ █ >;
    for %hash.keys».Int.minmax(+*) -> $i {
        my $x = (%hash{$i} // 0) × $scale;
        my $full = floor $x;
        my $part = 8 × ($x - $full);
        my $t1 = '█' x $full;
        my $t2 = @subbar[$part];
        @res2.push: "$i\t$t1$t2";
    }

.say for @res1;
#.say for @res2;

my $ref = qq:to/END/;
32	⎸
33	⎸
34	⎸
35	⎸
36	▏
37	▎
38	▊
39	█▌
40	███▎
41	█████▍
42	██████████▍
43	███████████████▊
44	███████████████████████▌
45	████████████████████████████████▉
46	███████████████████████████████████████████▌
47	██████████████████████████████████████████████████████▏
48	████████████████████████████████████████████████████████████████▎
49	█████████████████████████████████████████████████████████████████████▏
50	███████████████████████████████████████████████████████████████████████▍
51	██████████████████████████████████████████████████████████████████████▌
52	██████████████████████████████████████████████████████████████▌
53	████████████████████████████████████████████████████▊
54	███████████████████████████████████████████▏
55	█████████████████████████████████▎
56	███████████████████████⎸
57	███████████████▊
58	█████████▊
59	█████▋
60	███⎸
61	█▌
62	▊
63	▎
64	▏
65	⎸
66	⎸
67	⎸
68	⎸
69	⎸
70	⎸
END

use Test;
is @res1.join("\n"), "m	49.97988740657934\nσ	3.998314637619354";
is @res2.join("\n"), chomp $ref;

}
