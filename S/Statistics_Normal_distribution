#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Statistics/Normal_distribution
#c# 2016-03-19 <RC, 2018-03-27 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2020-10-07 now stable?
#n# 2021-03-04 not bothering to test the graph until 'srand' issues fixed

srand 123456;

sub normdist ($m, $σ) {
    my $r = sqrt -2 × log rand;
    my $Θ = τ × rand;
    $r × cos($Θ) × $σ + $m;
}

sub MAIN ($size = 100000, $mean = 50, $stddev = 4) {
my @res1;
my @res2;
    my @dataset = normdist($mean,$stddev) xx $size;

   #my $m = [+](@dataset) / $size;
    my $m = sum(@dataset) / $size;
    @res1.push: (:$m);

   #my $σ = sqrt [+](@dataset X** 2) / $size - $m**2;
    my $σ = sqrt sum(@dataset X** 2) / $size - $m**2;
    @res1.push: (:$σ);

    (my %hash){.round}++ for @dataset;
    my $scale = 180 × $stddev / $size;
    constant @subbar = < ⎸ ▏ ▎ ▍ ▌ ▋ ▊ ▉ █ >;
    for %hash.keys».Int.minmax(+*) -> $i {
        my $x = (%hash{$i} // 0) × $scale;
        my $full = floor $x;
        my $part = 8 × ($x - $full);
        my $t1 = '█' x $full;
        my $t2 = @subbar[$part];
        @res2.push: "$i\t$t1$t2";
    }

.say for @res1;
#.say for @res2;

my $moar = qq:to/END/;
30	⎸
31	⎸
32	⎸
33	⎸
34	⎸
35	⎸
36	▏
37	▎
38	▊
39	█▋
40	███⎸
41	██████⎸
42	█████████▊
43	████████████████⎸
44	████████████████████████⎸
45	████████████████████████████████▋
46	███████████████████████████████████████████⎸
47	█████████████████████████████████████████████████████▊
48	██████████████████████████████████████████████████████████████▊
49	████████████████████████████████████████████████████████████████████▊
50	███████████████████████████████████████████████████████████████████████▎
51	█████████████████████████████████████████████████████████████████████▋
52	███████████████████████████████████████████████████████████████▊
53	██████████████████████████████████████████████████████▊
54	███████████████████████████████████████████▏
55	████████████████████████████████▉
56	███████████████████████▎
57	███████████████▋
58	█████████▉
59	█████▊
60	███⎸
61	█▊
62	▊
63	▎
64	▏
65	⎸
66	⎸
67	⎸
68	⎸
69	⎸
END

my $jvm = qq:to/END/;
32	⎸
33	⎸
34	⎸
35	⎸
36	▏
37	▎
38	▉
39	█▉
40	███⎸
41	█████▍
42	█████████▋
43	███████████████▏
44	████████████████████████⎸
45	█████████████████████████████████▍
46	███████████████████████████████████████████▉
47	██████████████████████████████████████████████████████▏
48	███████████████████████████████████████████████████████████████▍
49	████████████████████████████████████████████████████████████████████▌
50	███████████████████████████████████████████████████████████████████████▎
51	████████████████████████████████████████████████████████████████████▌
52	███████████████████████████████████████████████████████████████▍
53	███████████████████████████████████████████████████████⎸
54	███████████████████████████████████████████▋
55	████████████████████████████████▊
56	███████████████████████▏
57	███████████████▍
58	█████████▋
59	█████▌
60	███▎
61	█▊
62	▊
63	▎
64	▏
65	⎸
66	⎸
END

use Test;
if $*VM ~~ /jvm/ {
is @res1.join("\n"), "m	49.99285096001682\nσ	4.009831520915964";
is @res2.join("\n"), chomp $jvm;
} else {
is @res1.join("\n"), "m	49.988620627830315\nσ	4.012923478395113";
#is @res2.join("\n"), chomp $moar;
}
}
