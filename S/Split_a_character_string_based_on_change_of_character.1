#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Split_a_character_string_based_on_change_of_character
#c# 2017-01-05 <RC
#t# skiptest
#m# MOAR: OK
#j#  JVM: OK

# Accept a string at the command line to split; if none provided, use default.

#`{{
my $string = @*ARGS[0] // < gHHH5YY++///\ >;
put 'Original: ', $string;
put '   Split: ', join ', ', $string ~~ m:g/(.)$0*/;

Output with default string:

Original: gHHH5YY++///\
   Split: g, HHH, 5, YY, ++, ///, \

Note that Raku works with Unicode natively and handles combiners and zero width characters correctly.




Output with string fff﻿﻿﻿﻿﻿﻿n⃗n⃗n⃗»»» ℵℵ☄☄☃☃̂☃☄☄:
For those of you with crappy browsers, that's:
{LATIN SMALL LETTER F} x 3, {ZERO WIDTH NO-BREAK SPACE} x 3, {LATIN SMALL LETTER N COMBINING RIGHT ARROW ABOVE} x 3,
{RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK} x 3, {SPACE} x 2, {ALEF SYMBOL} x 2, {COMET} x 2,
{SNOWMAN} x 1, {SNOWMAN COMBINING CIRCUMFLEX ACCENT} x 1, {SNOWMAN} x 1, {COMET} x 2


Original: fff﻿﻿﻿n⃗n⃗n⃗»»»  ℵℵ☄☄☃☃̂☃☄☄
   Split: fff, ﻿﻿﻿, n⃗n⃗n⃗, »»»,   , ℵℵ, ☄☄, ☃, ☃̂, ☃, ☄☄

}}

my $ref = qq:to/END/;
END

use Test;
#is @res.join("\n"), chomp $ref;
