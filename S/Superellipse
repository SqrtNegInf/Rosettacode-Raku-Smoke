#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Superellipse
#c# 2015-11-02 <>RC, 2022-07-30 >RC
#t# graphical
#m# MOAR: OK
#j#  JVM: OK
#f# RC file: superellipse.svg
#n# well, after all this time you'd hope I'd see better ways of doing things...

my (\a, \b, \n) = 200, 200, 2.5;

# y in terms of x
sub y ($x) { floor b × (1 - ($x/a).abs ** n ) ** (1/n) } # or could .round(1)?

# find point pairs for one quadrant
my @q = flat map { $_,.&y }, ^(a+1);

# Generate an SVG image
my $out = open('run/superellipse.svg', :w);
$out.print: [~] qq|<svg height="{b×2}" width="{a×2}" xmlns="http://www.w3.org/2000/svg">\n|, # DH change
  pline( @q ),             # (1,1) would be a no-op
  pline( @q «×» < 1 -1> ), # flip and mirror
  pline( @q «×» <-1 -1> ), # for the other 
  pline( @q «×» <-1  1> ), # three quadrants
  '</svg>';

sub pline (@q) {
  qq|<polyline points="{@q}"
  style="fill:none;stroke:black;stroke-width:3"
  transform="translate({a}, {b})" />\n|
}
