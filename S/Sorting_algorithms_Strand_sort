#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Sorting_algorithms/Strand_sort
#c# 2018-05-29 <>RC
#m# MOAR: OK
#j# JVM:  OK

sub infix:<M> (@x-in, @y-in) {
    my @x = | @x-in;
    my @y = | @y-in;
    flat @x, @y, 
        reverse gather while @x and @y {
            take do given @x[*-1] cmp @y[*-1] {
                when More { pop @x }
                when Less { pop @y }
                when Same { pop(@x), pop(@y) }
            }
        }
}

sub strand (@x) {
    my $i = 0;
    my $prev = -Inf;
    gather while $i < @x {
    	@x[$i] before $prev ?? $i++ !! take $prev = splice(@x, $i, 1)[0];
    }
}

# maybe too terse, but it does work
# gather @x[$i] before $prev ?? $i++ !! take $prev = splice(@x, $i, 1)[0] while $i < @x; 

sub strand_sort (@x is copy) {
    my @out;
    @out M= strand(@x) while @x;
    @out;
}

my @n = (1, 20, 64, 72, 48, 75, 96, 55, 42, 74);
say "Before {@n}";
@n = strand_sort(@n);
say "After  {@n}";

my @c = <The quick brown fox jumps over the lazy dog>;
say "Before {@c}";
@c = strand_sort(@c);
say "After  {@c}";

# above just for show, testing random values:
my @weights = (^50).map: { 100 + ( 1000.rand.Int / 10 ) };

use Test;
is @weights.sort, @weights.&strand_sort;
