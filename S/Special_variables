#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Special_variables
#c# 2018-03-20 <RC, 2020-04-12 >RC
#t# skiptest
#m# MOAR: OK
#j# JVM:  OK
#n# needs clean-up, obsolete variables referenced

#say  $?ARCH           ; # Host architecture
#say  $?XARCH          ; # Target architecture
#say  %?CONFIG         ; # configuration hash 
#say  %?DEEPMAGIC      ; # Controls the mappings of magical names to sub definitions
#say  $?GRAMMAR        ; # current grammar
#say  $?KERNEL         ; # operating system compiled for
#say  %?LANG           ; # What is the current set of interwoven languages?

#say  $?SCOPE          ; # Current "my" scope
#say  $?VM             ; # Which virtual machine am I compiling under
#say  $?XVM            ; # Which virtual machine am I cross-compiling for
#say  $?PERL           ; # Which Perl am I compiled for?

# '=' twigil works, but these NYI
#say @=COMMENT        ; # All the comment blocks in the file
#say $=DATA           ; # data block handle (=begin DATA ... =end)
#say @=DATA           ; # Same as above, but array
#say %=POD            ; # POD

#say $*EGID           ; # effective group id
#say $*EUID           ; # effective user id
#say $*GID            ; # group id
#say $*UID            ; # system user id

#say @*INC            ; # where to search for user modules (but not std lib!)
#say $*LANG           ; # LANG variable from %*ENV that defines what human language is used
#say %*META-ARGS      ; # Meta-arguments
#say %*OPTS           ; # Options from command line
#say %*OPT            ; # Options from command line to be passed down
#say %*PROTOCOLS      ; # Stores the methods needed for the uri() function

###  below are verified good ###

### Compile-time introspection ###

say  $?PACKAGE        ; # current package
#say  $?CLASS          ; # current class
#say  $?MODULE         ; # current module
#say  $?ROLE           ; # current role


say  $?DISTRIBUTION   ; # Which OS distribution am I compiling under

sub foo1 {
say  &?ROUTINE        ; # current sub or method (itself)
say  &?BLOCK          ; # current block (itself)
}

sub foo2 {
say  &?ROUTINE        ; # current sub or method (itself)
say  &?BLOCK          ; # current block (itself)
}

foo1();
foo2();

say  $?FILE           ; # current filename of source file
say  $?LINE           ; # current line number in source file
#say  ::?CLASS         ; # current class (as package or type name)

### Run-time variables ###

say $*COLLATION;  # This is a Collation object that can be used to configure Unicode collation levels.
say $*TOLERANCE;  # Variable used by the =~= operator, and any operations that depend on it, to decide if two values are approximately equal. Defaults to 1e-15.
say $*DEFAULT-READ-ELEMS; # Affects the number of bytes read by default by IO::Handle.read. Its default value is 65536.

### Dynamic varibles ###

say $*REPO;

#say $*USAGE; #  value of the auto-generated USAGE message

# not PROGRAM_NAME!!
say $*PROGRAM-NAME   ; # path to the current executable
say $*PROGRAM        ; # location (in the form of an IO::Path object) of the Raku program being executed.


say @*ARGS           ; # command-line arguments
say $*ARGFILES       ; # The magic command-line input handle
say $*CWD            ; # current working directory

say $*DISTRO         ; # Which OS distribution am I running under
say %*ENV            ; # system environment variables
say $*ERR            ; # Standard error handle
# !!not   $*EXECUTABLE_NAME; # executable name
say $*EXECUTABLE-NAME; # name of the Raku executable that is currently running
say $*EXECUTABLE     ; # IO::Path absolute path of the Raku executable that is currently running.
say $*IN             ; # Standard input handle; is an IO object
say $*KERNEL         ; # operating system running under

say $*OUT            ; # Standard output handle
# !! not PERL
say $*RAKU           ; # Raku version running under
say $*PID            ; # system process id
say $*TZ             ; # Local time zone
say $*USER           ; # system user id

#`{{
# It is probably useful to briefly explain normal variables in Raku before tackling special variables.
# Variables in Raku have a prefix sigil to distinguish them from named subroutines, functions, classes, and so on. There is a system of sigils to mark the fundamental structural type of the variable:

 $foo   scalar (object)
 @foo   ordered array
 %foo   unordered hash (associative array)
 &foo   code/rule/token/regex
 ::foo  package/module/class/role/subset/enum/type/grammar

# Sigils indicate overall interface, not the exact type of the bound object. Different sigils imply different minimal abilities. Ordinary sigils indicate normally scoped variables, either lexical or package scoped. Oddly scoped variables include a secondary sigil (a twigil) that indicates what kind of strange scoping the variable is subject to:
}}
