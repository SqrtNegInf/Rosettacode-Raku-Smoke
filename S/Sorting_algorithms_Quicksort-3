#!/usr/bin/env raku
#u# https://www.rosettacode.org/wiki/Sorting_algorithms/Quicksort
#c# 2023-10-02 <RC
#m# MOAR: OK
#j# JVM:  BROKEN

#| Recursive, parallel, single-pass, quicksort implementation
sub quicksort-parallel-naive(@a) {
    return @a if @a.elems < 2;
    my $pivot = @a.pick;
    my %prt{Order} is default([]) = @a.classify( * cmp $pivot );
    my Promise $less = start { samewith(%prt{Less}) }
    my $more = samewith(%prt{More});
    await $less andthen |$less.result, |%prt{Same}, |$more;
}

#Let's tune the parallel execution by applying a minimum batch size in order to spawn a new thread.

#| Recursive, parallel, batch tuned, single-pass, quicksort implementation
sub quicksort-parallel(@a, $batch = 2**9) {
    return @a if @a.elems < 2;

    # separate unsorted input into Order Less, Same and More compared to a random $pivot
    my $pivot = @a.pick;
    my %prt{Order} is default([]) = @a.classify( * cmp $pivot );

    # decide if we sort the Less partition on a new thread
    my $less = %prt{Less}.elems >= $batch
                    ?? start { samewith(%prt{Less}, $batch) }
                    !!         samewith(%prt{Less}, $batch);

    # meanwhile use current thread for sorting the More partition
    my $more = samewith(%prt{More}, $batch);

    # if we went parallel, we need to await the result
    await $less andthen $less = $less.result if $less ~~ Promise;

    # concat all sorted partitions into a list and return
    |$less, |%prt{Same}, |$more;
}

say "x" x 10 ~ " Testing " ~ "x" x 10;
use Test;
my @functions-under-test = &quicksort-parallel-naive, &quicksort-parallel;
my @testcases =
#        () => (),
#        <a>.List => <a>.List,
#        <a a> => <a a>,
        ("b", "a", 3) => (3, "a", "b"),
        <h b a c d f e g> => <a b c d e f g h>,
        <a 🎮 3 z 4 🐧> => <a 🎮 3 z 4 🐧>.sort
        ;

plan @testcases.elems * @functions-under-test.elems;
for @functions-under-test -> &fun {
    say &fun.name;
    is-deeply &fun(.key), .value, .key ~ "  =>  " ~ .value for @testcases;
}
done-testing;
