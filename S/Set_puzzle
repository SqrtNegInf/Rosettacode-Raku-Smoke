#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Set_puzzle
#c# 2016-01-19 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2023-01-08 replace call to built-in 'rand' for output stability (in-line shuffle code, need results to vary)

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub pick-all (@a is copy) is export {
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

# The trick here is to allocate three different bits for each enum, with
# the result that the cards of a matching set OR together to produce a
# 4-digit octal number that contains only the digits 1, 2, 4, or 7. This OR
# is done by funny looking [+|], which is the reduction form of +|, which is
# the numeric bitwise OR. (Because Raku stole the bare | operator for
# composing junctions instead.)

enum Color (red => 0o1000, green =>  0o2000, purple => 0o4000);
enum Count (one =>  0o100, two =>     0o200, three =>   0o400);
enum Shape (oval =>  0o10, squiggle => 0o20, diamond =>  0o40);
enum Style (solid =>  0o1, open =>      0o2, striped =>   0o4);

my @deck = sort Color.enums X Count.enums X Shape.enums X Style.enums;  # DH change

my $DRAW = 9, my $GOAL = $DRAW div 2;

sub show-cards(@c) { { @res.push: sprintf "%9s%7s%10s%9s", @c[$_;*]».key } for ^@c }

my @combinations = [^$DRAW].combinations(3);

my @draw;
repeat until (my @sets) == $GOAL {
    @draw = @deck.&pick-all.head($DRAW);
    my @bits = @draw.map: { [+] @^enums».value }
    @sets = gather for @combinations -> @c {
        take @draw[@c].item when /^ <[1247]>+ $/ given ( [+|] @bits[@c] ).base(8);
    }
}

@res.push: "Drew $DRAW cards:";
show-cards @draw;
for @sets.kv -> $i, @cards {
    @res.push: "\nSet {$i+1}:";
    show-cards @cards;
}

.say for @res;

my $ref = qq:to/END/;
Drew 9 cards:
    green    one      oval     open
    green  three      oval     open
   purple    two  squiggle     open
      red  three   diamond  striped
   purple    two      oval     open
    green    two   diamond  striped
      red  three  squiggle  striped
    green    one  squiggle    solid
      red    two  squiggle    solid

Set 1:
    green  three      oval     open
    green    two   diamond  striped
    green    one  squiggle    solid

Set 2:
   purple    two  squiggle     open
      red  three  squiggle  striped
    green    one  squiggle    solid

Set 3:
      red  three   diamond  striped
   purple    two      oval     open
    green    one  squiggle    solid

Set 4:
   purple    two      oval     open
    green    two   diamond  striped
      red    two  squiggle    solid
END

use Test;
is @res.join("\n"), chomp $ref;
