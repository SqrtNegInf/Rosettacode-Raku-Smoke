#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Sorting_Algorithms/Circle_Sort
#c# 2016-05-06 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# can be confused by certain input, e.g. <-1 -1a -3>

# The given algorithm can be simplified in several ways. There's no need to compute the midpoint, since the hi/lo will end up there. The extra swap conditional can be eliminated by incrementing hi at the correct moment inside the loop. There's no need to
# pass accumulated swaps down the call stack.
# This does generic comparisons, so it works on any ordered type, including numbers or strings.

sub circlesort (@x, $beg, $end) {
    my $swaps = 0;
    if $beg < $end {
        my ($lo, $hi) = $beg, $end;
        repeat {
            if @x[$lo] after @x[$hi] {
                @x[$lo,$hi] .= reverse;
                ++$swaps;
            }
            ++$hi if --$hi == ++$lo
        } while $lo < $hi;
        $swaps += circlesort(@x, $beg, $hi);
        $swaps += circlesort(@x, $lo, $end);
    }
    $swaps;
}

#say my @x = (-100..100).roll(20);
my @res1;
my @x = <16 35 -64 -29 46 36 -1 -99 20 100 59 26 76 -78 39 85 -7 -81 25 88>;
while circlesort(@x, 0, @x.end) { say @x; push @res1, @x } 

my @res2;
my @y = <The quick brown fox jumps over the lazy dog.>;
while circlesort(@y, 0, @y.end) { say @y; push @res2, @y }

my $ref1 = qq:to/END/;
-99 -81 -78 -64 -29 -7 -1 16 20 25 26 35 36 39 46 59 76 85 88 100
-99 -81 -78 -64 -29 -7 -1 16 20 25 26 35 36 39 46 59 76 85 88 100
-99 -81 -78 -64 -29 -7 -1 16 20 25 26 35 36 39 46 59 76 85 88 100
END

my $ref2 = qq:to/END/;
The brown dog. fox jumps lazy over quick the
The brown dog. fox jumps lazy over quick the
END

use Test;
is @res1.join("\n"), chomp $ref1;
is @res2.join("\n"), chomp $ref2;
