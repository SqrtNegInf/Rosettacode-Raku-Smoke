#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Seven-sided_dice_from_five-sided_dice
#c# 2015-10-26 <RC, 2018-04-08 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2023-01-29 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

#my $d5 = 1..5;
sub d5() { (1..5)[5 × $rng.next-rat] }  # 1d5

sub d7() {
    my $flat = 21;
    $flat = 5 × d5() - d5() until $flat < 21;
    $flat % 7 + 1;
}

my @dist;
my $n = 100_000;
#my $n = 1_000_000; # slow, esp. for JVM
my $expect = $n / 7;

loop ($_ = $n; $n; --$n) { @dist[d7()]++; }

my @res.push: "Expect " ~ $expect.fmt("%.3f");
for @dist.kv -> $i, $v {
    @res.push: "$i $v " ~ (($v - $expect)/$expect×100).fmt("%+.2f%%") if $v;
}

.say for @res;

my $ref = qq:to/END/;
Expect 14285.714
1 14210 -0.53%
2 14322 +0.25%
3 14185 -0.71%
4 14399 +0.79%
5 14333 +0.33%
6 14123 -1.14%
7 14428 +1.00%
END

use Test;
is @res.join("\n"), chomp $ref;
