#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Spiral_matrix
#c# 2015-10-26 <>RC
#m# MOAR: OK
#j#  JVM: OK


class Turtle {
   #my @dv = (-1,0,1) X, (-1,0,1);  # no, because order matters?
    my @dv = [0,-1], [1,-1], [1,0], [1,1], [0,1], [-1,1], [-1,0], [-1,-1];
    my $points = 8; # 'compass' points of neighbors on grid: north=0, northeast=1, east=2, etc.

    has @.loc = 0,0;
    has $.dir = 0;
    has %.world;
    has $.maxegg;
    has $.range-x;
    has $.range-y;

    method turn-left ($angle = 90) { $!dir -= $angle / 45; $!dir %= $points; }
    method turn-right($angle = 90) { $!dir += $angle / 45; $!dir %= $points; }

    method lay-egg($egg) {
        %!world{~@!loc} = $egg;
        $!maxegg max= $egg;
        $!range-x minmax= @!loc[0];
        $!range-y minmax= @!loc[1];
    }

    method look($ahead = 1) {
        my $there = @!loc »+« @dv[$!dir] »×» $ahead;
        %!world{~$there};
    }

    method forward($ahead = 1) {
        my $there = @!loc »+« @dv[$!dir] »×» $ahead;
        @!loc = @($there);
    }

    method showmap() {
        gather {
            my $form = "%{$!maxegg.chars}s";
            my $endx = $!range-x.max;
            for $!range-y.list X $!range-x.list -> ($y, $x) {
                take sprintf (%!world{"$x $y"} // '').fmt($form);
                take sprintf $x == $endx ?? "\n" !! ' ';
            }
        }
    }
}

# Now we can build the spiral in the normal way from outside-in like this
my $t1 = Turtle.new(dir => 2);
my $size = 7;
my $counter; # = 0;
$t1.forward(-1);
for 0..^ $size -> $ {       # DH "don't care" about iterator value, could omit entirely
    $t1.forward;
    $t1.lay-egg($counter++);
}
for $size-1 ... 1 -> $run {
    $t1.turn-right;
    $t1.forward, $t1.lay-egg($counter++) for 0..^$run;
    $t1.turn-right;
    $t1.forward, $t1.lay-egg($counter++) for 0..^$run;
}
put ' ' ~ $t1.showmap;

# or build the spiral from inside-out like this:
my $t2 = Turtle.new(dir => ($size %% 2 ?? 4 !! 0)); # not 't2' on RC
$counter = $size × $size; # DH 'my' needed on RC
while $counter {
    $t2.lay-egg(--$counter);
    $t2.turn-left;
    $t2.turn-right if $t2.look;
    $t2.forward;
}
put ' ' ~ $t2.showmap;

my $ref = qq:to/END/;
( 0    1    2    3    4    5    6 
 23   24   25   26   27   28    7 
 22   39   40   41   42   29    8 
 21   38   47   48   43   30    9 
 20   37   46   45   44   31   10 
 19   36   35   34   33   32   11 
 18   17   16   15   14   13   12 
)
END

use Test;
is $t1.showmap.gist, chomp $ref;
is $t2.showmap.gist, chomp $ref;
