#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Sort_three_variables
#c# 2017-04-30 <RC
#m# MOAR: OK
#j#  JVM: OK

# Raku has a built in sort routine which uses a variation of quicksort. The built in sort routine will automatically select a numeric sort if given a list of Real numeric items and a lexical Unicode sort if given a list that contains strings. The default numeric sort won't sort complex numbers unless you give it a custom comparitor. It is trivial to modify the sort comparitor function to get whatever ordering you want though.
# The list (77444, -12, 0) is a poor choice to demonstrate numeric sort since it will sort the same numerically or lexically. Instead we'll use (7.7444e4, -12, 9).
# Note that this example is awkward and verbose to comply with the task requirement to use a bunch of intermediate variables.

my @res;

# Sorting numeric things
my @a = 9, 7.7444e4, -12;
@res.push: "sorting: {@a}";
my ($x, $y, $z) = @a;
@res.push: ($x, $y, $z).sort.join('|'), ' - standard lexical string sort';

for  -*, ' - numeric sort high to low',
     ~*, ' - lexical "string" sort',
     *.chars, ' - sort by string length short to long',
     -*.chars, ' - or long to short'
  -> $cmp, $type {
    my ($x, $y, $z) = @a;
    @res.push: ($x, $y, $z).sort( &$cmp ), $type;
}


# Sorting strings. Added a vertical bar between strings to make them discernable
@a = 'lions, tigers, and', 'bears,  oh my!', '(from "The Wizard of Oz")';
@res.push: "\nsorting: {@a.join('|')}";
($x, $y, $z) = @a;
@res.push: ($x, $y, $z).sort.join('|'), ' - standard lexical string sort';

.say for @res; 

my $ref = qq:to/END/;
sorting: 9 77444 -12
-12|9|77444
 - standard lexical string sort
77444 9 -12
 - numeric sort high to low
-12 77444 9
 - lexical "string" sort
9 -12 77444
 - sort by string length short to long
77444 -12 9
 - or long to short

sorting: lions, tigers, and|bears,  oh my!|(from "The Wizard of Oz")
(from "The Wizard of Oz")|bears,  oh my!|lions, tigers, and
 - standard lexical string sort
END

use Test;
#my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;
