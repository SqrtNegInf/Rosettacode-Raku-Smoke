#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Compiler__Verifying_Syntax
#t# inprogress
#c# 2020-01-xx >RC
#m# MOAR: BROKEN
#j# JVM:  BROKEN
#n# note the stupid space in the URL...
#n# not even close... is the P6 'EBNF' parsing getting it wrong?

# a grammar to parse EBNF
grammar EBNF {
  rule         TOP { ^ <title>? '{' [ <production> ]+ '}' <comment>? $ }
  rule  production { <name> '=' <expression> <[.;]> }
  rule  expression { <term> +% "|" }
  rule        term { <factor>+ }
  rule      factor { <group> | <repeat> | <optional> | <identifier> | <literal> }
  rule       group { '(' <expression> ')' }
  rule      repeat { '{' <expression> '}' }
  rule    optional { '[' <expression> ']' }
  token identifier { <-[\|\(\)\{\}\[\]\.\;\"\'\s]>+ } 
  token    literal { ["'" <-[']>+ "'" | '"' <-["]>+ '"'] } 
  token      title { <literal> }
  token    comment { <literal> }
  token       name { <identifier>  <?before \h* '='> }
}

class EBNF::Actions {
    method        TOP($/) { 
                            make 'grammar ' ~
                              ($<title> ?? $<title>.subst(/\W/, '', :g) !! 'unnamed') ~
                              " \{\n rule TOP \{^[<" ~ $/<production>[0]<name> ~
                              ">]+\$\}\n " ~ $<production>>>.ast ~ "\}"
                          }
    method production($/) { 
                            make 'token ' ~ $<name> ~ ' {' ~
                              $<expression>.ast ~ "}\n"
                          }
    method expression($/) { make join '|', $<term>>>.ast }
    method       term($/) { make join '\h*', $<factor>>>.ast }
    method     factor($/) { 
                            make $<literal>  ?? $<literal> !!
                              $<group>    ?? '[' ~ $<group>.ast    ~ ']'  !!
                              $<repeat>   ?? '[' ~ $<repeat>.ast   ~ '\\s*]*' !!
                              $<optional> ?? '[' ~ $<optional>.ast ~ ']?' !!
                              '<' ~ $<identifier> ~ '>'
                          }
    method     repeat($/) { make $<expression>.ast }
    method   optional($/) { make $<expression>.ast }
    method      group($/) { make $<expression>.ast }
}

# the grammar being tested
my $ebnf = q:to/END/;
"task" {
stmt         =         expr ; 

expr         =         expr_level_2; 
expr_level_2 =         expr_level_3 {"or" expr_level_3} ; 
expr_level_3 =         expr_level_4 {"and" expr_level_4} ; 
expr_level_4 = ["not"] expr_level_5 [('=' | '<') expr_level_5] ; 
expr_level_5 =         expr_level_6 {('+' | '-') expr_level_6} ; 
expr_level_6 =         primary      {('*' | '/') primary} ; 

primary      =         Identifier
                     | Integer
                     | '(' expr ')'
                     | "true"
                     | "false"
                     ;

Integer      =         Digit {Digit};

Identifier   =         Letter {Letter | Digit | '_'};

Digit        =         "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

Letter       =         "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" 
                     | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" 
                     | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" 
                     | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" 
                     | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" 
                     | "Y" | "Z" ;
}
END

my @tests = q:to/END/.lines;
3 + not 5
3 + (not 5)
(42 + 3
(42 + 3 syntax_error
not 3 < 4 or (true or 3/4+8*5-5*2 < 56) and 4*3 < 12 or not true
and 3 < 2
not 7 < 2
2 < 3 < 4
2 < foobar - 3 < 4
2 < foobar and 3 < 4
4 * (32 - 16) + 9 = 73
235 76 + 1
a + b = not c and false
a + b = (not c) and false
a + b = (not c and false)
ab_c / bd2 or < e_f7
g not = h
i++
j & k
l or _m
END

my $p = EBNF.parse($ebnf, :actions(EBNF::Actions));
die "Hmmm, that didn't go well" unless $p;

my $cnt;
for @tests -> $stmt {
    my $g = 'task' ~ ++$cnt;
    my $grammar = ($p.ast).subst('task', $g);
#    say qq|\{\nmy \$s = '{$stmt}';\n$grammar\nprintf "%-3s\$s\\n", {$g}.parse(\$s) ?? 'T' !! 'F';\n}|; exit;
    qq|\{\nmy \$s = '{$stmt}';\n$grammar\nprintf "%-3s\$s\\n", {$g}.parse(\$s) ?? 'T' !! 'F';\n}|.EVAL;
}

#`{
Tx 3 + not 5
T  3 + (not 5)
F  (42 + 3
T  not 3 < 4 or (true or 3/4+8*5-5*2 < 56) and 4*3 < 12 or not true
Tx and 3 < 2
T  not 7 < 2
F  2 < 3 < 4
F  2 < foobar - 3 < 4
T  2 < foobar and 3 < 4
T  4 * (32 - 16) + 9 = 73
Tx 235 76 + 1
Tx a + b = not c and false
T  a + b = (not c) and false
Fx a + b = (not c and false)
Tx ab_c / bd2 or < e_f7
Tx g not = h
F  i++
F  j & k
F  l or _m
}
