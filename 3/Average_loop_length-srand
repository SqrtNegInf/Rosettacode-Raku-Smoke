#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Average_loop_length
#c# 2016-05-09 <>RC, 2018-05-31 <RC, 2022-11-03 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2017-08-10 'random' output changed on 
#n# 2019-??-?? with hash key order now variable, testing upgraded with ArrayHash
#n# 2020-09-01 something is unstable, run #2 flips between: 2.00% vs. 2.67%;
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch? [update: now they've re-converged]
#n# 2021-03-01 still unstable when cron-launched
#n# 2021-03-10 problem mostly in #2, 1.33% (98+%), or 0.67%, and very rarely 0.00% (then #3-6 are different too)
#n# 2022-09-22 code is fixed, but results still completely unstable (MoarVM and JVM)
#n# 2022-10-02 d'oh, was using out-of-date module, not new/precompiled version
#n# 2022-10-06 dare I hope this is now working and stable?  Been the single most troublesome Raku task on RC...
die 'BROKEN on Mac-Pro' if qx/uname -a/ ~~ /'Mac-Pro'/;

srand 123456;

use ArrayHash;

constant MAX_N  = 20;
constant TRIALS = 100;

my @res;

for 1 .. MAX_N -> $N {
    my $empiric = TRIALS R/ [+] find-loop(random-mapping($N)).elems xx TRIALS;
    my $theoric = [+] map -> $k { $N ** ($k + 1) R/ [×] flat $k**2, $N - $k + 1 .. $N }, 1 .. $N;

    FIRST say " N    empiric      theoric      (error)";
    FIRST say "===  =========  ============  =========";

    @res.push: sprintf "%3d  %9.4f  %12.4f    (%4.2f%%)",
            $N,  $empiric, $theoric, 100 × abs($theoric - $empiric) / $theoric;
}

.say for @res;

sub random-mapping ($n) {
    my %temp = random-mapping-orig($n);
    my %pair := array-hash();
    %pair{$_} = %temp{$_} for sort %temp.keys;
    return %pair;
}

sub random-mapping-orig { hash .list Z=> .roll($_) given ^$^size }

sub find-loop { 0, | %^mapping{*} ...^ { (%){$_}++ } }

#exit;

my $linux = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5400        1.5000    (2.67%)
  3     1.8300        1.8889    (3.12%)
  4     2.2500        2.2188    (1.41%)
  5     2.6200        2.5104    (4.37%)
  6     2.7000        2.7747    (2.69%)
  7     3.0400        3.0181    (0.72%)
  8     3.0500        3.2450    (6.01%)
  9     3.3100        3.4583    (4.29%)
 10     3.6600        3.6602    (0.01%)
 11     3.7300        3.8524    (3.18%)
 12     3.5500        4.0361    (12.04%)
 13     4.4200        4.2123    (4.93%)
 14     4.4600        4.3820    (1.78%)
 15     4.4000        4.5458    (3.21%)
 16     5.0700        4.7043    (7.77%)
 17     4.8800        4.8579    (0.46%)
 18     4.9300        5.0071    (1.54%)
 19     4.8900        5.1522    (5.09%)
 20     5.5300        5.2936    (4.47%)
END

my $imac = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5200        1.5000    (1.33%)
  3     1.8200        1.8889    (3.65%)
  4     2.2600        2.2188    (1.86%)
  5     2.3900        2.5104    (4.80%)
  6     2.6000        2.7747    (6.30%)
  7     3.2200        3.0181    (6.69%)
  8     3.3500        3.2450    (3.24%)
  9     3.2400        3.4583    (6.31%)
 10     3.9100        3.6602    (6.82%)
 11     3.7800        3.8524    (1.88%)
 12     4.2100        4.0361    (4.31%)
 13     4.2500        4.2123    (0.89%)
 14     4.1600        4.3820    (5.07%)
 15     4.5700        4.5458    (0.53%)
 16     4.7100        4.7043    (0.12%)
 17     4.9700        4.8579    (2.31%)
 18     5.1900        5.0071    (3.65%)
 19     5.5200        5.1522    (7.14%)
 20     5.3100        5.2936    (0.31%)
END

use Test;
my $ref = qx/uname -a/ ~~ /'iMac'/ ?? $imac !! $linux;
is @res.join('').lc.subst(/<ws>/, '', :g), $ref.lc.subst(/<ws>/, '', :g);
