#!/usr/bin/env raku
#u# https://www.rosettacode.org/wiki/Unescape_a_string
#c# 2024-08-17 <RC, 2024-10-10 <RC
#m# MOAR: OK
#j# JVM:  OK

my @res;

grammar JSON-Unescape {
   token TOP             { ^ <value> $ }
   token value           { [ <str> | \\ <str=.str_escape> ]* }
   token str             { <-["\\\t\x[0A]]>+ }
   token str_escape      { <["\\/bfnrt]> | 'u' <utf16_codepoint>+ % '\u' }
   token utf16_codepoint { <.xdigit>**4 }
}

class JSON-Unescape-Actions {
   method        TOP($/) { make $<value>.made }
   method        str($/) { make ~$/ }
   method      value($/) { make $<str>¬ª.made.join }
   method str_escape($/) {
      make $<utf16_codepoint>.Bool 
         ?? utf16.new( $<utf16_codepoint>.map({:16(~$_)}) ).decode()
         !! %(< \\ / b n t f r " > Z=> < \\ / \b \n \t \f \r " >).{~$/}
   }
}

for < abc  a‚ò∫c  a\"c \u0061\u0062\u0063 a\\\c   a\u263Ac  a\\\u263Ac
      a\uD834\uDD1Ec a\ud834\udd1ec     a"c     a\\u263   a\\u263Xc 
      a\\uDD1Ec      a\\uD834c          a\\uD834\\u263Ac > -> $input {
  #printf "%20s => ", $input;
   my $a = JSON-Unescape-Actions.new();
   my $o = JSON-Unescape.parse($input, :actions($a));
   fail "Invalid JSON string" unless $o.defined;
   CATCH { default { @res.push: "Error: $_" } }
   @res.push: $o.defined ?? $o.made !! "Error"
}

.say for @res;

my $ref = q:to/END/;
abc
a‚ò∫c
a"c
abc
a\c
a‚ò∫c
a\u263Ac
aùÑûc
aùÑûc
Error: Invalid JSON string
Error: Invalid JSON string
Error: Invalid JSON string
Error: Malformed UTF-16; unexpected low surrogate
Error: Malformed UTF-16; incomplete surrogate pair
Error: Malformed UTF-16; incomplete surrogate pair
END

use Test;
is @res.join("\n"), chomp $ref;
