#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Vector
#c# 2016-03-19 <RC
#m# MOAR: OK
#j#  JVM: OK

class Vector {
    has Real $.x;
    has Real $.y;

    multi submethod BUILD (:$!x!, :$!y!) {
        *
    }
    multi submethod BUILD (:$length!, :$angle!) {
        $!x = $length × cos $angle;
        $!y = $length × sin $angle;
    }
    multi submethod BUILD (:from([$x1, $y1])!, :to([$x2, $y2])!) {
        $!x = $x2 - $x1;
        $!y = $y2 - $y1;
    }

    method length { sqrt $.x ** 2 + $.y ** 2 }
    method angle  { atan2 $.y, $.x }

    method add      ($v) { Vector.new(x => $.x + $v.x,  y => $.y + $v.y) }
    method subtract ($v) { Vector.new(x => $.x - $v.x,  y => $.y - $v.y) }
    method multiply ($n) { Vector.new(x => $.x × $n,    y => $.y × $n  ) }
    method divide   ($n) { Vector.new(x => $.x / $n,    y => $.y / $n  ) }

    method gist { "vec[$.x, $.y]" }
}

multi infix:<+>  (Vector $v, Vector $w) { $v.add: $w }
multi infix:<->  (Vector $v, Vector $w) { $v.subtract: $w }
multi prefix:<-> (Vector $v)            { $v.multiply: -1 }
multi infix:<×>  (Vector $v, $n)        { $v.multiply: $n }
multi infix:</>  (Vector $v, $n)        { $v.divide: $n }

#####[ Usage example: ]#####

my @res;
my $u = Vector.new(x => 3, y => 4);                #: vec[3, 4]
my $v = Vector.new(from => [1, 0], to => [2, 3]);  #: vec[1, 3]
my $w = Vector.new(length => 1, angle =>  π/4);    #: vec[0.707106781186548, 0.707106781186547]

@res.push: $u.gist;
@res.push: $v.gist;
@res.push: ($u.length, 5).gist;
@res.push: ($u + $v).gist;
@res.push: ($u - $v).gist;
@res.push: (-$u).gist;
@res.push: ($u × 10).gist;
@res.push: ($u / 2).gist;

.say for @res;

my $ref = qq:to/END/;
vec[3, 4]
vec[1, 3]
(5 5)
vec[4, 7]
vec[2, 1]
vec[-3, -4]
vec[30, 40]
vec[1.5, 2]
END

use Test;
is @res.join("\n"), chomp $ref;
is-approx ($u.angle × 180/π).round(.000000000001), 53.130102354156;
