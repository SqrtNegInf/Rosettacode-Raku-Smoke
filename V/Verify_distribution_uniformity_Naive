#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Verify_distribution_uniformity/Naive
#c# 2016-06-12 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch? [known 'srand' issue]

srand 123456;

# Since the tested function is rolls of a 7 sided die, the test numbers are magnitudes of 10x bumped up 
# to the closest multiple of 7. This reduces spurious error from there not being an integer expected value.

my $d7 = 1..7;
sub roll7 { $d7.roll };

my $threshold = 3;

for 14, 105, 1001, 10003, 100002, 1000006 ->  $n
  { dist( $n, $threshold,  &roll7 ) };


my @res;
sub dist ( $n is copy, $threshold, &producer ) {
    my @dist;
    my $expect = $n / 7;
    @res.push: sprintf "Expect\t%.3f", $expect;

    loop ($_ = $n; $n; --$n) { @dist[&producer()]++; }

    for @dist.kv -> $i, $v is copy {
        next unless $i;
        $v //= 0;
        my $pct = ($v - $expect)/$expectÃ—100;
        @res.push: sprintf "%d\t%d\t%+.2f%% %s", $i, $v, $pct,
          ($pct.abs > $threshold ?? '- skewed' !! '');
    }
}

#.say for @res; exit;

my $moar-cronjob = qq:to/END/;
Expect	2.000
1	3	+50.00% - skewed
2	3	+50.00% - skewed
3	0	-100.00% - skewed
4	2	+0.00% 
5	2	+0.00% 
6	2	+0.00% 
7	2	+0.00% 
Expect	15.000
1	15	+0.00% 
2	16	+6.67% - skewed
3	10	-33.33% - skewed
4	15	+0.00% 
5	14	-6.67% - skewed
6	15	+0.00% 
7	20	+33.33% - skewed
Expect	143.000
1	161	+12.59% - skewed
2	148	+3.50% - skewed
3	131	-8.39% - skewed
4	161	+12.59% - skewed
5	133	-6.99% - skewed
6	123	-13.99% - skewed
7	144	+0.70% 
Expect	1429.000
1	1508	+5.53% - skewed
2	1513	+5.88% - skewed
3	1424	-0.35% 
4	1382	-3.29% - skewed
5	1417	-0.84% 
6	1399	-2.10% 
7	1360	-4.83% - skewed
Expect	14286.000
1	14399	+0.79% 
2	14228	-0.41% 
3	14096	-1.33% 
4	14231	-0.38% 
5	14222	-0.45% 
6	14391	+0.73% 
7	14435	+1.04% 
Expect	142858.000
1	142235	-0.44% 
2	143784	+0.65% 
3	142933	+0.05% 
4	143251	+0.28% 
5	142684	-0.12% 
6	142351	-0.35% 
7	142768	-0.06% 
END

my $moar-terminal = qq:to/END/;
Expect	2.000
1	3	+50.00% - skewed
2	1	-50.00% - skewed
3	4	+100.00% - skewed
4	1	-50.00% - skewed
5	3	+50.00% - skewed
6	1	-50.00% - skewed
7	1	-50.00% - skewed
Expect	15.000
1	12	-20.00% - skewed
2	14	-6.67% - skewed
3	15	+0.00% 
4	14	-6.67% - skewed
5	19	+26.67% - skewed
6	12	-20.00% - skewed
7	19	+26.67% - skewed
Expect	143.000
1	165	+15.38% - skewed
2	146	+2.10% 
3	132	-7.69% - skewed
4	165	+15.38% - skewed
5	135	-5.59% - skewed
6	121	-15.38% - skewed
7	137	-4.20% - skewed
Expect	1429.000
1	1510	+5.67% - skewed
2	1514	+5.95% - skewed
3	1428	-0.07% 
4	1381	-3.36% - skewed
5	1414	-1.05% 
6	1397	-2.24% 
7	1359	-4.90% - skewed
Expect	14286.000
1	14399	+0.79% 
2	14230	-0.39% 
3	14094	-1.34% 
4	14230	-0.39% 
5	14222	-0.45% 
6	14393	+0.75% 
7	14434	+1.04% 
Expect	142858.000
1	142235	-0.44% 
2	143786	+0.65% 
3	142931	+0.05% 
4	143249	+0.27% 
5	142684	-0.12% 
6	142356	-0.35% 
7	142765	-0.07% 
END

my $jvm = qq:to/END/;
Expect	2.000
1	2	+0.00% 
2	3	+50.00% - skewed
3	1	-50.00% - skewed
4	2	+0.00% 
5	0	-100.00% - skewed
6	2	+0.00% 
7	4	+100.00% - skewed
Expect	15.000
1	13	-13.33% - skewed
2	19	+26.67% - skewed
3	23	+53.33% - skewed
4	18	+20.00% - skewed
5	12	-20.00% - skewed
6	11	-26.67% - skewed
7	9	-40.00% - skewed
Expect	143.000
1	155	+8.39% - skewed
2	136	-4.90% - skewed
3	146	+2.10% 
4	132	-7.69% - skewed
5	158	+10.49% - skewed
6	142	-0.70% 
7	132	-7.69% - skewed
Expect	1429.000
1	1443	+0.98% 
2	1463	+2.38% 
3	1389	-2.80% 
4	1390	-2.73% 
5	1498	+4.83% - skewed
6	1397	-2.24% 
7	1423	-0.42% 
Expect	14286.000
1	14332	+0.32% 
2	14263	-0.16% 
3	14364	+0.55% 
4	14346	+0.42% 
5	14215	-0.50% 
6	14247	-0.27% 
7	14235	-0.36% 
Expect	142858.000
1	142733	-0.09% 
2	142788	-0.05% 
3	142821	-0.03% 
4	142944	+0.06% 
5	142983	+0.09% 
6	142931	+0.05% 
7	142806	-0.04% 
END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
