#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Verify_distribution_uniformity/Naive
#c# 2016-06-12 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch? [known 'srand' issue]
#n# 2022-12-16 replace call to built-in 'rand' for output stability (slower, so reduce scope of testing)

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Since the tested function is rolls of a 7 sided die, the test numbers are magnitudes of 10x bumped up 
# to the closest multiple of 7. This reduces spurious error from there not being an integer expected value.

#my $d7 = 1..7;
#sub roll7 { $d7.roll };
sub roll7 { (1..7)[7*$rng.next-rat] };

my $threshold = 3;

#for 14, 105, 1001, 10003, 100002, 1000006 ->  $n
for 14, 105, 1001, 10003, 100002 ->  $n
  { dist( $n, $threshold,  &roll7 ) };


my @res;
sub dist ( $n is copy, $threshold, &producer ) {
    my @dist;
    my $expect = $n / 7;
    @res.push: sprintf "Expect\t%.3f", $expect;

    loop ($_ = $n; $n; --$n) { @dist[&producer()]++; }

    for @dist.kv -> $i, $v is copy {
        next unless $i;
        $v //= 0;
        my $pct = ($v - $expect)/$expectÃ—100;
        @res.push: sprintf "%d\t%d\t%+.2f%% %s", $i, $v, $pct,
          ($pct.abs > $threshold ?? '- skewed' !! '');
    }
}

.say for @res;

my $ref = qq:to/END/;
Expect	2.000
1	0	-100.00% - skewed
2	5	+150.00% - skewed
3	2	+0.00% 
4	0	-100.00% - skewed
5	1	-50.00% - skewed
6	5	+150.00% - skewed
7	1	-50.00% - skewed
Expect	15.000
1	22	+46.67% - skewed
2	13	-13.33% - skewed
3	12	-20.00% - skewed
4	19	+26.67% - skewed
5	12	-20.00% - skewed
6	19	+26.67% - skewed
7	8	-46.67% - skewed
Expect	143.000
1	167	+16.78% - skewed
2	137	-4.20% - skewed
3	128	-10.49% - skewed
4	165	+15.38% - skewed
5	144	+0.70% 
6	119	-16.78% - skewed
7	141	-1.40% 
Expect	1429.000
1	1402	-1.89% 
2	1369	-4.20% - skewed
3	1483	+3.78% - skewed
4	1423	-0.42% 
5	1401	-1.96% 
6	1472	+3.01% - skewed
7	1453	+1.68% 
Expect	14286.000
1	14471	+1.29% 
2	14302	+0.11% 
3	14332	+0.32% 
4	14205	-0.57% 
5	14153	-0.93% 
6	14281	-0.03% 
7	14258	-0.20% 
END

use Test;
is @res.join("\n"), chomp $ref;
