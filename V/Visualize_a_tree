#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Visualize_a_tree
#c# 2015-12-16 <RC
#m# MOAR: OK
#j#  JVM: OK

my @res;

sub visualize-tree($tree, &label, &children,
                   :$indent = '',
                   :@mid = ('├─', '│ '),
                   :@end = ('└─', '  '),
) {
    sub visit($node, *@pre) {
        gather {
            take @pre[0] ~ label($node);
            my @children = children($node); # so ':=' wasn't doing anything special
            my $e = @children.end;
            for @children.kv -> $_, $child {
                #when    $e { take visit($child, (@pre[1] X~ @end)) }
                #default    { take visit($child, (@pre[1] X~ @mid)) }
                take visit($child, (@pre[1] X~ ($e.so ?? @end !! @mid) )) # doesn't work?
            }
        }
    }
    visit($tree, $indent xx 2);
}

# example tree built up of pairs
my $tree = root=>[a=>[a1=>[a11=>[]]],b=>[b1=>[b11=>[]],b2=>[],b3=>[]]];

@res.push: .map({.join("\n")}).join("\n").sprintf for visualize-tree($tree, *.key, *.value.list);
.say for @res;

my $ref = qq:to/END/;
root
├─a
│ └─a1
│   └─a11
└─b
  ├─b1
  │ └─b11
  ├─b2
  └─b3
END

use Test;
is @res.join("\n"), chomp $ref;
