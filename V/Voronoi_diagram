#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Voronoi_diagram
#c# 2017-10-11 <RC, 2018-10-15 >RC
#t# graphical
#m# MOAR: OK
#j# JVM:  BROKEN
#f# RC file: voronoi-Euclidean-perl6.png
#n# (not testing Taxicab/Minkowski images, probably out-of-date in 'ref')
#n# no speed diff with .race applied to x/y together or just x
#n# 2023-01-07 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

use Image::PNG::Portable;

my %type = ( # Voronoi diagram type distance calculation
#    'Taxicab'   => sub ($px, $py, $x, $y) { ($px - $x).abs  + ($py - $y).abs  },
    'Euclidean' => sub ($px, $py, $x, $y) { ($px - $x)²     + ($py - $y)²     },
#    'Minkowski' => sub ($px, $py, $x, $y) { ($px - $x)³.abs + ($py - $y)³.abs },
);

my $width  = 400;
my $height = 400;
my $dots   = 30;

my @domains = map { Hash.new(
   #'x' => (5..$width-5).roll,
   #'y' => (5..$height-5).roll,
   #'rgb' => [(64..255).roll xx 3]
    'x'   => floor($width  × $rng.next-rat),
    'y'   => floor($height × $rng.next-rat),
    'rgb' => [ floor((255-64)×$rng.next-rat) xx 3 ]
) }, ^$dots;

for %type.keys -> $type {
    #my $img = voronoi-bar(@domains, :w($width), :h($height), :$type);
    my $img = voronoi(@domains, :w($width), :h($height), :$type);
    @domains.map: *.&dot($img);
    $img.write: "run/voronoi-{$type}-perl6.png";
}

sub voronoi (@domains, :$w, :$h, :$type) {
    my $png = Image::PNG::Portable.new: :width($w), :height($h);
    (^$w X ^$h).race.map: -> ($x, $y) {
        my ($, $i) = min @domains.map: { %type{$type}(%($_)<x>, %($_)<y>, $x, $y), $++ };
        $png.set: $x, $y, |@domains[$i]<rgb>
    }
    $png
}

# this on RC, with cute throbber
sub voronoi-bar (@domains, :$w, :$h, :$type) {
    my @bars = '▁▂▃▅▆▇▇▆▅▃▂▁'.comb;
    my $png = Image::PNG::Portable.new: :width($w), :height($h);
    (^$w).race.map: -> $x {
        print "\b" x 2+@bars, @bars .= rotate(1).join , '  ';
        for ^$h -> $y {
            my ($, $i) = min @domains.map: { %type{$type}(%($_)<x>, %($_)<y>, $x, $y), $++ };
            $png.set: $x, $y, |@domains[$i]<rgb>
        }
    }
    $png
}

sub dot (%h, $png, $radius = 3) {
    for (%h<x> X+ -$radius .. $radius) X (%h<y> X+ -$radius .. $radius) -> ($x, $y) {
            $png.set($x, $y, 0, 0, 0) if ( %h<x> - $x + (%h<y> - $y) × i ).abs <= $radius;
    }
}
