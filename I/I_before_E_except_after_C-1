#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/I_before_E_except_after_C
#c# 2015-12-11 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2022-01-12 fixed warning on ternary

#This solution uses grammars and actions to parse the given file, the Bag for tallying up occurrences of each possible thing we're looking for ("ie", "ei", "cie", and "cei"), and junctions to determine the plausibility of a phrase from the subphrases. Note that a version of rakudo newer than the January 2014 compiler or Star releases is needed, as this code relies on a recent bugfix to the make function.

grammar CollectWords {
    token TOP {
        [^^ <word> $$ \n?]+
    }

    token word {
        [ <with_c> | <no_c> | \N ]+
    }

    token with_c {
        c <ie_part>
    }

    token no_c {
        <ie_part>
    }

    token ie_part {
        ie | ei | eie # a couple words in the list have "eie"
    }
}

class CollectWords::Actions {
    method TOP($/) {
        make $<word>».ast.flat.Bag; # DH change
    }

    method word($/) {
        if $<with_c> + $<no_c> {
            make ($<with_c>, $<no_c>).flat».ast;
            #make flat $<with_c>».ast, $<no_c>».ast; # DH change
        } else {
            make ();
        }
    }

    method with_c($/) {
        make "c" X~ | $<ie_part>.ast;
    }

    method no_c($/) {
        make "!c" X~ | $<ie_part>.ast;
    }

    method ie_part($/) {
        if ~$/ eq 'eie' {
            make ('ei', 'ie');
        } else {
            make ~$/;
        }
    }
}

my @res;

sub plausible($good, $bad, $msg) {
    if $good > 2×$bad {
        @res.push: "$msg: PLAUSIBLE ($good ✔ vs. $bad ✘)";
        return True;
    } else {
        @res.push: "$msg: NOT PLAUSIBLE ($good ✔ vs. $bad ✘)";
        return False;
    }
}

my $results = CollectWords.parsefile("ref/unixdict.txt", :actions(CollectWords::Actions)).ast;

my $phrasetest = [&] plausible($results<!cie>, $results<!cei>, "I before E when not preceded by C"),
                     plausible($results<cei>, $results<cie>, "E before I when preceded by C");

say "I before E except after C: " ~ ($phrasetest ?? "PLAUSIBLE" !! "NOT PLAUSIBLE");
my $test-result = $phrasetest ?? "PLAUSIBLE" !! "NOT PLAUSIBLE";
@res.push: "I before E except after C: $test-result";

.say for @res;

my $ref = qq:to/END/;
I before E when not preceded by C: PLAUSIBLE (464 ✔ vs. 215 ✘)
E before I when preceded by C: NOT PLAUSIBLE (13 ✔ vs. 24 ✘)
I before E except after C: NOT PLAUSIBLE
END

use Test;
is @res.join("\n"), chomp $ref;
