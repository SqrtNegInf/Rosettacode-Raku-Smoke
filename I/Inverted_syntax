#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Inverted_syntax
#c# 2018-03-20 <RC
#m# MOAR: OK
#j# JVM:  OK

my @res;

#Like all Perls, Raku has statement modifiers:
my $guess = 6;
if $guess == 6 { @res.push: "Wow! Lucky Guess!" }          # Traditional
@res.push: 'Wow! Lucky Guess!' if $guess == 6;             # Inverted
unless $guess == 5 { @res.push: "Huh! You Guessed Rong!" } # Traditional
@res.push: 'Huh! You Guessed Rong!' unless $guess == 5;    # Inverted

#Perl also inverts the syntax of loops:
my $i = 10;
while $i { --$i }
--$i while $i;
@res.push: $i;


my $x = 0;
until $x > 10 { $x++ }
@res.push: $x;

$x++ until $x > 20;
@res.push: $x;

for 1..10 { @res.push: $_ if $_ %% 2 }
@res.push: $_ if $_ %% 2 for 1..10;  # list comprehension

# Raku has a system of metaoperators that modify the characteristics of normal operators. Among these is the R metaoperator, which is able to reverse the arguments of most infix operators (including user-defined ones).
#So a reversed assignment is easy to write:
42 R= $x; @res.push: $x;   # prints 42

# Since, much like list operators, assignment loosens the precedence of the following expression to allow comma lists, reverse assignment of a list requires parens where the normal assignment would not:
(1,2,3) R= my @a2;
@res.push: @a2.join(' ');

# However, generally in that case you'd use a feed operator anyway, which is like an object pipe, but unlike Unix pipes works in either direction:
my @a3 <== 1,2,3;
1,2,3 ==> my @a4;
@res.push: @a3.join(' ');
@res.push: @a4.join(' ');
# We think this is much more readable than a reversed assignment.

# One other interesting inversion is the ability to put the conditional of a repeat loop at either end, with identical test-after semantics:
my @l1 = <a b c 1 2 3 d e>;
repeat { $_ = @l1.shift; } until /^\d+$/;
@res.push: @l1.join(' ');

repeat until /^\D+$/ { $_ = @l1.shift; }
@res.push: @l1.join(' ');

.say for @res;

my $ref = qq:to/END/;
Wow! Lucky Guess!
Wow! Lucky Guess!
Huh! You Guessed Rong!
Huh! You Guessed Rong!
0
11
21
2
4
6
8
10
2
4
6
8
10
42
1 2 3
1 2 3
1 2 3
2 3 d e
e
END

use Test;
is @res.join("\n"), chomp $ref;

=finish

repeat until my $answer ~~ 42 {
    $answer = prompt "Gimme an answer: ";
}
#This would require a prior declaration (and two extra semicolons, horrors)
#if written in the non-inverted form with the conditional at the bottom:

repeat {
    $answer = prompt "Gimme an answer: ";
} until $answer ~~ 42;
#You can't just put the my on the $answer in the block because the conditional is outside the scope of the block, and would not see the declaration.

