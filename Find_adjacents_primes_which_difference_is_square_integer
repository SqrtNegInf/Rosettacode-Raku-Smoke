#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Find_adjacents_primes_which_difference_is_square_integer
#c# 2021-11-21 <RC
#m# MOAR: OK
#j# JVM:  BROKEN

my @res;

use Lingua::EN::Numbers;
use Math::Primesieve;

my $iterator = Math::Primesieve::iterator.new;
my $limit    = 1e7;
my @squares  = (1..30).map: *²;
my $last     = 2;
my @gaps;
my @counts;

loop {
    my $this = (my $p = $iterator.next) - $last;
    quietly @gaps[$this].push($last) if +@gaps[$this] < 10;
    @counts[$this]++;
    last if $p > $limit;
    $last = $p;
}

#print "Adjacent primes up to {comma $limit.Int} with a gap value that is a perfect square:";
for @gaps.pairs.grep: { (.key ∈ @squares) && .value.defined} -> $p {
    my $ten = (@counts[$p.key] > 10) ?? ', (first ten)' !! '';
    @res.push: "\nGap {$p.key}: {comma @counts[$p.key]} found$ten:";
    @res.push: join "\n", $p.value.batch(5)».map({"($_, {$_+ $p.key})"})».join(', ');
}

.say for @res;
exit;

my $ref = q:to/END/;
END

use Test;
is @res.join("\n"), chomp $ref;
