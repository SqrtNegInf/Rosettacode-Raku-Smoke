#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Factorions
#c# 2019-08-12 <RC, 2019-09-09 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# little slower than previous version (when doing 1.5 million iterations)
#n# 2019-10-07 crashed, race condition?
#n# 2020-?     tune .race to match # of bases
#n# 2021-08-25 .race starts causing failure
#n# 2021-09-10 pre-allocating @result, making @factorial non-lazy does not help
#n# OEIS:A014080 Factorions in base 10
#n# OEIS:A193163 Factorions in base n

constant @factorial = 1, |[\×] 1..*;
#constant @factorial = 1, |[\×] 1..10000;

constant $limit = 42_000; # 1_500_000;

constant $bases = 9 .. 12;

my @result; #[13];

#$bases.race(:1batch).map: -> $base {
#$bases.race(:degree($bases.elems), :1batch).map: -> $base {
$bases.map: -> $base {

    @result[$base] = "\nFactorions in base $base:\n1 2";

    sink (1 .. $limit div $base).map: -> $i {
        my $product = $i × $base;
        my $partial;

        for $i.polymod($base xx *) {
            $partial += @factorial[$_];
            last if $partial > $product
        }

        next if $partial > $product;

        my $sum;

        for ^$base {
            last if ($sum = $partial + @factorial[$_]) > $product + $_;
            @result[$base] ~= " $sum" and last if $sum == $product + $_
        }
    }
}

.say for @result[$bases];

my $ref = q:to/END/;

Factorions in base 9:
1 2 41282

Factorions in base 10:
1 2 145 40585

Factorions in base 11:
1 2 26 48 40472

Factorions in base 12:
1 2
END

use Test;
is @result[$bases].join("\n"), chomp $ref;

=finish

Use of Nil in numeric context
  in block  at F/Factorions line 29
A worker in a parallel iteration (hyper or race) initiated here:
  in block <unit> at F/Factorions line 20

Died at:
    elems requires a concrete object (got a Mu type object instead)
      in block  at F/Factorions line 29
      in block  at F/Factorions line 24
