#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Forest_fire
#c# 2015-11-11 <RC, 2023-09-08 <RC
#m# MOAR: OK
#j#  JVM: OK
#f# RC file: forest_fire.dat
#n# run 'Forest_fire.1' to see interactive output
#n# 2022-10-30 replace call to built-in 'rand' for output stability

#`{
This version saves a lot of looking around by using four states instead of
three; the Heating state does a lookahead to track trees that are being
heated up by burning trees, so we only ever have to traverse the neighbors
of burning trees, not all trees.  Also, by only checking the list of
burning trees, we can avoid copying the entire forest each iteration, since
real forests are mutable.
}

use myRNG;

constant $RED = "\e[1;31m";
constant $YELLOW = "\e[1;33m";
constant $GREEN = "\e[1;32m";
constant $CLEAR = "\e[0m";

enum Cell-State <Empty Tree Heating Burning>;
my @pix = '  ', $GREEN ~ '木', $YELLOW ~ '木', $RED ~ '木';

class Forest {
    has Int $.height;
    has Int $.width;
    has $.p = 0.01;
    has $.f = 0.001;
    has @!coords;
    has @!spot;
    has @!neighbors;

    method BUILD (Int :$!height, Int :$!width) {

    my $rng1 = myRNG.new( :seed(987654321) );

	@!coords = ^$!height X ^$!width;
	@!spot = [ ($rng1.next-rat < .5 ?? Tree !! Empty) xx $!width ] xx $!height;
        self!init-neighbors;
    }

    method !init-neighbors {
        for @!coords -> ($i, $j) {
            @!neighbors[$i][$j] = eager gather for
                    [-1,-1],[+0,-1],[+1,-1],
                    [-1,+0],        [+1,+0],
                    [-1,+1],[+0,+1],[+1,+1]
	    {
		take-rw @!spot[$i + .[0]][$j + .[1]] // next;
	    }
	}
    }

    method step {
    my $rng2 = myRNG.new( :seed(12345678) );
	my @heat;
        for @!coords -> ($i, $j) {
            given @!spot[$i][$j] {
                when Empty   { $_ = Tree    if $rng2.next-rat < $!p }
                when Tree    { $_ = Heating if $rng2.next-rat < $!f }
                when Heating { $_ = Burning; push @heat, ($i, $j); }
                when Burning { $_ = Empty }
            }
        }
	for @heat -> ($i,$j) {
	    $_ = Heating for @!neighbors[$i][$j].grep(Tree);
	}
    }

    method show ($fh) {
        for ^$!height -> $i {
            $fh.say: @pix[@!spot[$i].list].join;
        }
    }
}

#my ($ROWS, $COLS) = +«qx/stty size/.words;
my $ROWS = 41 ; my $COLS = 122; # DH hard-coding

sub MAIN (Int $height = $ROWS - 2, Int $width = $COLS div 2 - 1) {
    my $fh = open("run/forest_fire.dat", :w);
    my Forest $forest .= new(:$height, :$width);
    #print "\e[2J";      # ANSI clear screen
    loop {
	#print "\e[H";   # ANSI home
	#say $++;
    last if $++ > 10;
	$forest.show($fh);
	$forest.step;
    }
    $fh.close;
}
