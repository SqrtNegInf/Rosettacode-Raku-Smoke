#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Factorial_base_numbers_indexing_permutations_of_a_collection
#c# 2018-12-08 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2023-01-27 replace call to built-in 'rand' for output stability

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub pick-all (@a is copy) is export {
    my $rng = myRNG.new( :seed(123456) );
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

sub postfix:<!> (Int $n) { (flat 1, [\×] 1..*)[$n] }

multi base (Int $n is copy, 'F', $length? is copy) {
    constant @fact = [\×] 1 .. *;
    my $i = $length // @fact.first: * > $n, :k;
    my $f;
    [ @fact[^$i].reverse.map: { ($n, $f) = $n.polymod($_); $f } ]
}

sub fpermute (@a is copy, *@f) { (^@f).map: { @a[$_ .. $_ + @f[$_]] .= rotate(-1) }; @a }

@res.push: "Part 1: Generate table";
@res.push: $_.&base('F', 3).join('.') ~ ' -> ' ~ [0,1,2,3].&fpermute($_.&base('F', 3)).join for ^24;

@res.push: "\nPart 2: Compare 11! to 11! ";
# This is kind of a weird request. Since we don't actually need to _generate_
# the permutations, only _count_ them: compare count of 11! vs count of 11!
@res.push: "11! === 11! : {11! === 11!}";

@res.push: "\nPart 3: Generate the given task shuffles";
my \omega = <AS KS QS JS 10S 9S 8S 7S 6S 5S 4S 3S 2S AH KH QH JH 10H 9H 8H 7H 6H 5H 4H 3H 2H
         AD KD QD JD 10D 9D 8D 7D 6D 5D 4D 3D 2D AC KC QC JC 10C 9C 8C 7C 6C 5C 4C 3C 2C
>;

my @books = <
    39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0
    51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1
>;

@res.push: "Original deck:";
@res.push: omega.join;

@res.push: "\n$_\n" ~ omega[(^omega).&fpermute($_.split: '.')].join for @books;

@res.push: "\nPart 4: Generate a random shuffle";
my @shoe = (+omega ... 2).map: { (^$_)[$_ * $rng.next-rat] };
@res.push: @shoe.join('.');
@res.push: omega[(^omega).&fpermute(@shoe)].join;

@res.push: "\nSeems to me it would be easier to just say: omega.pick(*).join";
@res.push: omega.&pick-all.join;

.say for @res;

my $ref = q:to/END/;
Part 1: Generate table
0.0.0 -> 0123
0.0.1 -> 0132
0.1.0 -> 0213
0.1.1 -> 0231
0.2.0 -> 0312
0.2.1 -> 0321
1.0.0 -> 1023
1.0.1 -> 1032
1.1.0 -> 1203
1.1.1 -> 1230
1.2.0 -> 1302
1.2.1 -> 1320
2.0.0 -> 2013
2.0.1 -> 2031
2.1.0 -> 2103
2.1.1 -> 2130
2.2.0 -> 2301
2.2.1 -> 2310
3.0.0 -> 3012
3.0.1 -> 3021
3.1.0 -> 3102
3.1.1 -> 3120
3.2.0 -> 3201
3.2.1 -> 3210

Part 2: Compare 11! to 11! 
11! === 11! : True

Part 3: Generate the given task shuffles
Original deck:
ASKSQSJS10S9S8S7S6S5S4S3S2SAHKHQHJH10H9H8H7H6H5H4H3H2HADKDQDJD10D9D8D7D6D5D4D3D2DACKCQCJC10C9C8C7C6C5C4C3C2C

39.49.7.47.29.30.2.12.10.3.29.37.33.17.12.31.29.34.17.25.2.4.25.4.1.14.20.6.21.18.1.1.1.4.0.5.15.12.4.3.10.10.9.1.6.5.5.3.0.0.0
AC3C7S4C10D8DQSKH2S10S4D7CJC5H10H10CKC2C3H5DJS6SQC5SKSAD3DQH8C6D9S8S4S9HAS6H5C2D7H8H9C6C7DAHJDQD9D2H3SJH4HKD

51.48.16.22.3.0.19.34.29.1.36.30.12.32.12.29.30.26.14.21.8.12.1.3.10.4.7.17.6.21.8.12.15.15.13.15.7.3.12.11.9.5.5.6.6.3.4.0.3.2.1
2C5CJH4HJSAS5HAC6DQS9C3DQHJC10HKC10C5D7H10D3S8H10S7S6H5SKH4DAH4C2H9DQC8C7D6C3H6S7C2DJD9HADQD8D4SKDKS3C2S8S9S

Part 4: Generate a random shuffle
11.13.29.35.19.36.17.40.32.32.33.6.10.9.25.29.4.10.25.27.0.13.25.4.4.23.3.2.12.15.19.18.7.7.12.9.6.1.7.5.10.8.2.3.2.5.0.1.3.1.0
3SKH9D2D6HQC8H6C3DACJC8S2S4S7D10C10SJH4D8CAS4H7C7S6S5C9SJSKD8D4C9C7H5H10DAD9HQSQD3H3C5DAH10HQHKCKS2H2CJD5S6D

Seems to me it would be easier to just say: omega.pick(*).join
6HASQD6C2D9HJS5S4S5H10C10S8CJH6DJD3D9C5CAHAC3C3S2CKH5D2S9D8D6SQS3H10HJC8HKSQC7C2H4D7H4H9SQHKC4C7SKD8S7D10DAD
END

use Test;
is @res.join("\n"), chomp $ref;
