#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Fusc_sequence
#c# 2019-02-22 <RC, 2020-07-19 >RC, 2021-03-15 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# OEIS:A002487 a(2*n) = a(n), a(2*n+1) = a(n) + a(n+1) (aka Stern's diatomic series)
#n# cf 'S/Stern-Brocot_sequence' (same, but drops leading zero value)

my @res;

my @Fusc = 0, 1, 1, { |(@Fusc[$_ - 1] + @Fusc[$_], @Fusc[$_]) given ++$+1 } ... *;

# these work, but much slower
#@Fusc = 0, 1, 1, { |(@_[$_ - 1] + @_[$_], @_[$_]) given ++$+1 } ... *;
#constant @Fusc = 0, 1, 1, { |(@_[$_ - 1] + @_[$_], @_[$_]) given ++$+1 } ... *;

sub comma { $^i.flip.comb(3).join(',').flip }

@res.push: "First 61 terms of the Fusc sequence:\n{@Fusc[^61]}" ~
    "\n\nIndex and value for first term longer than any previous:";

for flat 'Index', 'Value', 0, 0, (1..4).map({
    my $l = 10**$_;
    @Fusc.first(* > $l, :kv).map: &comma
  }) -> $i, $v {
      @res.push: sprintf "%15s : %s", $i, $v
}

.say for @res;

my $ref = q:to/END/;
First 61 terms of the Fusc sequence:
0 1 1 2 1 3 2 3 1 4 3 5 2 5 3 4 1 5 4 7 3 8 5 7 2 7 5 8 3 7 4 5 1 6 5 9 4 11 7 10 3 11 8 13 5 12 7 9 2 9 7 12 5 13 8 11 3 10 7 11 4

Index and value for first term longer than any previous:
          Index : Value
              0 : 0
             37 : 11
          1,173 : 108
         35,499 : 1,076
        699,051 : 10,946
END

use Test;
is @res.join("\n"), chomp $ref;
