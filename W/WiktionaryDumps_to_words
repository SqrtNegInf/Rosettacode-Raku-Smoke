#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/WiktionaryDumps_to_words
#c# 2021-12-09 <RC
#m# MOAR: BROKEN
#j# JVM:  BROKEN
#n# stalls, don't know why (SSL library issues?)

my @res;

use LWP::Simple;
use Compress::Bzip2;
use IO::Socket::SSL;

my $LanguageMark = "==French==";
my $Target       = 5; # words
my $URL          = 'https://dumps.wikimedia.org/enwiktionary/latest/enwiktionary-latest-pages-articles.xml.bz2';

class CustomLWP is LWP::Simple { has $.URL ;

   method CustomRequest {

      my      %needles;
      my Blob $resp = Buf.new;
      my      $bzip = Compress::Bzip2::Stream.new;

      my ($host, $port, $path) = self.parse_url($.URL)[1..3]; 
      my $sock = IO::Socket::SSL.new: :$host, :$port;

      $sock.print( "GET {$path} HTTP/1.1\r\n" ~ self.stringify_headers( { 
         'Connection'  => 'close', 
         'User-Agent'  => "LWP::Simple/{LWP::Simple::<$VERSION>} " ~
                          "Raku/{$*RAKU.compiler.gist}",
         'Host'        => $host
      } ) ~ "\r\n" ) or die ;       # request string

      while !self.got-header($resp) { $resp ~= $sock.read(2048) }

      my $bzip-stream = supply {
         emit self.parse_response($resp)[2]; # $resp_content @ parent class 
         loop { 
            done if %needles.elems > $Target ;
            ( my $chunk = $sock.read(4096) ) ?? emit $chunk !! done 
         }
      } 

      react {
         whenever $bzip-stream -> $crypt {
            my $plain = ( [~] $bzip.decompress: $crypt ).decode('utf8-c8');
            my @haystacks = $plain.split: $LanguageMark;
            race for @haystacks[ 1..*-1 ] { # avoid incomplete fragments 
               %needles{$0}++ if / .* '<title>' (\w+?) '</title>' /
            }
         }
      }

      return %needles.keys[^$Target]
   }
}

my $ua = CustomLWP.new: URL => $URL ;

$ua.CustomRequest>>.say;

exit;

.say for @res;
my $ref = q:to/END/;
END

use Test;
#is @res.join("\n"), chomp $ref;
