#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Word_search
#c# 2020-02-07 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2023-01-29 replace call to built-in 'rand' for output stability (limit dictionary, smaller words, for speed)
my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub pick-all (@a is copy) is export {
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

my $rows = 10;
my $cols = 10;

my $message = q:to/END/;                                                 # q:  vim kludge
    .....R....
    ......O...
    .......S..
    ........E.
    T........T
    .A........
    ..C.......
    ...O......
    ....D.....
    .....E....
    END

my %dir =
    '→' => (1,0),
    '↘' => (1,1),
    '↓' => (0,1),
    '↙' => (-1,1),
    '←' => (-1,0),
    '↖' => (-1,-1),
    '↑' => (0,-1),
    '↗' => (1,-1)
;

my @ws = $message.comb(/<print>/);

my $path = './ref/unixdict.txt';

my @words = $path.IO.slurp.words.grep( { $_ !~~ /<-[a..z]>/ and 2 < .chars < 8 } ).&pick-all;
my %index;
my %used;

while @ws.first( * eq '.') {

    # find an unfilled cell
    #my $i = @ws.grep( * eq '.', :k ).pick;
    my @foo = @ws.grep( * eq '.', :k );
    my $i = @foo[@foo.elems×$rng.next-rat];

    # translate the index to x / y coordinates
    my ($x, $y) = $i % $cols, floor($i / $rows);

    # find a word that fits
    my $word = find($x, $y);

    # Meh, reached an impasse, easier to just throw it all
    # away and start over rather than trying to backtrack.
    restart, next unless $word;

    %used{"$word"}++;

    # Keeps trying to place an already used word, choices
    # must be limited, start over
    restart, next if %used{$word} > 15;

    # Already used this word, try again
    next if %index{$word.key};

    # Add word to used word index
    %index ,= $word;

    # place the word into the grid
    place($x, $y, $word);

}

display();

sub display {
    @res.push: flat "    ", 'ABCDEFGHIJ'.comb;
    @res.push: $_ for (^10).map: { ($_).fmt("  %2d"), @ws[$_ × $cols .. ($_ + 1) × $cols - 1] }
    @res.push: "\n  Words used:";
    my $max = 1 + %index.keys.max( *.chars ).chars;
    for %index.sort {
        @res.push: sprintf "%{$max}s %4s %s  ", .key, .value.key, .value.value;
        #print "\n" if $++ % 2;
    }
    @res.push: "\n"
}

sub restart {
    @ws = $message.comb(/<print>/);
    %index = ();
    %used = ();
}

sub place ($x is copy, $y is copy, $w) {
    my @word = $w.key.comb;
    my $dir  = %dir{$w.value.value};
    @ws[$y × $rows + $x] = @word.shift;
    while @word {
        ($x, $y) »+=« $dir;
        @ws[$y × $rows + $x] = @word.shift;
    }
 }

sub find ($x, $y) {
    my @trials = %dir.keys.sort.map: -> $dir { # DH this sort is used just to get stable results for testing
            my $space = '.';
            my ($c, $r) = $x, $y;
            loop {
                ($c, $r) »+=« %dir{$dir};
                last if 9 < $r|$c;
                last if 0 > $r|$c;
                my $l = @ws[$r × $rows + $c];
                last if $l ~~ /<:Lu>/;
                $space ~= $l;
            }
            next if $space.chars < 3;
            [$space.trans( '.' => ' ' ),
            ("{'ABCDEFGHIJ'.comb[$x]} {$y}" => $dir)]
        };

#   for @words.pick(*) -> $word {
    for @words.&pick-all -> $word { # this is very slow
        for @trials -> $space {
            next if $word.chars > $space[0].chars;
            return ($word => $space[1]) if compare($space[0].comb, $word.comb)
        }
    }
}

sub compare (@s, @w) {
    for ^@w {
        next if @s[$_] eq ' ';
        return False if @s[$_] ne @w[$_]
    }
    True
}

.put for @res;

my $ref = q:to/END/;
     A B C D E F G H I J
   0 a n n a f R n a b w
   1 g a r d e f O j o e
   2 d r a f t e e S n i
   3 t t r i t e l e E t
   4 T s l a e p e z e T
   5 i A i n a h t a o s
   6 t w C f s t w f l p
   7 o e t O a o g i l d
   8 r l s e D m d a g p
   9 e d p u v E t i l s

  Words used:
     alp  H 8 ↗  
     ann  D 0 ←  
    anna  A 0 →  
 draftee  A 2 →  
    drag  D 1 ←  
     eel  E 1 ↘  
     fan  E 0 ←  
    faze  H 6 ↑  
     fed  F 1 ←  
    fist  D 6 ↖  
    gild  G 7 →  
     ito  A 5 ↓  
     joe  H 1 →  
    moth  F 8 ↑  
     nab  G 0 →  
     nob  I 2 ↑  
    oath  I 5 ←  
     pdp  J 8 ↑  
    peal  F 4 ←  
    peat  C 9 ↗  
     set  C 8 ↖  
   sheen  E 6 ↗  
    slid  J 5 ↙  
    slit  J 9 ←  
     tea  J 3 ↙  
    than  G 5 ←  
    tore  A 6 ↓  
   trite  B 3 →  
     use  D 9 ↖  
     vet  E 9 ↖  
     wei  J 0 ↓  
    weld  B 6 ↓  
     wig  G 6 ↘  


END

use Test;
is @res.join("\n"), chomp $ref;
