#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Word_search
#c# 2020-02-07 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch

srand 123456;

my @res;

my $rows = 10;
my $cols = 10;

my $message = q:to/END/;
    .....R....
    ......O...
    .......S..
    ........E.
    T........T
    .A........
    ..C.......
    ...O......
    ....D.....
    .....E....
    END

my %dir =
    '→' => (1,0),
    '↘' => (1,1),
    '↓' => (0,1),
    '↙' => (-1,1),
    '←' => (-1,0),
    '↖' => (-1,-1),
    '↑' => (0,-1),
    '↗' => (1,-1)
;

my @ws = $message.comb(/<print>/);

my $path = './ref/unixdict.txt'; # or wherever

my @words = $path.IO.slurp.words.grep( { $_ !~~ /<-[a..z]>/ and 2 < .chars < 11 } ).pick(*);
my %index;
my %used;

while @ws.first( * eq '.') {

    # find an unfilled cell
    my $i = @ws.grep( * eq '.', :k ).pick;

    # translate the index to x / y coordinates
    my ($x, $y) = $i % $cols, floor($i / $rows);

    # find a word that fits
    my $word = find($x, $y);

    # Meh, reached an impasse, easier to just throw it all
    # away and start over rather than trying to backtrack.
    restart, next unless $word;

    %used{"$word"}++;

    # Keeps trying to place an already used word, choices
    # must be limited, start over
    restart, next if %used{$word} > 15;

    # Already used this word, try again
    next if %index{$word.key};

    # Add word to used word index
    %index ,= $word;

    # place the word into the grid
    place($x, $y, $word);

}

display();

sub display {
    @res.push: flat "    ", 'ABCDEFGHIJ'.comb;
    @res.push: $_ for (^10).map: { ($_).fmt("  %2d"), @ws[$_ × $cols .. ($_ + 1) × $cols - 1] }
    @res.push: "\n  Words used:";
    my $max = 1 + %index.keys.max( *.chars ).chars;
    for %index.sort {
        @res.push: sprintf "%{$max}s %4s %s  ", .key, .value.key, .value.value;
        #print "\n" if $++ % 2;
    }
    @res.push: "\n"
}

sub restart {
    @ws = $message.comb(/<print>/);
    %index = ();
    %used = ();
}

sub place ($x is copy, $y is copy, $w) {
    my @word = $w.key.comb;
    my $dir  = %dir{$w.value.value};
    @ws[$y × $rows + $x] = @word.shift;
    while @word {
        ($x, $y) »+=« $dir;
        @ws[$y × $rows + $x] = @word.shift;
    }
 }

sub find ($x, $y) {
    my @trials = %dir.keys.sort.map: -> $dir { # DH this sort is used just to get stable results for testing
            my $space = '.';
            my ($c, $r) = $x, $y;
            loop {
                ($c, $r) »+=« %dir{$dir};
                last if 9 < $r|$c;
                last if 0 > $r|$c;
                my $l = @ws[$r × $rows + $c];
                last if $l ~~ /<:Lu>/;
                $space ~= $l;
            }
            next if $space.chars < 3;
            [$space.trans( '.' => ' ' ),
            ("{'ABCDEFGHIJ'.comb[$x]} {$y}" => $dir)]
        };

    for @words.pick(*) -> $word {
        for @trials -> $space {
            next if $word.chars > $space[0].chars;
            return ($word => $space[1]) if compare($space[0].comb, $word.comb)
        }
    }
}

sub compare (@s, @w) {
    for ^@w {
        next if @s[$_] eq ' ';
        return False if @s[$_] ne @w[$_]
    }
    True
}

.put for @res;

my $moar-terminal = q:to/END/;
     A B C D E F G H I J
   0 e i r e y R w o w n
   1 e y e a v e O h o b
   2 b u l c t e l S o m
   3 d u g s h k p l E m
   4 T s s e o n t a a T
   5 n A p u r a w e b m
   6 e i C a n y c r n u
   7 c a a O y k t a o o
   8 i u s r D y r d j n
   9 q k u g b E l t d g

  Words used:
  alley  I 4 ↖  
    ape  H 4 ↖  
    auk  B 7 ↓  
    ave  D 1 →  
   bolt  J 1 ↙  
  brain  E 9 ↖  
   club  D 2 ←  
    dry  H 8 ←  
    dug  A 3 →  
   epic  D 4 ↙  
   erie  D 0 ←  
    eye  A 1 →  
    gsa  D 9 ↖  
    ice  A 8 ↑  
    jon  I 8 ↑  
    ltd  G 9 →  
    moo  J 2 ↖  
  muong  J 5 ↓  
    nrc  I 6 ←  
    own  H 0 →  
    qua  A 9 ↗  
   spay  B 4 ↘  
   stew  D 3 ↗  
   sunk  C 4 ↘  
    tao  G 7 →  
 thorny  E 2 ↓  
    usa  C 9 ↑  
    web  G 5 →  
   whom  G 0 ↘  
 yankee  F 6 ↑  


END

my $moar-cronjob = q:to/END/;
     A B C D E F G H I J
   0 e e w o n R i n g w
   1 s e t r p r O l i o
   2 p n u t a t e S r h
   3 w b n q z b k c E c
   4 T i d w y e r i n T
   5 d A r s g o t a n i
   6 i t C e m i t r a w
   7 d t l O o o c b n f
   8 l a o c D t n e h g
   9 a n d p e E t h e n

  Words used:
     bel  F 3 ↗  
    burn  B 3 ↗  
    chow  J 3 ↑  
    coal  D 8 ←  
     coo  G 7 ←  
     did  A 7 ↑  
     dna  C 9 ←  
   dwyer  C 4 →  
     etc  E 9 ↗  
     faa  J 7 ↖  
   ghent  J 8 ←  
 hebraic  H 9 ↑  
     inc  J 5 ↖  
    iraq  G 0 ↙  
     keg  G 3 ↙  
     ltd  C 7 ←  
     nan  I 5 ↓  
     nih  H 0 ↘  
     nut  C 3 ↑  
  nutate  B 2 →  
     opt  D 0 ↘  
     pew  A 2 ↗  
     pot  D 9 ↖  
     rig  I 2 ↑  
     set  A 1 →  
    then  G 9 →  
    togs  G 5 ←  
     trw  B 6 ↗  
 wartime  J 6 ←  
     wee  C 0 ←  
    wire  A 3 ↘  
     zap  E 3 ↑  


END

my $jvm = q:to/END/;
     A B C D E F G H I J
   0 y s h e a R a n o v
   1 a e h r b s O p i y
   2 d n r s e u e S c l
   3 g e k b i m t k E e
   4 T y c l u n a r y T
   5 i A p i e a i r c l
   6 a h C d r a m m k n
   7 a g p O b e e v i z
   8 a e s u D y l a o d
   9 m l e h c E v c p f

  Words used:
      aaa  A 6 ↓  
    ankle  A 1 ↘  
   aubrey  F 5 ↖  
      bee  E 7 →  
   cleric  H 9 ↖  
      cpa  I 2 ↖  
      crt  I 5 ↖  
      cup  E 9 ↖  
      day  A 2 ↑  
 diminish  J 8 ↖  
     dram  D 6 →  
      ely  J 3 ↑  
      fpc  J 9 ←  
      gel  B 7 ↓  
      gyp  A 3 ↘  
     helm  D 9 ←  
   lunary  D 4 →  
    lykes  J 5 ↖  
      nov  H 0 →  
      phi  C 7 ↖  
      poi  I 9 ↑  
   remark  D 1 ↘  
      sea  C 8 ←  
     shea  B 0 →  
     tube  G 3 ↖  
     vain  G 9 ↗  
      viz  H 7 →  
      yea  F 8 ↑  
      yen  B 4 ↑  
      yip  J 1 ←  


END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
