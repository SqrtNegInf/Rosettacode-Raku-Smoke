#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Word_search
#c# 2020-02-07 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2023-01-01 half-replace call to built-in 'rand' for output stability, see how it goes
#n#            also need to split Mac-Pro/iMac results (NB: results here are just for cronjob, not interactive)

my @res;

srand 123456;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub pick-all (@a is copy) is export {
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

my $rows = 10;
my $cols = 10;

my $message = q:to/END/;                                                 # q:  vim kludge
    .....R....
    ......O...
    .......S..
    ........E.
    T........T
    .A........
    ..C.......
    ...O......
    ....D.....
    .....E....
    END

my %dir =
    '→' => (1,0),
    '↘' => (1,1),
    '↓' => (0,1),
    '↙' => (-1,1),
    '←' => (-1,0),
    '↖' => (-1,-1),
    '↑' => (0,-1),
    '↗' => (1,-1)
;

my @ws = $message.comb(/<print>/);

my $path = './ref/unixdict.txt';

my @words = $path.IO.slurp.words.grep( { $_ !~~ /<-[a..z]>/ and 2 < .chars < 11 } ).&pick-all;
my %index;
my %used;

while @ws.first( * eq '.') {

    # find an unfilled cell
    #my $i = @ws.grep( * eq '.', :k ).pick;
    my @foo = @ws.grep( * eq '.', :k );
    my $i = @foo[@foo.elems×$rng.next-rat];

    # translate the index to x / y coordinates
    my ($x, $y) = $i % $cols, floor($i / $rows);

    # find a word that fits
    my $word = find($x, $y);

    # Meh, reached an impasse, easier to just throw it all
    # away and start over rather than trying to backtrack.
    restart, next unless $word;

    %used{"$word"}++;

    # Keeps trying to place an already used word, choices
    # must be limited, start over
    restart, next if %used{$word} > 15;

    # Already used this word, try again
    next if %index{$word.key};

    # Add word to used word index
    %index ,= $word;

    # place the word into the grid
    place($x, $y, $word);

}

display();

sub display {
    @res.push: flat "    ", 'ABCDEFGHIJ'.comb;
    @res.push: $_ for (^10).map: { ($_).fmt("  %2d"), @ws[$_ × $cols .. ($_ + 1) × $cols - 1] }
    @res.push: "\n  Words used:";
    my $max = 1 + %index.keys.max( *.chars ).chars;
    for %index.sort {
        @res.push: sprintf "%{$max}s %4s %s  ", .key, .value.key, .value.value;
        #print "\n" if $++ % 2;
    }
    @res.push: "\n"
}

sub restart {
    @ws = $message.comb(/<print>/);
    %index = ();
    %used = ();
}

sub place ($x is copy, $y is copy, $w) {
    my @word = $w.key.comb;
    my $dir  = %dir{$w.value.value};
    @ws[$y × $rows + $x] = @word.shift;
    while @word {
        ($x, $y) »+=« $dir;
        @ws[$y × $rows + $x] = @word.shift;
    }
 }

sub find ($x, $y) {
    my @trials = %dir.keys.sort.map: -> $dir { # DH this sort is used just to get stable results for testing
            my $space = '.';
            my ($c, $r) = $x, $y;
            loop {
                ($c, $r) »+=« %dir{$dir};
                last if 9 < $r|$c;
                last if 0 > $r|$c;
                my $l = @ws[$r × $rows + $c];
                last if $l ~~ /<:Lu>/;
                $space ~= $l;
            }
            next if $space.chars < 3;
            [$space.trans( '.' => ' ' ),
            ("{'ABCDEFGHIJ'.comb[$x]} {$y}" => $dir)]
        };

#   for @words.&pick-all -> $word { # this is very slow
    for @words.pick(*) -> $word {
        for @trials -> $space {
            next if $word.chars > $space[0].chars;
            return ($word => $space[1]) if compare($space[0].comb, $word.comb)
        }
    }
}

sub compare (@s, @w) {
    for ^@w {
        next if @s[$_] eq ' ';
        return False if @s[$_] ne @w[$_]
    }
    True
}

.put for @res;

my $mac-pro = q:to/END/;
     A B C D E F G H I J
   0 g t d y r R k o l d
   1 n e i e e e O t w f
   2 a e e u g a v S i t
   3 g f d s i m a e E c
   4 T n u a n a n l p T
   5 k A b m a n a y m m
   6 o s C s l i j k o t
   7 p a e O d t o p p s
   8 e w a d D a r f d a
   9 l l o m g E t o r t

  Words used:
  amanita  F 2 ↓  
      ami  G 3 ←  
      ana  D 4 →  
     astm  J 8 ↑  
      awe  C 8 ←  
      awl  B 7 ↓  
      bud  C 5 ↑  
     desk  D 8 ↖  
     died  C 0 ↓  
      eve  F 1 ↘  
      fda  H 8 →  
     feet  B 3 ↑  
      ftc  J 1 ↓  
     gang  A 3 ↑  
      gao  E 9 ↗  
      keg  G 0 ↙  
     kyle  H 6 ↑  
      man  D 5 →  
     moll  D 9 ←  
      nbs  B 4 ↘  
      old  H 0 →  
     opel  A 6 ↓  
     pomp  I 7 ↑  
      pot  H 7 ←  
 reginald  E 0 ↓  
      rot  I 9 ←  
     suey  D 3 ↑  
      tic  H 1 ↘  
   trojan  G 9 ↑  
     trot  J 9 ←  
      two  J 2 ↖  


END

my $imac = q:to/END/;
     A B C D E F G H I J
   0 t w f b o R r w o k
   1 w h e a f o O a l a
   2 a s i i r m b S g l
   3 p a r n a r i r E f
   4 T d g i j i m o g T
   5 k A p t w f p c u p
   6 c g C e h n o k j l
   7 e w d O o i s s o t
   8 p e r d D u e k a w
   9 y n o b r E i x a m

  Words used:
     ala  H 1 →  
 bainite  D 0 ↓  
    bony  D 9 ←  
     boo  G 2 ↖  
    dash  B 4 ↑  
     dew  C 7 ↗  
     don  D 8 ↗  
     fir  E 1 ↙  
    flak  J 3 ↑  
     gar  I 2 ↖  
   grief  C 4 ↑  
    gwen  B 6 ↓  
  impose  G 3 ↓  
  infirm  F 7 ↑  
     jar  E 4 ↑  
     jug  I 6 ↑  
    loki  J 6 ↙  
     max  J 9 ←  
     pdp  C 5 ↖  
    peck  A 8 ↑  
     puc  J 5 ←  
     rep  C 8 ←  
    rock  H 3 ↓  
    rusk  E 9 ↗  
    toss  J 7 ←  
     twa  A 0 ↓  
    wake  J 8 ←  
     wei  B 0 ↘  
     who  E 5 ↓  
     wok  H 0 →  


END

use Test;
is @res.join("\n"), chomp qx/uname -a/ ~~ /'Mac-Pro'/ ?? $mac-pro !! $imac;
