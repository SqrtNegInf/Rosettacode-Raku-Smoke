#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Wireworld
#c# 2018-02-15 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# with JVM 2021.12, now works

class Wireworld {
    has @.line;
    method height () { @!line.elems }
    has int $.width;

    multi method new(@line) { samewith :@line, :width(max @line».chars) }
    multi method new($str ) { samewith $str.lines }

    method gist { join "\n", @.line }

    method !neighbors($i where ^$.height, $j where ^$.width)
    {
        my @i = grep ^$.height, $i «+« (-1, 0, 1);
        my @j = grep ^$.width,  $j «+« (-1, 0, 1);
        gather for @i X @j -> (\i, \j) {
            next if [ i, j ] ~~ [ $i, $j ];
            take @!line[i].comb[j];
        }
    }
    method succ {
        my @succ;
        for ^$.height X ^$.width -> ($i, $j) {
            @succ[$i] ~= 
            do given @!line[$i].comb[$j] {
                when 'H' { 't' }
                when 't' { '.' }
                when '.' {
                    grep('H', self!neighbors($i, $j)) == 1|2 ?? 'H' !! '.'
                }
                default { ' ' }
            }
        }
        return self.new: @succ;
    }
}

# my %*SUB-MAIN-OPTS = :named-anywhere;

# alternate method, but must be done in two statements, else: "Shaped variable declarations not yet implemented."
my %*SUB-MAIN-OPTS;
%*SUB-MAIN-OPTS<named-anywhere> = True; 

multi sub MAIN (
    IO()      $filename,
    Numeric:D :$interval = 1/4,
    Bool      :$stop-on-repeat,
) {
    run-loop :$interval, :$stop-on-repeat, Wireworld.new: $filename.slurp;
}

#| run a built-in example
multi sub MAIN (
    Numeric:D :$interval = 0/4, # DH change - tweak for speed
    Bool      :$stop-on-repeat = True, # DH change - tweak to terminate
) {
    run-loop :$interval, :$stop-on-repeat, Wireworld.new: Q:to/END/
    tH.........
    .   .
       ...
    .   .
    Ht.. ......
    END

}


sub run-loop (
    Wireworld:D     $initial, 
    Real:D(Numeric) :$interval = 1/4, 
    Bool            :$stop-on-repeat
){
    my %seen is SetHash; # DH works fine with normal hash

my @res = gather {
    take '#' x $initial.width;
    for $initial ...^ * eqv * { # generate a sequence (uses .succ)
        take .gist;
        take '#' x .width;

        if $stop-on-repeat {
            last if %seen{ .gist }++;
        }

        sleep $interval;
    }
}
.say for @res;

#When run with --stop-on-repeat

my $ref = qq:to/END/;
###########
tH.........
.   .
   ...
.   .
Ht.. ......
###########
.tH........
H   .      
   ...     
H   .      
t... ......
###########
H.tH.......
t   .      
   ...     
t   .      
.H.. ......
###########
tH.tH......
.   H      
   ...     
.   .      
HtH. ......
###########
.tH.tH.....
H   t      
   HHH     
H   .      
t.tH ......
###########
H.tH.tH....
t   .      
   ttt     
t   .      
.H.t ......
###########
tH.tH.tH...
.   H      
   ...     
.   .      
HtH. ......
###########
.tH.tH.tH..
H   t      
   HHH     
H   .      
t.tH ......
###########
H.tH.tH.tH.
t   .      
   ttt     
t   .      
.H.t ......
###########
tH.tH.tH.tH
.   H      
   ...     
.   .      
HtH. ......
###########
.tH.tH.tH.t
H   t      
   HHH     
H   .      
t.tH ......
###########
H.tH.tH.tH.
t   .      
   ttt     
t   .      
.H.t ......
###########
END

use Test;
is @res.join("\n"), chomp $ref;
}
