#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/24_game/Solve
#c# 2016-05-10 <RC, 2018-11-03 >RC
#m# MOAR: OK
#j#  JVM: BROKEN

#A loose translation of the Perl entry. Does not return every possible permutation of the possible solutions. Filters out duplicates (from repeated digits) and only reports the solution for a particular order of digits and operators with the fewest parenthesis (avoids reporting duplicate solutions only differing by unnecessary parenthesis). Does not guarantee the order in which results are returned.
#Since Raku uses Rational numbers for division (whenever possible) there is no loss of precision as is common with floating point division. So a comparison like  (1 + 7) / (1 / 3) == 24 "Just Works"&#8482;

# Get $amount digits from the user,
# ask for more if they don't supply enough
#while @digits.elems < $amount {
#    @digits.append: (prompt "Enter {$amount - @digits} digits from 1 to 9, "
#    ~ '(repeats allowed): ').comb(/<[1..9]>/);
#}

sub brute-force(@input) {
# Throw away any extras
my $amount = 4;
my @digits = @input[^$amount];

# Generate combinations of operators
my @ops = [X,] <+ - × /> xx 3;

# Enough sprintf formats to cover most precedence orderings
my @formats = (
    '%d %s %d %s %d %s %d',
    '(%d %s %d) %s %d %s %d',
    '(%d %s %d %s %d) %s %d',
    '((%d %s %d) %s %d) %s %d',
    '(%d %s %d) %s (%d %s %d)',
    '%d %s (%d %s %d %s %d)',
    '%d %s (%d %s (%d %s %d))',
);

# Brute force test the different permutations
my @perms;
#for unique @digits.permutations -> @p {
(unique @digits.permutations).race.map: -> @p {
    for @ops -> @o {
        for @formats -> $format {
            my $string = sprintf $format, flat roundrobin(|@p; |@o);
            my $result = $string.EVAL;
            @perms.push: "$string = 24" and last if $result and $result == 24;
        }
    }
}
return @perms;
}

# Only return unique sub-arrays
sub unique (@array) {
    my %h = map { $_.Str => $_ }, @array;
    %h.values;
}

my $ref = qq:to/END/;
(1 + 1 × 7) × 3 = 24
(1 + 3) × (7 - 1) = 24
(1 + 7) / (1 / 3) = 24
(1 + 7) / 1 × 3 = 24
(1 + 7) × 1 × 3 = 24
(1 + 7) × 3 / 1 = 24
(1 + 7) × 3 × 1 = 24
(1 / 1 + 7) × 3 = 24
(1 × 1 + 7) × 3 = 24
(1 × 3) × (1 + 7) = 24
(1 × 3) × (7 + 1) = 24
(1 × 7 + 1) × 3 = 24
(3 + 1) × (7 - 1) = 24
(3 / 1) × (1 + 7) = 24
(3 / 1) × (7 + 1) = 24
(3 × 1) × (1 + 7) = 24
(3 × 1) × (7 + 1) = 24
(7 + 1) / (1 / 3) = 24
(7 + 1) / 1 × 3 = 24
(7 + 1) × 1 × 3 = 24
(7 + 1) × 3 / 1 = 24
(7 + 1) × 3 × 1 = 24
(7 - 1) × (1 + 3) = 24
(7 - 1) × (3 + 1) = 24
(7 / 1 + 1) × 3 = 24
(7 × 1 + 1) × 3 = 24
3 / (1 / (1 + 7)) = 24
3 / (1 / (7 + 1)) = 24
3 × (1 + 1 × 7) = 24
3 × (1 + 7 / 1) = 24
3 × (1 + 7 × 1) = 24
3 × (1 / 1 + 7) = 24
3 × (7 + 1 / 1) = 24
3 × (7 + 1 × 1) = 24
3 × (7 / 1 + 1) = 24
3 × (7 × 1 + 1) = 24
END

use Test;
plan 3;
is brute-force(<5 5 5 5>), '5 × 5 - 5 / 5 = 24', '5 × 5 - 5 / 5 = 24';
is brute-force(<8 8 3 3>), '8 / (3 - 8 / 3) = 24', '8 / (3 - 8 / 3) = 24';
my @res = sort brute-force(<3 7 1 1>);
.say for @res;
is @res.join("\n"), chomp $ref;
