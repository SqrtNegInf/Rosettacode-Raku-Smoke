#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/100_prisoners
#c# 2019-11-05 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# don't use .race, otherwise testing is only approximate
#n# 2021-10-xx cronjob and terminal results the same now?
#n# 2022-09-22 cron and terminal results no longer the same

my @res;

srand 123456;

# use either MAIN or static values
#unit sub MAIN (:$prisoners = 100, :$simulations = 10000);
my $prisoners   =    100;
my $simulations = 10_000;

my @prisoners = ^$prisoners;
my $half = floor +@prisoners / 2;
@res.push: " Simulation count: $simulations";
@res.push: sprintf " Random play wins: %.3f%% of simulations", random $simulations;
@res.push: sprintf "Optimal play wins: %.3f%% of simulations", optimal $simulations;

@prisoners = ^10;
$half = floor +@prisoners / 2;
my $n = 100_000;
@res.push: " Simulation count: $n";
@res.push: sprintf " Random play wins: %.3f%% of simulations", random $n;
@res.push: sprintf "Optimal play wins: %.3f%% of simulations", optimal $n;

sub random ($n) {
    #^$n .race.map( {
    ^$n .map( {
        my @drawers = @prisoners.pick: *;
        @prisoners.map( -> $prisoner {
            my $found = 0;
            for @drawers.pick($half) -> $card {
                $found = 1 and last if $card == $prisoner
            }
            last unless $found;
            $found
        }
        ).sum == @prisoners
    }
    ).grep( *.so ).elems / $n × 100
}

sub optimal ($n) {
    #^$n .race.map( {
    ^$n .map( {
        my @drawers = @prisoners.pick: *;
        @prisoners.map( -> $prisoner {
            my $found = 0;
            my $card = @drawers[$prisoner];
            if $card == $prisoner {
                $found = 1
            } else {
                for ^($half-1) {
                    $card = @drawers[$card];
                    $found = 1 and last if $card == $prisoner
                }
            }
            last unless $found;
            $found
        }
        ).sum == @prisoners
    } ).grep( *.so ).elems / $n × 100
}

.say for @res;

# results without 'MAIN'
my $moar-cronjob = q:to/END/;
 Simulation count: 10000
 Random play wins: 0.000% of simulations
Optimal play wins: 31.200% of simulations
 Simulation count: 100000
 Random play wins: 0.103% of simulations
Optimal play wins: 35.387% of simulations
END

my $moar-terminal = q:to/END/;
 Simulation count: 10000
 Random play wins: 0.000% of simulations
Optimal play wins: 31.120% of simulations
 Simulation count: 100000
 Random play wins: 0.103% of simulations
Optimal play wins: 35.546% of simulations
END

# results with 'MAIN'
#`{
$moar-terminal = q:to/END/;
 Simulation count: 10000
 Random play wins: 0.000% of simulations
Optimal play wins: 31.370% of simulations
 Simulation count: 100000
 Random play wins: 0.103% of simulations
Optimal play wins: 35.322% of simulations
END
}

my $jvm = q:to/END/;
 Simulation count: 10000
 Random play wins: 0.000% of simulations
Optimal play wins: 30.790% of simulations
 Simulation count: 100000
 Random play wins: 0.091% of simulations
Optimal play wins: 35.598% of simulations
END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
