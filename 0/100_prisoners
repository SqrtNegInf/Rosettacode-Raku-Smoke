#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/100_prisoners
#c# 2019-11-05 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# don't use .race, otherwise testing is only approximate (update to myRNG/shuffle also makes this slower)
#n# 2022-11-02 replace call to built-in 'rand' for output stability

my @res;

use lib 'lib';
use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub shuffle (@a is copy) {
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

#unit sub MAIN (:$prisoners = 100, :$simulations = 10000);
my $prisoners   =   100;
my $simulations = 1_000;

my @prisoners = ^$prisoners;
my $half = floor +@prisoners / 2;
@res.push: " Simulation count: $simulations";
@res.push: sprintf " Random play wins: %.3f%% of simulations", random $simulations;
@res.push: sprintf "Optimal play wins: %.3f%% of simulations", optimal $simulations;

@prisoners = ^10;
$half = floor +@prisoners / 2;
my $n = 1_000;
@res.push: " Simulation count: $n";
@res.push: sprintf " Random play wins: %.3f%% of simulations", random $n;
@res.push: sprintf "Optimal play wins: %.3f%% of simulations", optimal $n;

sub random ($n) {
   #^$n .race.map( {
    ^$n .map( {
        my @drawers = shuffle @prisoners;
        @prisoners.map( -> $prisoner {
            my $found = 0;
            for shuffle(@drawers).head($half) -> $card {
                $found = 1 and last if $card == $prisoner
            }
            last unless $found;
            $found
        }
        ).sum == @prisoners
    }
    ).grep( *.so ).elems / $n × 100
}

sub optimal ($n) {
   #^$n .race.map( {
    ^$n .map( {
        my @drawers = shuffle @prisoners;
        @prisoners.map( -> $prisoner {
            my $found = 0;
            my $card = @drawers[$prisoner];
            if $card == $prisoner {
                $found = 1
            } else {
                for ^($half-1) {
                    $card = @drawers[$card];
                    $found = 1 and last if $card == $prisoner
                }
            }
            last unless $found;
            $found
        }
        ).sum == @prisoners
    } ).grep( *.so ).elems / $n × 100
}

.say for @res;

my $ref = qq:to/END/;
 Simulation count: 1000
 Random play wins: 0.000% of simulations
Optimal play wins: 30.900% of simulations
 Simulation count: 1000
 Random play wins: 0.200% of simulations
Optimal play wins: 33.400% of simulations
END

use Test;
is @res.join("\n"), chomp $ref;
