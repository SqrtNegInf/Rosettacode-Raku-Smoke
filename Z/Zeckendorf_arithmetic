#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Zeckendorf_arithmetic
#c# 2018-03-20 <RC, 2019-04-04 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2023-05-31 cosmetic upgrade: '×' for '*' in the custom-defined operator
#n# 2019-04-04 fixed add/subtract/divide

my $z1 = '1'; # glyph to use for a '1'
my $z0 = '0'; # glyph to use for a '0'

sub zorder($a) { ($z0 lt $z1) ?? $a !! $a.trans([$z0, $z1] => [$z1, $z0]) }

######## Zeckendorf comparison operators #########

# less than
sub infix:<ltz>($a, $b) { $a.&zorder lt $b.&zorder }

# greater than
sub infix:<gtz>($a, $b) { $a.&zorder gt $b.&zorder }

# equal
sub infix:<eqz>($a, $b) { $a eq $b }

# not equal
sub infix:<nez>($a, $b) { $a ne $b }


######## Operators for Zeckendorf arithmetic ########

# post increment
sub postfix:<++z>($a is rw) {
    $a = ("$z0$z0"~$a).subst(/("$z0$z0")($z1+ %% $z0)?$/,
      -> $/ { "$z0$z1" ~ ($1 ?? $z0 x $1.chars !! '') });
    $a ~~ s/^$z0+//;
    $a
}

# post decrement
sub postfix:<--z>($a is rw) {
    $a .= subst(/$z1($z0*)$/,
      -> $/ {$z0 ~ "$z1$z0" x $0.chars div 2 ~ $z1 x $0.chars mod 2});
    $a ~~ s/^$z0+(.+)$/$0/;
    $a
}

# addition
sub infix:<+z>($a is copy, $b is copy) { $a++z; $a++z while $b--z nez $z0; $a }

# subtraction
sub infix:<-z>($a is copy, $b is copy) { $a--z; $a--z while $b--z nez $z0; $a }

# multiplication
sub infix:<×z>($a, $b) {
    return $z0 if $a eqz $z0 or $b eqz $z0;
    return $a if $b eqz $z1;
    return $b if $a eqz $z1;
    my $c = $a;
    my $d = $z1;
    repeat { 
         my $e = $z0;
         repeat { $c++z; $e++z } until $e eqz $a;
         $d++z;
    } until $d eqz $b;
    $c
}

# division  (really more of a div mod)
sub infix:</z>($a is copy, $b is copy) {
    fail "Divide by zero" if $b eqz $z0;
    return $a if $a eqz $z0 or $b eqz $z1;
    my $c = $z0;
    repeat {
        my $d = $b +z ($z1 ~ $z0);
        $c++z;
        $a++z;
        $a--z while $d--z nez $z0;
    } until $a ltz $b;
    $c ~= " remainder $a" if $a nez $z0;
    $c
}

###################### Testing ######################

# helper sub to translate constants into the particular glyphs you used
sub z($a) { $a.trans([<1 0>] => [$z1, $z0]) }

say "Using the glyph '$z1' for 1 and '$z0' for 0\n";

my $fmt = "%-22s = %15s  %s";

my $zeck = $z1;

my @res;
@res.push: sprintf( $fmt, "$zeck++z", $zeck++z, '# increment' ) for 1 .. 10;
@res.push: sprintf  $fmt, "$zeck +z {z('1010')}", $zeck +z= z('1010'),      '# addition';
@res.push: sprintf  $fmt, "$zeck -z {z('100')}", $zeck -z= z('100'),        '# subtraction';
@res.push: sprintf  $fmt, "$zeck ×z {z('100101')}", $zeck ×z= z('100101'),  '# multiplication';
@res.push: sprintf  $fmt, "$zeck /z {z('100')}", $zeck /z= z('100'),        '# division';
@res.push: sprintf( $fmt, "$zeck--z", $zeck--z, '# decrement' ) for 1 .. 5;
@res.push: sprintf  $fmt, "$zeck ×z {z('101001')}", $zeck ×z= z('101001'),  '# multiplication';
@res.push: sprintf  $fmt, "$zeck /z {z('100')}", $zeck /z= z('100'),        '# division';

.say for @res; 

my $ref = qq:to/END/;
1++z                   =              10  # increment
10++z                  =             100  # increment
100++z                 =             101  # increment
101++z                 =            1000  # increment
1000++z                =            1001  # increment
1001++z                =            1010  # increment
1010++z                =           10000  # increment
10000++z               =           10001  # increment
10001++z               =           10010  # increment
10010++z               =           10100  # increment
10100 +z 1010          =          101000  # addition
101000 -z 100          =          100010  # subtraction
100010 ×z 100101       =    100001000001  # multiplication
100001000001 /z 100    =       101010001  # division
101010001--z           =       101010000  # decrement
101010000--z           =       101001010  # decrement
101001010--z           =       101001001  # decrement
101001001--z           =       101001000  # decrement
101001000--z           =       101000101  # decrement
101000101 ×z 101001    = 101010000010101  # multiplication
101010000010101 /z 100 = 1001010001001 remainder 10  # division
END

use Test;
is @res.join("\n"), chomp $ref;
