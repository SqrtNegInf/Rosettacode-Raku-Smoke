#!/usr/bin/env raku
## dump AST of RC tasks
#  2019-04-13 static list, 2019-09-23 complete re-write, 2020-05-30 properly ID 
#  slow, lots of (ignorable) errors
#  NB: always run by-hand, catch any new tasks that must be skipped, as per: less -p2019-04-12 docs/Notes_to_self 
#  STDOUT: taks that use '*' where '×' is possible instead

# clear out files from last run
shell 'rm -f ast/*'; 

#my @runs-forever = split /\s*\n/, q:to/END/; # would then test with: $file.trim ∈ @hangs
# 'R[X=>]' works too, as does 'RX=>'; which is most clear / least confusing?
my %runs-forever = 1 R[X[=>]] split /\s*\n/, q:to/END/;
Bernoulli_numbers 
Catalan_numbers_Pascal%27s_triangle
Fibonacci_word
Fibonacci_word_fractal
Find_palindromic_numbers_in_both_binary_and_ternary_bases
Floyd%27s_triangle
Left_factorials
Left_factorials.jvm
Lucky_and_even_lucky_numbers
Ludic_numbers
Sequence_of_primorial_primes
END

# MultiVector (nee Clifford), Math::Matrix
#Fibonacci_matrix-exponentiation
my %module-conflict = 1 R[X[=>]] split /\s*\n/, q:to/END/;
Find_the_intersection_of_a_line_with_a_plane-1
Find_the_intersection_of_two_lines-1
Geometric_algebra
Multidimensional_Newton-Raphson_method
Multiple_regression
Orbital_elements
Polynomial_regression
END

for flat 0, 'A'..'Z' -> $dir {
    for run('find', $dir, :out).out.lines -> $path {
        next if 1 == $path.chars;
        my $file = $path.subst(/^.*\//, '');
       #my $file = ($path ~~ /'/' (.*) $$/)».Str;
       #my $file = $0 given $path ~~ /'/' (.*) $$/;
        next if %runs-forever{$file};
        next if %module-conflict{$file};
        next if $file ~~ /\. ( \d+ | jvm ) $/;
       #say "======> perl6 --target=AST $path > ast/$file"; # for debugging
        shell "/usr/local/bin/raku --target=AST $path > ast/$file; fgrep -l '&infix:<*>' ast/$file | cut -c5-";
    }
}
