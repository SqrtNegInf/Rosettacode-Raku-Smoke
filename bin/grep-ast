#!/usr/bin/env perl6
## grep AST of RC tasks (and/or source code)
#  2022-01-20
#   QAST generation less noisy, poke around a bit...
#  2020-02-02
#   another run at fleshing out the design document, only pre-alpha code yet... (not in this file)
#   make emphasis on the less common constructs, if too commmon just ignore
#   make a particular effort to highlight the obscure, the one-offs
#  2019-04-14
#   blue-sky goal: tie examples back to documentation
#   just a (very vague) concept at this point...

#`[[

== MOTIVATION

For some, the best way to learn a language is to see it 'in action', being used to solve problems
You can't just grep the code and reliably find the interesting bits
How to distinguish 'R' for reverse meta-op from a generic capital letter?
Then there are orthographic issues: » vs >>, … vs ... (plus: when is the latter pair just a ellipsis in a comment?)

== META

curated vs generic sections? (e.g. generic: Unicode/subroutine sections, curated: subroutines with Unicode names)
link matches to RC or github/smoke-test?
ignore: .0, .1, etc (and .jvm)
pull from RC, so 'testing' changes not involved?
cf. 'grep-raku' for issues related to Unicode

== IMPLEMENTATION

line-tagged version to tie AST statements/calls together?
#`{01} my @a = ^4;
#`{02} my @b = @a X** 2;
#`{03} say join ' ', @a;
# asdfka sdfals dfasd fasf asdf dsa
#`{04} say 'Cowabunga!';
#`{05} my @c = @a Z @b;
#`{06} say @c>>.sum;

always check for both:
Op(callmethod XYZ)
Op(call &XYZ)

74 lines of AST == no code

================ CODE TARGETS ================

== misc misc
Unicode - variable names, function names (and built-in vs custom for both)
program type: game/gui/interactive/image/number theory/OEIS-related
    based on my own '#t#' notation 
    + mooch off 'RC-run.p6'?
ecosystem: 
    'normal' P6  (zef install *)
    Inline::Perl5 in particular
    NativeCall (only 'core' mod. of significance?) 
PHASERS
EVAL
MOP: 
    variables: .WHAT, .WHERE, .WHY, 
    routines:  .^methods / .name, .arity, .count, .signature.gist, 

== misc syntax
\x = $ = 
\y = @ = 
ANON_VAR : $ @ %
$_ //= 
base conversion :2, :8, :36  (e.g. D/Digital_root)
junctions
defined-or with dynamic: say $*a || "Hey"  OR say $*a // "Hey"  OR say "Hey" without $*a 

== comments
#  - line-by-line
#` - block
#`{ blah } <code here>   # short block , aka left-hand side-bar, as in R/Ramanujan%27s_constant
POD

== variables
topic variables: $_, @_
Array (shaped , multi-D)
binding
constants
lazy
sigil-less
containers
placeholder
special: $*IN, $*EXECUTABLE-NAME, $*PROGRAM-NAME, $*TOLERANCE, etc
dynamic: $?ROUTINE, $?BLOCK

== explicit/custom use of Types
very common: Str, Int, Array, Hash, Num, Rat
UInt (UIntHash!)
(u)int16/32/64
FatRat
Complex
Buf
Set
Bag
Mix
SetHash
BagHash
MixHash
subset - user defined
atomic*

== sub-languages
regexp
    benford: /<( <[ 1..9 ]> )> <[ , . \d ]>*/ }
              ^^            ^^
grammars
Q / quoted
slangs

== subroutines
'sub MAIN', 'unit sub MAIN'
multi
anonymous
closures
infix
prefix
postfix
*circumfix ever?? # yes! ast/Square_Form_Factorization: sub circumfix:<⌊ ⌋>{ $^n.floor }
parameter styles: rw, copy, defaults, optional, slurpy, named, positional, 'where'
usage/help

== conditionals
if / elsif / else
unless
orelse
given / when

== loop constructs (hidden or otherwise)
map
grep
for
while
repeat
gather/take
loop (C-style)

do [+] @a Z× @B[*;$_] for ^@B[0] (e.g. in Matrix_multiplication)

== input/output
files
say/put/print/printf
get/getc/slurp
.gist, .raku

== generic operations
(call &infix:<->
(call &postcircumfix:<{ }>
(call &circumfix:<[ ]>
(call &prefix:<->
(call &postfix:<++>

== 'whatever' in various forms
[*-1]
@board[*;$_]
@prisoners.pick: *;
@lines.map(*».chars.max)
$x.polymod( 58 xx *)
… *
1..*
reduce * × 256 + *, $d, $c, $b, $a
Int $n where * > 0
(3 ** **)(^30)
<a bcd ef ghij>.sort: -*.chars

printf: "%.*g\t%.*g\n", $x_precision, $x, $y_precision, $y;
(in W/Write_float_arrays_to_a_text_file)

== random
srand (which would imply the others, otherwise WTF)
.pick
.roll
.rand
.grab

== concurrency and async
.race
.hyper
atomic*
call &await
react
supply
tap ?

== META ops

grep -h QAST::Op ast/* | perl -npe 's/\Q+{QAST::SpecialArg}//;s/^\s+.*::Op\((.*?)\).*/$1/' | sort | uniq -c | sort -rn | g META

1912 call &METAOP_ASSIGN
 576 call &METAOP_REDUCE_LEFT
 457 call &METAOP_HYPER
 297 call &METAOP_ZIP
 253 call &METAOP_CROSS
  97 call &METAOP_HYPER_POSTFIX_ARGS
  74 call &METAOP_REDUCE_LISTINFIX
  61 call &METAOP_REVERSE
  55 call &METAOP_NEGATE
  47 call &METAOP_REDUCE_CHAIN
  20 call &METAOP_REDUCE_LIST
  17 call &METAOP_REDUCE_RIGHT
  10 call &METAOP_HYPER_PREFIX
   2 p6fatalize &METAOP_ASSIGN
   2 call &METAOP_HYPER_CALL

== special function variants

https://andrewshitov.com/2020/09/17/the-pearls-of-raku-issue-10-the-rw-things/
(substr|take|return)-rw

# 2022-02-03/4 IRC
# elcaro ... slurping all previous vals: say (0, 1, -> *@a { [~] @a } ... *).head(5)
# Util    BTW, my example of -> *@a on a Seq:
locally:
B/Bell_numbers-2:                       my @bell = 1, -> *@s { 
C/Chinese_remainder_theorem:                          -> *@a {
P/Parallel_calculations.4:constant @primes = 2, 3, 5, -> *@p {

== Gotchas

Method 'clone' is called implicitly in most code (i.e. shows up in .ast, but not in .raku source)

]]
