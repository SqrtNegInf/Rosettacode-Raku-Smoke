#!/usr/local/bin/perl
## recent Raku updates on RosettaCode
#c# 2016-02-07 initial
#c# 2020-08-22 clean up, target 'Raku', not 'Perl6'

use strict;

open RC, qq{/opt/local/bin/curl --netrc -s 'http://rosettacode.org/mw/index.php?title=Special:RecentChanges&days=7&from=&limit=500&namespace=0' |};

my $cnt = 0;
my $new = 'N';

# skip users not known to be adding Raku code
my $not_these_users = 'Petelomax|Chunes|Robbie|CraigD|Chunes|Gerard|Cwt1078|Objeck|Nigel|Palaing|Paddy3118|Bellenuit';  

my($day,$mon);
while (<RC>) {
    ($day,$mon) = m#<h4>(\d+)\s+(\S+)\s+20\d\d</h4># if m/<h4>/; 
    $day =~ s/^(\d)$/0$1/;

    next unless m#\bRaku|:Contributions/(SqrtNegInf|Thundergnat|Hkdtam)#i; # catches Raku, any of mine, other habitual Raku offenders
    next if m#Perl\b#;                                                     # but not my Perl entries
    next if m#full.list#i;                                                 # get needed info via smoke tools

    # two ways to catch maintainance
    next if /highlighting/;
    next if /Thundergnat/ and not /Raku|Perl/;

    my($user)  = m#:Contributions/(.*?)"#;
    next if $user =~ /$not_these_users/i;

    my($title) = /mw-changeslist-title/ ? /mw-changeslist-title">(.*?)</ : /index.php.title=(.*?)&/;
    $title =~ s/_/ /g;
    my($time)  = m/[;>](\d\d:\d\d)[&<]/;
    my $line = sprintf "%9s %2d %5s  %-18s %s\n", $mon, $day, $time, $user, $title; # the slug

    my $checkpt;
    if (0 == $cnt) {
        my $file = "$ENV{HOME}/perl6/Rosetta-Code/meta/RC-recent.txt";
        open F, "<$file"; $checkpt = <F>; close F;  # read old check-point
        exit if $line eq $checkpt;                  # no changes, bail
        open F, ">$file"; print F $line; close F;   # save new check-point
    } 

    our $prev;
    $new = ' ' if $line eq $checkpt;    # stop marking as 'new'
    my $ooo = out_of_order();
    print "$new $ooo $line";
    last if 60 < $cnt++;                # just show recent updates
    $prev = $line;

    # RC groups multiple edits, which leads items to be out of sequence chronologically
    sub out_of_order { $prev ne '' && $prev lt $line ? '^' : ' ' } 
}
