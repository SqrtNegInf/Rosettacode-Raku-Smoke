#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Arithmetic-geometric_mean/Calculate_Pi
#c# 2016-01-29 <RC, 2019-04-19 >RC, 2019-05-16 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# replace 1st integer root routine
#n# worked for this task, but fundamentally buggy (e.g. for n=7055, goes into infinite loop)

#There is not yet a FixDecimal type module in Raku, and using FatRat all along would be too slow and would be coerced to Num when computing the square root anyway, so we'll use a custom definition of the square root for Int and FatRat, with a limitation to the number of decimals. We'll show all the intermediate results.

constant number-of-decimals = 100;

#multi sqrt(Int $n) {
#    .[*-1] given
#    1, { ($_ + $n div $_) div 2 } ... * == *
#}

multi sqrt(Int $n) {
    my $guess = 10**($n.chars div 2);
    my $iterator = { ( $^x   +   $n div ($^x) ) div 2 };
    my $endpoint = { $^x == $^y|$^z };
    return min (+$guess, $iterator … $endpoint)[*-1, *-2];
}

multi sqrt(FatRat $r --> FatRat) {
    return FatRat.new:
    sqrt($r.nude[0] × 10**(number-of-decimals×2) div $r.nude[1]),
    10**number-of-decimals;
}

my FatRat ($a, $n) = 1.FatRat xx 2;
my FatRat $g = sqrt(1/2.FatRat);
my $z = .25;

my @res;
for ^10 {
    given [ ($a + $g)/2, sqrt($a × $g) ] {
	$z -= (.[0] - $a)**2 × $n;
	$n += $n;
	($a, $g) = @$_;
	say my $temp = ($a ** 2 / $z).substr: 0, 2 + number-of-decimals;
    push @res, $temp;
    }
}

my $ref = qq:to/END/;
3.1876726427121086272019299705253692326510535718593692264876339862751228325281223301147286106601617972
3.1416802932976532939180704245600093827957194388154028326441894631956630010102553193888894275152646100
3.1415926538954464960029147588180434861088792372613115896511013576846530795030865017740975862898631567
3.1415926535897932384663606027066313217577024113424293564868460152384109486069277582680622007332762125
3.1415926535897932384626433832795028841971699491647266058346961259487480060953290058518515759317101932
3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280468522286541140
3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170668
3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170665
3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170664
3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170663
END

use Test;
is @res.join("\n"), chomp $ref;
