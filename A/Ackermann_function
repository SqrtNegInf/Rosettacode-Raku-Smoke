#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Ackermann_function
#c# 2015-10-28 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# for JVM: downgraded Unicode names to ASCII

sub A0(Int $m, Int $n) {
    if    $m == 0 { $n + 1 } 
    elsif $n == 0 { A0($m - 1, 1) }
    else          { A0($m - 1, A0($m, $n - 1)) }
}

# An implementation using multiple dispatch:
multi sub A1(0,      Int $n) { $n + 1                     }
multi sub A1(Int $m, 0     ) { A1($m - 1, 1)              }
multi sub A1(Int $m, Int $n) { A1($m - 1, A1($m, $n - 1)) }


# Caching version, in sigilless style, with liberal use of Unicode, and the extra optimizing terms to make A(4,2) possible:

#proto A(Int \m, Int \n) { (state @)[m;n] //= {*} }  # optional 

multi A(0,      Int \n) { n + 1 }
multi A(1,      Int \n) { n + 2 }
multi A(2,      Int \n) { 3 + 2 × n }
multi A(3,      Int \n) { 5 + 8 × (2 ** n - 1) }

multi A(Int \m, 0     ) { A(m - 1, 1) }
multi A(Int \m, Int \n) { A(m - 1, A(m, n - 1)) }

say my $result1 = A(4,1);
say my $result2 = .chars ~ " digits starting with " ~ .substr(0,50), "..." given A(4,2);

use Test;
is $result1, 65533;
is $result2, '19729 digits starting with 20035299304068464649790723515602557504478254755697';
