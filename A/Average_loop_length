#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Average_loop_length
#c# 2016-05-09 <>RC, 2018-05-31 <RC
#t# skiptest
#m# MOAR: OK
#j#  JVM: OK
#n# 2017-08-10 'random' output changed on 
#n# 2019-??-?? with hash key order now variable, testing upgraded with ArrayHash
#n# 2020-09-01 something is unstable, run #2 flips between: 2.00% vs. 2.67%;
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch? [update: now they've re-converged]
#n# 2021-03-01 still unstable when cron-launched
#n# 2021-03-10 problem mostly in #2, 1.33% (98+%), or 0.67%, and very rarely 0.00% (then #3-6 are different too)

use lib 'lib';
use lib '../lib';
use ArrayHash;

#srand 1; rand; # 2020-12-11 even head fake doesn't work here 100%
srand 123456;

# unstable output even with tiny limits
#constant MAX_N  = 3;
#constant TRIALS = 1;

constant MAX_N  = 20;
constant TRIALS = 100;

my @res;

for 1 .. MAX_N -> $N {
    #dd my @glorp = find-loop(random-mapping($N)).elems xx TRIALS;
    #my $empiric = TRIALS R/ [+] @glorp;
    my $empiric = TRIALS R/ [+] find-loop(random-mapping($N)).elems xx TRIALS;
    my $theoric = [+] map -> $k { $N ** ($k + 1) R/ [×] flat $k**2, $N - $k + 1 .. $N }, 1 .. $N;

    FIRST say " N    empiric      theoric      (error)";
    FIRST say "===  =========  ============  =========";
    #FIRST srand 123456; # trick doesn't work here

    @res.push: sprintf "%3d  %9.4f  %12.4f    (%4.2f%%)",
            $N,  $empiric,
                        $theoric, 100 × abs($theoric - $empiric) / $theoric;
}
.say for @res;
#exit;

sub random-mapping ($n) {
    my %temp = random-mapping-orig($n);
    my %pair := array-hash();
    %pair{$_} = %temp{$_} for sort %temp.keys;
    return %pair;
}

sub random-mapping-orig { hash .list Z=> .roll(^$^size) given (^$^size) }

sub find-loop { 0, | %^mapping{*} ...^ { (%){$_}++ } }

my $moar-terminal = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5200        1.5000    (1.33%)
  3     1.8000        1.8889    (4.71%)
  4     2.2600        2.2188    (1.86%)
  5     2.5300        2.5104    (0.78%)
  6     2.7100        2.7747    (2.33%)
  7     3.0300        3.0181    (0.39%)
  8     3.2600        3.2450    (0.46%)
  9     3.3000        3.4583    (4.58%)
 10     3.6300        3.6602    (0.83%)
 11     3.6800        3.8524    (4.47%)
 12     3.9900        4.0361    (1.14%)
 13     4.1200        4.2123    (2.19%)
 14     4.2300        4.3820    (3.47%)
 15     4.5200        4.5458    (0.57%)
 16     4.9400        4.7043    (5.01%)
 17     4.9900        4.8579    (2.72%)
 18     5.0800        5.0071    (1.46%)
 19     5.5600        5.1522    (7.92%)
 20     5.3000        5.2936    (0.12%)
END

# 2021-03-12 same as termlinal again?
my $moar-cronjob = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5200        1.5000    (1.33%)
  3     1.8000        1.8889    (4.71%)
  4     2.2600        2.2188    (1.86%)
  5     2.5300        2.5104    (0.78%)
  6     2.7100        2.7747    (2.33%)
  7     3.0300        3.0181    (0.39%)
  8     3.2600        3.2450    (0.46%)
  9     3.3000        3.4583    (4.58%)
 10     3.6300        3.6602    (0.83%)
 11     3.6800        3.8524    (4.47%)
 12     3.9900        4.0361    (1.14%)
 13     4.1200        4.2123    (2.19%)
 14     4.2300        4.3820    (3.47%)
 15     4.5200        4.5458    (0.57%)
 16     4.9400        4.7043    (5.01%)
 17     4.9900        4.8579    (2.72%)
 18     5.0800        5.0071    (1.46%)
 19     5.5600        5.1522    (7.92%)
 20     5.3000        5.2936    (0.12%)
END

my $moar-cronjobx = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.5200        1.5000    (1.33%)
  3     1.9200        1.8889    (1.65%)
  4     2.3000        2.2188    (3.66%)
  5     2.4400        2.5104    (2.80%)
  6     2.7400        2.7747    (1.25%)
  7     3.0100        3.0181    (0.27%)
  8     3.2000        3.2450    (1.39%)
  9     3.5200        3.4583    (1.78%)
 10     3.6800        3.6602    (0.54%)
 11     3.9400        3.8524    (2.27%)
 12     3.7600        4.0361    (6.84%)
 13     4.0600        4.2123    (3.62%)
 14     4.3000        4.3820    (1.87%)
 15     4.6000        4.5458    (1.19%)
 16     4.8600        4.7043    (3.31%)
 17     4.6200        4.8579    (4.90%)
 18     5.1000        5.0071    (1.86%)
 19     5.2000        5.1522    (0.93%)
 20     5.6600        5.2936    (6.92%)
END

my $jvm = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.3400        1.5000    (10.67%)
  3     1.9200        1.8889    (1.65%)
  4     2.2000        2.2188    (0.85%)
  5     2.5700        2.5104    (2.37%)
  6     2.7000        2.7747    (2.69%)
  7     2.9200        3.0181    (3.25%)
  8     3.1400        3.2450    (3.24%)
  9     3.1700        3.4583    (8.34%)
 10     3.6000        3.6602    (1.65%)
 11     3.8600        3.8524    (0.20%)
 12     3.7100        4.0361    (8.08%)
 13     4.1600        4.2123    (1.24%)
 14     4.1600        4.3820    (5.07%)
 15     4.3600        4.5458    (4.09%)
 16     4.6900        4.7043    (0.30%)
 17     4.8600        4.8579    (0.04%)
 18     4.7500        5.0071    (5.13%)
 19     4.8200        5.1522    (6.45%)
 20     4.7900        5.2936    (9.51%)
END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
#my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar-cronjob;
#is @res.join("\n"), chomp $ref;
