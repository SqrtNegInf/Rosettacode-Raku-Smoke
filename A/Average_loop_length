#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Average_loop_length
#c# 2016-05-09 <>RC, 2018-05-31 <RC, 2022-11-03 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2017-08-10 'random' output changed on 
#n# 2019-??-?? with hash key order now variable, testing upgraded with ArrayHash
#n# 2020-09-01 something is unstable, run #2 flips between: 2.00% vs. 2.67%;
#n# 2020-10-07 different answers when run from interactive shell vs cron-launch? [update: now they've re-converged]
#n# 2021-03-01 still unstable when cron-launched
#n# 2021-03-10 problem mostly in #2, 1.33% (98+%), or 0.67%, and very rarely 0.00% (then #3-6 are different too)
#n# 2022-09-22 code is fixed, but results still completely unstable (MoarVM and JVM)
#n# 2022-10-02 d'oh, was using out-of-date module, not new/precompiled version
#n# 2022-10-06 dare I hope this is now working and stable?  Been the single most troublesome Raku task on RC...
#n# 2022-11-03 ignore all above! Replace call to built-in 'rand' for output stability (but see .1 version for what's on RC)

use lib 'lib';
use myRNG;
my $rng = myRNG.new( :seed(123456) );

use ArrayHash;

constant MAX_N  = 20;
constant TRIALS = 100;

my @res;

for 1 .. MAX_N -> $N {
    my $empiric = TRIALS R/ [+] find-loop(random-mapping($N)).elems xx TRIALS;
    my $theoric = [+] map -> $k { $N ** ($k + 1) R/ [×] flat $k**2, $N - $k + 1 .. $N }, 1 .. $N;

    FIRST say " N    empiric      theoric      (error)";
    FIRST say "===  =========  ============  =========";

    @res.push: sprintf "%3d  %9.4f  %12.4f    (%4.2f%%)",
            $N,  $empiric, $theoric, 100 × abs($theoric - $empiric) / $theoric;
}

sub random-mapping ($n) {
    my %temp = random-mapping-orig($n);
    my %pair := array-hash();
    %pair{$_} = %temp{$_} for sort %temp.keys;
    return %pair;
}

# this has diverged a bit from the actual 'original', see .0 verison
sub random-mapping-orig ($size) {
    hash (^$size).list Z=> (^$size)[($size × $rng.next-rat)] xx $size;
}

.say for @res;

sub find-loop { 0, | %^mapping{*} ...^ { (%){$_}++ } }

my $ref = qq:to/END/;
  1     1.0000        1.0000    (0.00%)
  2     1.4400        1.5000    (4.00%)
  3     1.8600        1.8889    (1.53%)
  4     2.1400        2.2188    (3.55%)
  5     2.6200        2.5104    (4.37%)
  6     2.7700        2.7747    (0.17%)
  7     2.9400        3.0181    (2.59%)
  8     3.0000        3.2450    (7.55%)
  9     3.4200        3.4583    (1.11%)
 10     3.4400        3.6602    (6.02%)
 11     3.7500        3.8524    (2.66%)
 12     3.8200        4.0361    (5.35%)
 13     4.0200        4.2123    (4.57%)
 14     4.2300        4.3820    (3.47%)
 15     5.2200        4.5458    (14.83%)
 16     4.4100        4.7043    (6.26%)
 17     5.0800        4.8579    (4.57%)
 18     5.2400        5.0071    (4.65%)
 19     5.3200        5.1522    (3.26%)
 20     5.3000        5.2936    (0.12%)
END

use Test;
is @res.join("\n"), chomp $ref;
