#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/ASCII_art_diagram_converter
#c# 2018-06-17 <RC, 2018-06-19 <RC
#m# MOAR: OK
#j# JVM:  OK
#n#  2021-03-31 Raku v2021.03-56-g18c4c5d4e
#n#  unpack giving different results? have to investigate tomorrow...

srand 123456;

grammar RFC1025 {
    rule  TOP {  <.line-separator> [<line> <.line-separator>]+ }
    rule  line-separator { <.ws> '+--'+ '+' }
    token line  { <.ws> '|' +%% <field>  }
    token field  { \s* <label> \s* }
    token label { \w+[\s+\w+]* }
}

sub bits ($item) { ($item.chars + 1) div 3 }

sub deconstruct ($bits, %struct) {
    map { $bits.substr(.<from>, .<bits>) }, @(%struct<fields>);
}

sub interpret ($header) {
    my $datagram = RFC1025.parse($header);
    my %struct;
    for $datagram.<line> -> $line {
        FIRST %struct<line-width> = $line.&bits;
        state $from = 0;
        %struct<fields>.push: %(:bits(.&bits), :ID(.<label>.Str), :from($from.clone), :to(($from+=.&bits)-1))
          for $line<field>;
    }
    %struct
}

use experimental :pack;

my $diagram = q:to/END/;

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      ID                       |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    QDCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ANCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    NSCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                    ARCOUNT                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

END

my %structure = interpret($diagram);

my @res;
@res.push: 'Line width: '~ %structure<line-width>~ ' bits';
@res.push: sprintf("Name: %7s, bit count: %2d, bit %2d to bit %2d", .<ID>, .<bits>, .<from>, .<to>) for @(%structure<fields>);
#@res.push: "\nGenerate a random 12 byte \"header\"";
my $buf = Buf.new((^0xFF .roll) xx 12);
@res.push: "\nShow it converted to a bit string";
@res.push: my $bitstr = $buf.unpack('C*')Â».fmt("%08b").join;
@res.push: "\nAnd unpack it";
@res.push: sprintf("%7s, %02d bits: %s", %structure<fields>[$_]<ID>,  %structure<fields>[$_]<bits>,
  deconstruct($bitstr, %structure)[$_]) for ^@(%structure<fields>);

.say for @res;

my $moar = qq:to/END/;
Line width: 16 bits
Name:      ID, bit count: 16, bit  0 to bit 15
Name:      QR, bit count:  1, bit 16 to bit 16
Name:  Opcode, bit count:  4, bit 17 to bit 20
Name:      AA, bit count:  1, bit 21 to bit 21
Name:      TC, bit count:  1, bit 22 to bit 22
Name:      RD, bit count:  1, bit 23 to bit 23
Name:      RA, bit count:  1, bit 24 to bit 24
Name:       Z, bit count:  3, bit 25 to bit 27
Name:   RCODE, bit count:  4, bit 28 to bit 31
Name: QDCOUNT, bit count: 16, bit 32 to bit 47
Name: ANCOUNT, bit count: 16, bit 48 to bit 63
Name: NSCOUNT, bit count: 16, bit 64 to bit 79
Name: ARCOUNT, bit count: 16, bit 80 to bit 95

Show it converted to a bit string
011000110010100101110001110010010001100011010100111001101111101011010111111010010000011011000100

And unpack it
     ID, 16 bits: 0110001100101001
     QR, 01 bits: 0
 Opcode, 04 bits: 1110
     AA, 01 bits: 0
     TC, 01 bits: 0
     RD, 01 bits: 1
     RA, 01 bits: 1
      Z, 03 bits: 100
  RCODE, 04 bits: 1001
QDCOUNT, 16 bits: 0001100011010100
ANCOUNT, 16 bits: 1110011011111010
NSCOUNT, 16 bits: 1101011111101001
ARCOUNT, 16 bits: 0000011011000100
END

my $jvm = qq:to/END/;
Line width: 16 bits
Name:      ID, bit count: 16, bit  0 to bit 15
Name:      QR, bit count:  1, bit 16 to bit 16
Name:  Opcode, bit count:  4, bit 17 to bit 20
Name:      AA, bit count:  1, bit 21 to bit 21
Name:      TC, bit count:  1, bit 22 to bit 22
Name:      RD, bit count:  1, bit 23 to bit 23
Name:      RA, bit count:  1, bit 24 to bit 24
Name:       Z, bit count:  3, bit 25 to bit 27
Name:   RCODE, bit count:  4, bit 28 to bit 31
Name: QDCOUNT, bit count: 16, bit 32 to bit 47
Name: ANCOUNT, bit count: 16, bit 48 to bit 63
Name: NSCOUNT, bit count: 16, bit 64 to bit 79
Name: ARCOUNT, bit count: 16, bit 80 to bit 95

Show it converted to a bit string
001001110110111011010110110010100000110101111111000100110100000100111000101111100011011101111101

And unpack it
     ID, 16 bits: 0010011101101110
     QR, 01 bits: 1
 Opcode, 04 bits: 1010
     AA, 01 bits: 1
     TC, 01 bits: 1
     RD, 01 bits: 0
     RA, 01 bits: 1
      Z, 03 bits: 100
  RCODE, 04 bits: 1010
QDCOUNT, 16 bits: 0000110101111111
ANCOUNT, 16 bits: 0001001101000001
NSCOUNT, 16 bits: 0011100010111110
ARCOUNT, 16 bits: 0011011101111101
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;
