#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/AKS_test_for_primes
#c# 2015-12-30 <RC
#m# MOAR: OK
#j#  JVM: OK

constant expansions = [1], [1,-1], -> @prior { [|@prior,0 Z- 0,|@prior] } ... *;

sub polyprime($p where 2..*) { so expansions[$p].[1 ..^ */2].all %% $p }

my @res.push: ' p: (x-1)ᵖ';
@res.push: '-----------';

sub super ($n) {
    $n.trans: '0123456789'
           => '⁰¹²³⁴⁵⁶⁷⁸⁹';
}

for ^13 -> $d {
    @res.push: $d.fmt('%2i: ') ~ (
        expansions[$d].kv.map: -> $i, $n {
            my $p = $d - $i;
            [~] gather {
                take < + - >[$n < 0] ~ ' ' unless $p == $d;
                take $n.abs                unless $p == $d > 0;
                take 'x'                   if $p > 0;
                take super $p - $i         if $p > 1;
            }
        }
    )
}

@res.push: "\nPrimes up to 100:\n  { grep &polyprime, 2..100 }";
.say for @res;

my $ref = qq:to/END/;
 p: (x-1)ᵖ
-----------
 0: 1
 1: x - 1
 2: x² - 2x + 1
 3: x³ - 3x¹ + 3x - 1
 4: x⁴ - 4x² + 6x⁰ - 4x + 1
 5: x⁵ - 5x³ + 10x¹ - 10x-¹ + 5x - 1
 6: x⁶ - 6x⁴ + 15x² - 20x⁰ + 15x-² - 6x + 1
 7: x⁷ - 7x⁵ + 21x³ - 35x¹ + 35x-¹ - 21x-³ + 7x - 1
 8: x⁸ - 8x⁶ + 28x⁴ - 56x² + 70x⁰ - 56x-² + 28x-⁴ - 8x + 1
 9: x⁹ - 9x⁷ + 36x⁵ - 84x³ + 126x¹ - 126x-¹ + 84x-³ - 36x-⁵ + 9x - 1
10: x¹⁰ - 10x⁸ + 45x⁶ - 120x⁴ + 210x² - 252x⁰ + 210x-² - 120x-⁴ + 45x-⁶ - 10x + 1
11: x¹¹ - 11x⁹ + 55x⁷ - 165x⁵ + 330x³ - 462x¹ + 462x-¹ - 330x-³ + 165x-⁵ - 55x-⁷ + 11x - 1
12: x¹² - 12x¹⁰ + 66x⁸ - 220x⁶ + 495x⁴ - 792x² + 924x⁰ - 792x-² + 495x-⁴ - 220x-⁶ + 66x-⁸ - 12x + 1

Primes up to 100:
  2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97
END

use Test;
is @res.join("\n"), chomp $ref;
