#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Roots_of_unity
#c# 2015-11-28 <RC, 2022-11-30 <RC
#m# MOAR: OK
#j#  JVM: OK

my (@res1,@res2,@res3);

# original version
sub roots-of-unity-a (Int \n where 1..*) {
    map { exp 2i × π/n × $_ }, ^n;
}

# this version on RC
# 'cis' returns a unitary complex number given its phase.
sub roots-of-unity-b (Int \n where 1..*) {
    for ^n -> \k {
        push @res2, sprintf "%+.5f%+.5fi", cis(k×τ/n).reals;
    }
}

push @res1, sprintf "%+.5f%+.5fi", .reals for roots-of-unity-a 10;
roots-of-unity-b 10;

push @res3, sprintf "%+.5f%+.5fi", .reals for 1.roots(10);

.say for @res1;

my $ref = qq:to/END/;
+1.00000+0.00000i
+0.80902+0.58779i
+0.30902+0.95106i
-0.30902+0.95106i
-0.80902+0.58779i
-1.00000+0.00000i
-0.80902-0.58779i
-0.30902-0.95106i
+0.30902-0.95106i
+0.80902-0.58779i
END

use Test;
is (join "\n", @res1), chomp $ref;
is (join "\n", @res2), chomp $ref;
is (join "\n", @res3), chomp $ref;
