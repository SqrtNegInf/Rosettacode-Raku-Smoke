#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Ramanujan%27s_constant
#c# 2019-04-27 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# slower, but gets the job done
#n# LHS commenting messes up on RC, but too bad, I like it
#n# formulas from: https://en.wikipedia.org/wiki/Generalized_continued_fraction
#n# https://oeis.org/wiki/Ramanujan%27s_constant
#n# OEIS:A003173 Heegner number (see also https://en.wikipedia.org/wiki/Heegner_number)

use Rat::Precise;

sub continued-fraction($n, :@a, :@b) {
    my $x = @a[0].FatRat;
    $x = @a[$_ - 1] + @b[$_] / $x for reverse 1 ..^ $n;
    $x;
}

#`{ √163 } my $r163 =           continued-fraction( 50, :a(12,|((2×12) xx *)),      :b(19 xx *));
#`{ π/4  } my $pi   =       4 × continued-fraction(140, :a( 0,|(1, 3 ... *)),       :b(4, 1, |((1, 2, 3 ... *) X** 2)));
#`{ e**x } my $R    = 1 + ($_ / continued-fraction(170, :a( 1,|(2+$_, 3+$_ ... *)), :b(Nil,  |(-1×$_, -2×$_ ... *)  ))) given $r163×$pi;

say "Ramanujan's constant to 32 decimal places:\n", my $result = $R.precise(32);

use Test;
is $result, '262537412640768743.99999999999925007259719818568888';
