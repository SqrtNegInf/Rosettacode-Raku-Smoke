#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Ranking_methods
#c# 2018-09-27 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n# output style differs from what's on RC

my @scores =
    Solomon => 44,
    Jason   => 42,
    Errol   => 42,
    Garry   => 41,
    Bernard => 41,
    Barry   => 41,
    Stephen => 39;

sub tiers (@s) { @s.classify(*.value).pairs.sort.reverse.map: { .valueÂ».key } }

sub standard (@s) {
    my $rank = 1;
    gather for tiers @s -> @players {
        take $rank => @players;
        $rank += @players;
    }
}

sub modified (@s) {
    my $rank = 0;
    gather for tiers @s -> @players {
        $rank += @players;
        take $rank => @players;
    }
}

sub dense (@s) { tiers(@s).map: { ++$_ => @^players } }

sub ordinal (@s) { @s.map: ++$_ => *.key }

sub fractional (@s) {
    my $rank = 1;
    gather for tiers @s -> @players {
    my $beg = $rank;
    my $end = $rank += @players;
   #take [+]($beg ..^ $end) / @players => @players;
    take sum($beg ..^ $end) / @players => @players;
    }
}

my @res;
push @res.push:   "Standard:";   @res.push: $_ for   standard @scores;
push @res.push: "\nModified:";   @res.push: $_ for   modified @scores;
push @res.push: "\nDense:";      @res.push: $_ for      dense @scores;
push @res.push: "\nOrdinal:";    @res.push: $_ for    ordinal @scores;
push @res.push: "\nFractional:"; @res.push: $_ for fractional @scores;

.say for @res;

my $ref = qq:to/EOD/;
Standard:
1	Solomon
2	Jason Errol
4	Garry Bernard Barry
7	Stephen

Modified:
1	Solomon
3	Jason Errol
6	Garry Bernard Barry
7	Stephen

Dense:
1	Solomon
2	Jason Errol
3	Garry Bernard Barry
4	Stephen

Ordinal:
1	Solomon
2	Jason
3	Errol
4	Garry
5	Bernard
6	Barry
7	Stephen

Fractional:
1	Solomon
2.5	Jason Errol
5	Garry Bernard Barry
7	Stephen
EOD

use Test;
is @res.join("\n"), chomp $ref;
