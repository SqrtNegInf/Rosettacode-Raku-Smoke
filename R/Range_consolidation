#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Range_consolidation
#c# 2019-02-05 <>RC, 2019-02-09 <RC, 2020-08-26 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# scofflaw 'extra' tests no longer on RC as of 2019-03-31 (anything explicitly permitted is absolutely forbidden!)

my @res;
# In Raku, a Range is a first class object with its own specialized notation. Raku Ranges allow for exclusion of the boundary numbers. This example doesn't since it isn't a requirement in this task. Much of the logic is lifted from the Set_of_real_numbers task with simplified logic for the much simpler requirements.
# Note: the output is in standard Raku notation for Ranges.

# Union
sub infix:<∪> (Range $a, Range $b) { Range.new($a.min,max($a.max,$b.max)) }

# Intersection
sub infix:<∩> (Range $a, Range $b) { so $a.max >= $b.min }

multi consolidate() { () }

multi consolidate($this is copy, **@those) {
    gather {
        for consolidate |@those -> $that {
            if $this ∩ $that { $this ∪= $that }
            else             { take $that }
        }
        take $this;
    }
}

for [[1.1, 2.2],],
    [[6.1, 7.2], [7.2, 8.3]],
    [[4, 3], [2, 1]],
    [[4, 3], [2, 1], [-1, -2], [3.9, 10]],
    [[1, 3], [-6, -1], [-4, -5], [8, 2], [-6, -6]],
    [[], [2], [4,6], [5,9,8]]
-> @intervals {
    @res.push: sprintf "%46s => ", @intervals.raku;
    @res[*-1] ~= (reverse consolidate |@intervals.grep(*.elems)».sort.sort({ [.[0], .[*-1]] }).map: { Range.new(.[0], .[*-1]) }).gist
}

.say for @res;

my $ref = q:to/END/;
                                 [[1.1, 2.2],] => (1.1..2.2)
                      [[6.1, 7.2], [7.2, 8.3]] => (6.1..8.3)
                              [[4, 3], [2, 1]] => (1..2 3..4)
         [[4, 3], [2, 1], [-1, -2], [3.9, 10]] => (-2..-1 1..2 3..10)
[[1, 3], [-6, -1], [-4, -5], [8, 2], [-6, -6]] => (-6..-1 1..8)
                  [[], [2], [4, 6], [5, 9, 8]] => (2..2 4..9)
END

use Test;
is @res.join("\n"), chomp $ref;
