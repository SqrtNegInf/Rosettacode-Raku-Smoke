#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Ray-casting_algorithm
#c# 2015-12-06 <RC
#m# MOAR: OK
#j#  JVM: OK

my @res;

constant ε = 0.0001;

my %poly =
    squared => 
	 ((( 0.0,  0.0), (10.0,  0.0)),  # doesn't matter () vs [] since read-only values
	  ((10.0,  0.0), (10.0, 10.0)),
	  ((10.0, 10.0), ( 0.0, 10.0)),
	  (( 0.0, 10.0), ( 0.0,  0.0))),
    squaredhole =>
	 [[[ 0.0,  0.0], [10.0,  0.0]],
	  [[10.0,  0.0], [10.0, 10.0]],
	  [[10.0, 10.0], [ 0.0, 10.0]],
	  [[ 0.0, 10.0], [ 0.0,  0.0]],
	  [[ 2.5,  2.5], [ 7.5,  2.5]],
	  [[ 7.5,  2.5], [ 7.5,  7.5]],
	  [[ 7.5,  7.5], [ 2.5,  7.5]],
	  [[ 2.5,  7.5], [ 2.5,  2.5]]],
    strange =>
	 ([( 0.0,  0.0), ( 2.5,  2.5)],
	  ([ 2.5,  2.5], [ 0.0, 10.0]),
	  (( 0.0, 10.0), ( 2.5,  7.5)),
	  [[ 2.5,  7.5], ( 7.5,  7.5)],
	  [( 7.5,  7.5), [10.0, 10.0]],
	  [[10.0, 10.0], [10.0,  0.0]],
	  [[10.0,  0.0], [ 2.5,  2.5]],
	  [[ 2.5,  2.5], [ 0.0,  0.0]]),  # conjecturally close polygon
    exagon =>
	 ([( 3.0,  0.0), ( 7.0,  0.0)],
	  [( 7.0,  0.0), (10.0,  5.0)],
	  [(10.0,  5.0), ( 7.0, 10.0)],
	  [( 7.0, 10.0), ( 3.0, 10.0)],
	  [( 3.0, 10.0), ( 0.0,  5.0)],
	  [( 0.0,  5.0), ( 3.0,  0.0)]);

sub ray-hits-seg([\Px,\Py], [[\Ax,\Ay], [\Bx,\By]] --> Bool) {
    Py += ε if Py == Ay | By;

    if Py < Ay or Py > By or Px > (Ax max Bx) {
	    False
    } elsif Px < (Ax min Bx) {
	    True
    } else {
	    my \red  = Ax == Bx ?? ∞ !! (By - Ay) / (Bx - Ax);
	    my \blue = Ax == Px ?? ∞ !! (Py - Ay) / (Px - Ax);
	    blue >= red;
    }
}

sub point-in-poly(@point is copy, @polygon --> Bool) {  # don't modify input
    so 2 R% [+] gather for @polygon -> @side {
	    take ray-hits-seg @point, @side.sort(*.[1]);
    }
}

my @test-points =    # make this immutable
	  (  5.0,  5.0),
	  (  5.0,  8.0),
	  (-10.0,  5.0),
	  (  0.0,  5.0),
	  ( 10.0,  5.0),
	  (  8.0,  5.0),
	  ( 10.0, 10.0);

for <squared squaredhole strange exagon> -> $polywanna {
    @res.push: "$polywanna";
    my @poly = %poly{$polywanna}[];
    for @test-points -> @point {
        @res.push: "\t(@point.fmt('%.1f',','))\t{ point-in-poly(@point, @poly)?? 'IN'!! 'OUT' }";
    }
}

.say for @res;

my $ref = qq:to/END/;
squared
	(5.0,5.0)	IN
	(5.0,8.0)	IN
	(-10.0,5.0)	OUT
	(0.0,5.0)	OUT
	(10.0,5.0)	IN
	(8.0,5.0)	IN
	(10.0,10.0)	OUT
squaredhole
	(5.0,5.0)	OUT
	(5.0,8.0)	IN
	(-10.0,5.0)	OUT
	(0.0,5.0)	OUT
	(10.0,5.0)	IN
	(8.0,5.0)	IN
	(10.0,10.0)	OUT
strange
	(5.0,5.0)	IN
	(5.0,8.0)	OUT
	(-10.0,5.0)	OUT
	(0.0,5.0)	OUT
	(10.0,5.0)	IN
	(8.0,5.0)	IN
	(10.0,10.0)	OUT
exagon
	(5.0,5.0)	IN
	(5.0,8.0)	IN
	(-10.0,5.0)	OUT
	(0.0,5.0)	OUT
	(10.0,5.0)	IN
	(8.0,5.0)	IN
	(10.0,10.0)	OUT
END

use Test;
is @res.join("\n"), chomp $ref;
