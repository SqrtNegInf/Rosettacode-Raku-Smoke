#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Reduced-row_echelon_form
#c# 2018-04-05 <RC, 2022-06-07 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2022-06-06 RC task section 3: same logic as #2, recast into OO

# Note that both versions can be simplified using Z+=, Z-=, X×=, and X/= to scale and shear.

my @res;

class Matrix is Array {
    method  unscale-row ( @M: \scale, \row       ) { @M[row] =            @M[row] »/» scale }
    method  unshear-row ( @M: \scale, \r1,  \r2  ) { @M[r1]  = @M[r1] »-» @M[r2]  »×» scale }
    method   reduce-row ( @M:         \row, \col ) { @M.unscale-row( @M[row;col], row ) }
    method clear-column ( @M:         \row, \col ) { @M.unshear-row( @M[$_;col], $_, row ) for @M.keys.grep: * != row }

    method reduced-row-echelon-form ( @M: ) {
        my $column-count =  @M[0];

        # special-case to catch all-zero matrix (removed from RC)
        #my $current-col = 0;
        #while all( @M».[$current-col] ) == 0 {
        #    $current-col++;
        #    return if $current-col == $column-count;
        #}

        my $col = 0;
        for @M.keys -> $row {
            @M.reduce-row(   $row, $col );
            @M.clear-column( $row, $col );
            return if ++$col == $column-count;
        }
    }
}

my $M = Matrix.new(
    [<  1   2   -1    -4 >],
    [<  2   3   -1   -11 >],
    [< -2   0   -3    22 >],
);

$M.reduced-row-echelon-form;
@res.push: $_».fmt(' %4g') for @$M;

my $ref = qq:to/END/;
    1     0     0    -8
    0     1     0     1
    0     0     1    -2
END

.say for @res;

use Test;
is @res.join("\n"), chomp $ref;
