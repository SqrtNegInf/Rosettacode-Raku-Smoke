#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Repeat
#c# 2016-02-25 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# new-disp 'srand' shift

srand 123456;

my @res;

sub repeat (&f, $n) { f() xx $n };

sub example { @res.push: rand }

repeat(&example, 3);

.say for @res;

my $moar = qq:to/END/;
0.7193778801363785
0.3786428527412976
0.05908300058517646
END

my $jvm = qq:to/END/;
0.4132192266296165
0.990414373129817
0.2522554407939305
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;

#`{
Of course, we could have just written example() xx 3; or even (say rand) xx 3; directly; 
the custom repeat subroutine is just here to satisfy the task description.

Notes on the 'xx' operator:
Unlike other operators, it evaluates its left-hand-side argument lazily -
that's why we can simply call f() there rather than passing it as a
function object.  The operator has a return value: A list consisting of the
return values of the left-hand-side (and building lists is in fact what xx
is usually used for).

General notes:

The & sigil in the repeat subroutine signature restricts that parameter to
types that implement the Callable role, and makes it available inside the
repeat subroutine body as if it were a lexically scoped sub.  The
parentheses in the last line are necessary to disambiguate it as a call to
our custom subroutine, rather than an attempt to use the built-in repeat {
... } while ... construct.

}
