#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Railway_circuit
#c# 2020-04-05 <RC, 2021-02-02 >RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# for JVM: fails on Unicode character: 𝒫

my @res;

class 𝒫 { has ($.x, $.y) } # Point
 
multi infix:<⊞>(𝒫 \p, 𝒫 \q) { 𝒫.bless: x => p.x + q.x , y => p.y + q.y }
multi infix:<≈>(𝒫 \p, 𝒫 \q) { my $*TOLERANCE = .0001; p.x ≅ q.x and p.y ≅ q.y }
 
constant twelvesteps = (1..12).map: { 𝒫.new: x => sin(π×$_/6), y => cos(π×$_/6) };
constant foursteps   = (1.. 4).map: { 𝒫.new: x => sin(π×$_/2), y => cos(π×$_/2) };
 
sub digits($n!, $base!, $pad=0) {
    my @output =  $n.base($base).comb.reverse;
    @output.append: 0 xx ($pad - +@output) if $pad > +@output;
    @output
}
 
sub addsymmetries(%infound, \turns) {
    #sub circularsymmetries(@c) { (0..^+@c).map: {rotate @c, $_} }
    #my @allsym.push: | .&circularsymmetries for turns, -«turns; # DRY
    #my @allsym = |(circularsymmetries turns), |circularsymmetries -«turns; # original

    my @allsym.push: | .&{ (0 ..^ @$_).map: -> $n {rotate @$_, $n} } for turns, -«turns;
    %infound{$_} = True for @allsym;
    @allsym.max
}
 
sub isclosedpath(@turns, \straight, \start= 𝒫.bless: x => 0, y => 0) {
    return False if @turns.sum % (straight ?? 4 !! 12);
    my ($angl, $point) = (0, start);
    for @turns -> $turn {
        $angl  += $turn;
        $point ⊞= straight ?? foursteps[$angl % 4] !! twelvesteps[$angl % 12];
    }
    $point ≈ start;
}
 
sub allvalidcircuits(\N, \doPrint=False, \straight=False) {
    my ( @found, %infound );
    @res.push: "\nFor N of "~ N ~ " and " ~ (straight ?? "straight" !! "curved") ~ " track:";
    for (straight ?? (0..^3**N) !! (0..^2**N)) -> \i {
        my @turns = straight ??
            digits(i,3,N).map: { $_ == 0 ??  0 !! ($_ == 1 ?? -1 !! 1) } !!
            digits(i,2,N).map: { $_ == 0 ?? -1 !! 1 } ;
        if isclosedpath(@turns, straight) && !(%infound{@turns.Str}:exists) {
            my \canon = addsymmetries(%infound, @turns);
            @res.push: canon if doPrint;
            @found.push: canon.Str;
        }
    }
    @res.push: "There are "~ +@found~ " unique valid circuits.";
    @found
}
 
#allvalidcircuits($_, $_ < 28) for 12, 16, 20;    # 12, 16 … 36
allvalidcircuits($_, $_ < 12, True) for 4, 6, 8; # 4, 6 … 16;

.say for @res;

my $xef = q:to/END/;

For N of 12 and curved track:
1 1 1 1 1 1 1 1 1 1 1 1
There are 1 unique valid circuits.

For N of 16 and curved track:
1 1 1 1 1 1 1 -1 1 1 1 1 1 1 1 -1
There are 1 unique valid circuits.

For N of 20 and curved track:
1 1 1 1 1 1 1 1 -1 -1 1 1 1 1 1 1 1 1 -1 -1
1 1 1 1 1 1 1 -1 1 1 -1 1 1 1 1 1 1 1 -1 -1
1 1 1 1 1 1 1 -1 1 -1 1 1 1 1 1 1 1 -1 1 -1
1 1 1 1 1 1 -1 1 1 -1 1 1 1 1 1 1 -1 1 1 -1
1 1 1 1 1 -1 1 1 1 -1 1 1 1 1 1 -1 1 1 1 -1
1 1 1 1 -1 1 1 1 1 -1 1 1 1 1 -1 1 1 1 1 -1
There are 6 unique valid circuits.
END

my $ref = q:to/END/;

For N of 4 and straight track:
1 1 1 1
There are 1 unique valid circuits.

For N of 6 and straight track:
1 1 0 1 1 0
There are 1 unique valid circuits.

For N of 8 and straight track:
1 1 0 0 1 1 0 0
1 0 1 0 1 0 1 0
1 1 0 1 0 1 1 -1
1 1 1 0 -1 -1 -1 0
1 1 1 1 1 1 1 1
1 1 1 1 -1 -1 -1 -1
1 1 1 -1 1 1 1 -1
There are 7 unique valid circuits.
END

use Test;
is @res.join("\n"), chomp $ref;
