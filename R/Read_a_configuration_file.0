#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Read_a_configuration_file
#c# 2016-06-11 <RC
#m# MOAR: BROKEN  (lines 28, 50)
#j#  JVM: BROKEN

# This demonstrates several interesting features of Raku, including full grammar support, derived grammars, alternation split across derivations, and longest-token matching that works across derivations. It also shows off Raku's greatly cleaned up regex syntax.

my $fullname;
my $favouritefruit;
my $needspeeling = False;
my $seedsremoved = False;
my @otherfamily;

grammar ConfFile {
    token TOP {
	:my $*linenum = 0;
	^ <fullline>* [$ || (\N*) { die "MSG0 Parse failed at $0" } ]
    }

    token fullline {
	<?before .>
	{ ++$*linenum }
	<line> 
 	[ \n || { die "MSG1 Parse failed at line $*linenum" } ]  # DH fails
    }

    proto token line() {*}

    token line:misc  { {} (\S+) { die "Unrecognized word: $0" } }

    token line:sym<comment> { ^^ [ ';' | '#' ] \N* }
    token line:sym<blank>   { ^^ \h* $$ }

    token line:sym<fullname>       {:i fullname»       <rest> { $fullname = $<rest>[0].trim } }
    token line:sym<favouritefruit> {:i favouritefruit» <rest> { $favouritefruit = $<rest>[0].trim } }
    token line:sym<needspeeling>   {:i needspeeling»    <yes> { $needspeeling = defined $<yes>[0] } }
    token rest { \h* '='? (\N*) }
    token yes { :i \h* '='? \h*
    	[
	    || [yes|true|1]  # DH removed parens
	    || [no|false|0]
	    || (<?>)
	] \h*
    }
}

grammar MyConfFile is ConfFile {
    token line:sym<otherfamily>    {:i otherfamily»    <rest> { @otherfamily = $<rest>[0].trim} }; #».trim} }
    token many { \h*'='? ([ <![,]> \N ]*) ** 1..10 ',' }
    #token many { \h*'='? ([ <![,]> \N ]*) ** 1..10 ',' }
# OTHERFAMILY Rhu Barber, Harry Barber
}

MyConfFile.parsefile('file.cfg');

.say for :$fullname, :$favouritefruit, :$needspeeling, :$seedsremoved, :@otherfamily;
my @res.push: $_.gist for :$fullname, :$favouritefruit, :$needspeeling, :$seedsremoved, :@otherfamily;

my $ref = qq:to/END/;
fullname => Foo Barber
favouritefruit => banana
needspeeling => True
seedsremoved => False
otherfamily => [Rhu Barber, Harry Barber]
END
#"otherfamily" => ["Rhu Barber", "Harry Barber"]

use Test;
is @res.join("\n"), chomp $ref;
