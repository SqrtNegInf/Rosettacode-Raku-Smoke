#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/xx NOT ON RC
#c# 2019-09-xx 
#m# MOAR: OK
#j# JVM:  BROKEN
#n# Do .race and Perl5 call conflict? [seem to: same result in 'Cuban_primes' mash-up of .1 and 1.1 versions]
#n# key to decent runtime is adding more filtering tricks...
#n# OEIS:A035519 even rare numbers
#n# OEIS:A059755  odd rare numbers

#use ntheory:from<Perl5> <:all>;

# with .race
# 234.068u 239.169s 6:03.23 130.2%
# moved .flip test to top
# 122.653u 143.414s 2:37.09 169.3%
# ntheory
# 39.054u 0.393s 0:38.27 103.0%

my @res;

my atomicint @Rare[3];
my atomicint $cnt;

#(flat
for (flat
               1 .. 1000,
         600_000 .. 700_000,
     281_000_000 .. 281_100_000,
) -> $n {
#).race(:8degree).map: -> $n {
#(1000, 1002, 1004 ... 281_089_090).race(:8degree).map: -> $n {

#   2_022_600_000 .. 2_023_000_000,
# 868_591_000_000 .. 868_592_000_000,

    next unless $n ~~ /^^ <[2468]> /;
    next unless $n > my $r = $n.flip; # opposite of P5, 2x speed-up with early test (in P5, it doubles run-time)

    if $n > 1000 {
#        my ($a,$b,$p,$q) = ($n ~~ /^^ (.)(.).*(.)(.) $$/)>>.Int; # slow!
        my $q = substr $n,*-1, 1;
        next unless    $q == none(1,4,6,9);

        my $a = substr $n,  0, 1;
        next unless $a-$q ==  any(0,1,4,5,6);

        my $b = substr $n,  1, 1;
        my $p = substr $n,*-2, 1;
        given $a {
          when 2 { next if $q != 2 or $b != $p }
          when 4 { next unless  $q == 0             and 0 == $b-$p }
          when 6 { next unless ($q == 0 or $q == 5) and 0 != $b-$p }
          when 8 { 
                   next unless $q == any(2,3,7,8);
                  (next unless 9 == $b+$p) if $q == 2;
          }
        }
    }

    #next unless 0x202021202030213 +& (1 +< (($n+$r) +& 63)) > 0; # minimal diff, if any
    #next unless 0x202021202030213 +& (1 +< (($n-$r) +& 63)) > 0;

    next unless is-power($n+$r) and is-power($n-$r);
    #next unless is_power($n+$r, 2) and is_power($n-$r, 2);

#say "GOT IT: $n";
    # possibly redundant?
    #my $dr = $n;
    #while $dr.chars > 1 { $dr = [+] $dr.comb }
    #next unless $dr == any(2,5,8,9);

    @Rare[$cntâš›++] = $n;
}

#use experimental :cached; # no diff
#sub is-power ($x) is cached { $_ == .floor given sqrt($x) }
sub is-power ($x) { $_ == .floor given sqrt($x) }

.say for @Rare;
exit;

my $ref = q:to/END/;
65
621770
281089082
END

my $refextra = q:to/END/;
2022652202
2042832002
868591084757
872546974178
872568754178
END

use Test;
is @Rare.join("\n"), chomp $ref;
