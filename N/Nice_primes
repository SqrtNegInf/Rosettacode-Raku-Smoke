#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Nice_primes
#c# 2021-03-14 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# OEIS:A078403 Primes such that digital root (A038194) is prime.
#n# where A038194 Iterated sum-of-digits of n-th prime, i.e. digital root of n-th prime
#n# cf. D/Digital_root

my @res;

sub dr ($r) { .[*-1] given $r, { [+] .comb } ... { .chars == 1 } }
my @nice-primes.push: $_ if .&is-prime and is-prime(.&dr) for 500 ^..^ 1000;
@res.push: @nice-primes.batch(11)».fmt("%4d").join: "\n";

#sub digroot ($r) { .tail given $r, { [+] .comb } ... { .chars == 1 } }
#my @nice-primes = lazy gather for 1..* { .take if .&is-prime and .&digroot.&is-prime }
#my @list = grep { 500 < $_ < 1000 or $_ > 1000 and last }, @nice-primes;
#@res.push: @list.batch(11)».fmt("%4d").join: "\n";

sub digroot ($r) { .tail given $r, { [+] .comb } ... { .chars == 1 } }

my @is-nice1 = lazy (0..*).map: { .&is-prime && .&digroot.&is-prime ?? $_ !! False };
my @is-nice2 = lazy gather { take .&is-prime && .&digroot.&is-prime ?? $_ !! False for 0..* };
my @is-nice3 = lazy gather for 0..* { take .&is-prime && .&digroot.&is-prime ?? $_ !! False }

my @res1 = @is-nice1[500 ^..^ 1000].grep(*.so).batch(11)».fmt("%4d").join: "\n";
my @res2 = @is-nice2[500 ^..^ 1000].grep(*.so).batch(11)».fmt("%4d").join: "\n";
my @res3 = @is-nice3[500 ^..^ 1000].grep(*.so).batch(11)».fmt("%4d").join: "\n";

.say for @res;

my $ref = q:to/END/;
 509  547  563  569  587  599  601  617  619  641  653
 659  673  677  691  709  727  743  761  797  821  839
 853  857  887  907  911  929  941  947  977  983  997
END

use Test;
is @res.join("\n"), chomp $ref;
is @res1.join("\n"), chomp $ref;
is @res2.join("\n"), chomp $ref;
is @res3.join("\n"), chomp $ref;
