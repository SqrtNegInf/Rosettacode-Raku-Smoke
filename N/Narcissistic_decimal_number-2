#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Narcissistic_decimal_number
#c# 2015-12-19 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# OEIS:A005188
#n# purportedly 'faster' version now overtaken by concurrency (see -1 version)

# precalculates the values for base 1000 digits:

sub kigits($n) {
    my int $i = $n;
    my int $b = 1000;
    gather while $i {
        take $i % $b;
        $i = $i div $b;
    }
}

my @N = 0;
for (1..*) -> $d {
    my @t = 0..9 X** $d;
    my @table = @t X+ @t X+ @t;
    sub is-narcissistic(\n) { n == [+] @table[kigits(n)] };
    state $l = 2;
    #FIRST say "1\t0";
    $l++ and @N.push: $_ if .&is-narcissistic for 10**($d-1) ..^ 10**$d;
    last if $l > 20
};

say my $result2 = @N.join: ' ';

use Test;
is $result2, '0 1 2 3 4 5 6 7 8 9 153 370 371 407 1634 8208 9474 54748 92727 93084';

=finish 

# don't see how to add concurrency to pre-calc version 
# (in a way that actually reduced wall-clock run-time)

# is this not valid?  ⚛++$l

my $max = 20;
my @N = 0 xx $max;
my atomicint $l = 1;
#for (1..*) -> $d {
(1..∞).race.map: -> $d {
    my @t = 0..9 X** $d;
    our @table = @t X+ @t X+ @t;
    #((10**($d-1) ..^ 10**$d)).race.map: { $l⚛++ and @N[$l] = $_ if .&is-narcissistic1 }
    for (10**($d-1) ..^ 10**$d) { $l⚛++ and @N[$l] = $_ if .&is-narcissistic1 }
    #@N[⚛++$l] = $_ if .&is-narcissistic1 for 10**($d-1) ..^ 10**$d;
    last if $l > $max;

    sub is-narcissistic1($n) { $n == [+] @table[kigits($n)] }
}
