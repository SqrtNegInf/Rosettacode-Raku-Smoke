#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Nested_templated_data
#c# 2018-05-28 <RC, 2018-06-01 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# with JVM 2021.12, output agrees with Moar exactly

# Explicitly not using strings, using one data structure to fill in another. Since it isn't a string, the output format removes the newlines from the template; line feeds aren't particularly significant in Raku data structures. It does preserve the nesting though. In the second example, payload "buckets" that don't exist result in an undefined value being inserted; by default: Any.

say join "\n  ", '##PAYLOADS:', |my @payloads = 'Payload#' X~ ^7;

my @res;
sub template ($pattern) { @payloads[|$pattern] };

for [
     (((1, 2),
       (3, 4, 1),
       5),),

     (((1, 2),
       (10, 4, 1),
       5),)
    ] {
  @res.push: '      Template: '~ $_.raku;
  @res.push: "Data structure: { template($_).raku }\n";
}
.say for @res; 

my $ref = q:to/END/;
      Template: $(((1, 2), (3, 4, 1), 5),)
Data structure: ((("Payload#1", "Payload#2"), ("Payload#3", "Payload#4", "Payload#1"), "Payload#5"),)

      Template: $(((1, 2), (10, 4, 1), 5),)
Data structure: ((("Payload#1", "Payload#2"), (Any, "Payload#4", "Payload#1"), "Payload#5"),)

END

use Test;
is @res.join("\n"), chomp $ref;
