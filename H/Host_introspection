#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Host_introspection
#c# 2016-02-02 <RC, 2018-11-15 <RC, 2018-12-12 <>RC, 2020-10-29 <RC
#m# MOAR: OK
#j# JVM:  BROKEN 
#n# presumably JVM will get the read-int16 method sooner than NativeCall?

# java.lang.ClassCastException: org.perl6.nqp.sixmodel.reprs.CArrayInstance cannot be cast to org.perl6.nqp.sixmodel.reprs.CStructInstance
#  in sub nativecast at /Users/dhoekman/.rakudobrew/jvm-master/install/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 680

my @res;

# Endian detection translated from C.

use NativeCall;

@res.push: $*VM.config<ptr_size>;
my $bytes = nativecast(CArray[uint8], CArray[uint16].new(1));
@res.push: $bytes[0] ?? "little-endian" !! "big-endian";

# Note: Rakudo 2018.12 is introducing the endian-sensitive read-int16 method, which makes endian detection a little easier:

# from S03-buf/read-num.t:
@res.push: blob8.new(1,0).read-int16(0) == 1 ?? LittleEndian !! BigEndian;
#say blob8.new(1,0).read-int16(0) == 0 ?? "little-endian" !! "big-endian"; # this is backwards?

#  2020-10-29 alternate
@res.push: join ', ', $*KERNEL, $*KERNEL.bits, $*KERNEL.arch, $*KERNEL.endian;

.say for @res;

my $darwin = q:to/END/;
8
little-endian
LittleEndian
darwin, 64, i386, LittleEndian
END

my $linux = q:to/END/;
8
little-endian
LittleEndian
linux, 64, x86_64, LittleEndian
END

use Test;
is @res.join("\n"), chomp $*KERNEL eq 'linux' ?? $linux !! $darwin;
