#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Horner's_rule_for_polynomial_evaluation
#c# 2015-12-11 <RC, 2024-12-23 <RC
#m# MOAR: OK
#j#  JVM: OK

sub horner1 ( @coeffs, $x ) {
    #@coeffs.reverse.reduce: { $^a × $x + $^b };
    @coeffs.reverse.reduce(* × $x + *);
}

say horner1( [ -19, 7, -4, 6 ], 3 );

# recursive
multi horner2(@coeffs, $x) {
    @coeffs > 1 ?? @coeffs.head + $x * samewith(@coeffs.tail(*-1), $x) !! @coeffs.pick
}
 
say horner2( [-19, 7, -4, 6 ], 3 );

#We can also use the composition operator:

sub horner3 ( @coeffs, $x ) {
    ([o] map { $_ + $x × * }, @coeffs)(0);
}

say horner3( [ -19, 7, -4, 6 ], 3 );

#One advantage of using the composition operator is that it allows for the use of an infinite list of coefficients.

sub horner4 ( @coeffs, $x ) {
    map { .(0) }, [\o] map { $_ + $x × * }, @coeffs;
}

say horner4( [ 1 X/ (1, |[\×] 1 .. *) ], i×π )[20];

use Test;
is horner1( [ -19, 7, -4, 6 ], 3 ), 128;
is horner2( [-19, 7, -4, 6 ], 3 ), 128;
is horner3( [ -19, 7, -4, 6 ], 3 ), 128;
is-approx horner4( [ 1 X/ (1, |[\×] 1 .. *) ], i×π )[20], -0.9999999999243492-5.289185159542186E-10i
