#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Hough_transform
#c# 2018-09-26 >RC, 2018-10-15 >RC
#m# MOAR: OK
#j#  JVM: BROKEN
#f# RC file: hough.png
#n# for JVM: module
#n# to get GD installed: ln -s /opt/local/lib/libgd.3.dylib /usr/local/lib/libgd.dylib
#n# GD interface limits us to 255 colors, so only transform darker pixels in input
#n# not using .race as cannot exactly control pixel color assigments, so testing would fail

BEGIN { die 'ecosystem...' if $*VM ~~ /jvm/; }  # wait for zef-j

use GD;

my $filename = 'ref/pentagon.ppm';
my $in = open($filename, :r, :enc<iso-8859-1>);
my ($type, $dim, $depth) = $in.lines[^3];

my ($xsize,$ysize) = split ' ', $dim;

my ($width, $height) = 460, 360;
my $image = GD::Image.new($width, $height);

my @canvas = [255 xx $width] xx $height;

#my $rmax = exp(½,$xsize² + $ysize²); # OK, but not JVM
#my $rmax = ($xsize² + $ysize²)**½;   #       "
my $rmax = sqrt($xsize² + $ysize²);
my $dr   = 2 × $rmax / $height;
my $dth  = π / $width;

my $p = 0;
my %cstore;
for $in.lines.ords -> $r, $g, $b {
    $p++;
    next if $r > 130;

    my $x =  $p % $xsize;
    my $y = ($p / $xsize).floor;

    #(0..^$width).race.map: -> $k {  # faster, but non-deterministic
    for (0..^$width) -> $k {
        my $th = $dth×$k;
        my $r   = ($x×cos($th) + $y×sin($th));
        my $iry = ($height/2 + ($r/$dr).round(1)).Int;
        my $c = '#' ~ (@canvas[$iry][$k]--).base(16) x 3;
        %cstore{$c} = $image.colorAllocate($c) if %cstore{$c}:!exists;
        $image.pixel($k, $iry, %cstore{$c});
    }
}

my $png_fh = $image.open("run/hough.png", "wb");
$image.output($png_fh, GD_PNG);
$png_fh.close;
