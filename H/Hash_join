#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Hash_join
#c# 2016-08-14 <RC, 2022-08-30 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# *[0] and *[1] could have been hard-coded, but what's the fun in that?

# The .classify method returns a multimap represented as a Hash whose values are Arrays.

sub hash-join(@a, &a, @b, &b) {
    my %hash = @b.classify(&b);     # := was not necessary

    @a.map: -> $a {
       #|(%hash{a $a}  // next).map: -> $b { [$a, $b] } # bare 'a' is a bit obscure
        |(%hash{$a.&a} // next).map: -> $b { [$a, $b] }
    }
}

my @A =
    [27, "Jonah"],
    [18, "Alan"],
    [28, "Glory"],
    [18, "Popeye"],
    [28, "Alan"],
;

my @B =
    ["Jonah", "Whales"],
    ["Jonah", "Spiders"],
    ["Alan", "Ghosts"],
    ["Alan", "Zombies"],
    ["Glory", "Buffy"],
;

my @res.push: $_ for hash-join @A, *[1], @B, *[0];  # TIL bare code snippets passed to sub

.say for @res;

my $ref = qq:to/END/;
27 Jonah Jonah Whales
27 Jonah Jonah Spiders
18 Alan Alan Ghosts
18 Alan Alan Zombies
28 Glory Glory Buffy
28 Alan Alan Ghosts
28 Alan Alan Zombies
END

use Test;
is @res.join("\n"), chomp $ref;
