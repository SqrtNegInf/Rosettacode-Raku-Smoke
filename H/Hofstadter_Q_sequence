#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Hofstadter_Q_sequence
#c# 2015-11-22 <>RC, 2016-04-23 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2022-08-08 more testing

#constant @Q = 1, 1, -> $a, $b { # @Q recursively defined, so this doesn't work
my @Q = 1, 1, -> $a, $b {
    (state $n = 1)++;
    @Q[$n - $a] + @Q[$n - $b]
} ... *;

say "first ten: ", @Q[^10];
say "1000th: ", @Q[999];

say "In the first 100_000 terms, ",
   [+](@Q[1..100000] Z< @Q[0..99999]),
   " terms are less than their preceding terms";

use Test;
is @Q[^10], '1 1 2 3 3 4 5 5 6 6', '1st 10 terms';
is @Q[999], 502, '1000th term';

# OO solution
# Similar concept as the perl5 solution, except that the cache is only filled on demand.

class Hofstadter {
  has @!c = 1,1;
  method AT-POS ($me: Int $i) {
    @!c.push($me[@!c.elems-$me[@!c.elems-1]] +
         $me[@!c.elems-$me[@!c.elems-2]]) until @!c[$i]:exists;
    return @!c[$i];
  }
}

my Hofstadter $Q1 .= new();

say "first ten: $Q1[^10]";
say "1000th: $Q1[999]";

is $Q1[^10], '1 1 2 3 3 4 5 5 6 6', '1st 10 terms';
is $Q1[999], 502, '1000th term';

my $count = 0;
$count++ if $Q1[$_ +1 ] < $Q1[$_] for  ^99_999;
say "In the first 100_000 terms, $count terms are less than their preceding terms";

is $count, 49798;
