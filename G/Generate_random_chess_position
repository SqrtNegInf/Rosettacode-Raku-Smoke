#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Generate_random_chess_position
#c# 2016-01-27 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2023-01-01 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub pick-FEN {
    # First we chose how many pieces to place
    my $n = (2..32)[31×$rng.next-rat];

    # Then we pick $n squares
    my @n = (^64).&pickall.head($n);

    # We try to find suitable king positions on non-adjacent squares.
    # If we could not find any, we return recursively
    return pick-FEN() unless
    my @kings[2] = first -> [$a, $b] {
        $a !== $b && abs($a div 8 - $b div 8) | abs($a mod 8 - $b mod 8) > 1
    }, (@n X @n);

    # We make a list of pieces we can pick (apart from the kings)
    my @pieces = <p P n N b B r R q Q>;                                             # Q  vim kludge

    # We make a list of two king symbols to pick randomly a black or white king
    my @k = 0.5 < $rng.next-rat ?? <K k> !! <k K>;

    return (gather for ^64 -> $sq {
        if $sq == @kings.any { take @k.shift }
        elsif $sq == @n.any {
            my $row = 7 - $sq div 8;
            take
            $row == 7 ?? @pieces.grep(none('P')).head !!  # could use .&pickall for .pick, but...
            $row == 0 ?? @pieces.grep(none('p')).head !!  # in the end there's no variation anyway
            @pieces[@pieces.elems×$rng.next-rat];
        }
        else { take 'ø' }
    }).rotor(8)».join».subst(/ø+/,{ .chars }, :g).join('/') ~ ' w - - 0 1';
}

say my $result = pick-FEN();

use Test;
my $ref = 'k2p4/1BR5/5K2/4b3/8/7R/5N1q/8 w - - 0 1';
is $result, chomp $ref;
