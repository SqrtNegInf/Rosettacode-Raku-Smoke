#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Gradient_descent
#c# 2019-10-29 <RC, 2019-10-31 <RC, 2019-11-02 <RC
#m# MOAR: OK
#j# JVM:  OK

sub steepestDescent(@x, $alpha is copy, $h is copy) {

   my $g0 = g(@x) ;    # Initial estimate of result.

   my @fi = gradG(@x, $h, $g0) ;    #  Calculate initial gradient

   # Calculate initial norm.
   my $b = $alpha / sqrt(my $delG = sum(map {$_²}, @fi));

   while ( $delG > $h ) {   # Iterate until value is <= tolerance.

      for @fi.kv -> $i, $j { @x[$i] -= $b × $j } #  Calculate next value.

      # Calculate next gradient and next value
      @fi = gradG(@x, $h /= 2, my $g1 = g(@x));  

      $b = $alpha / sqrt($delG = sum(map {$_²}, @fi) );  # Calculate next norm.

      $g1 > $g0 ?? ( $alpha /= 2 ) !! ( $g0 = $g1 )   # Adjust parameter.
   }
}

sub gradG(@x is copy, $h, $g0) { # gives a rough calculation of gradient g(x).
   map { $_ += $h ; (g(@x) - $g0) / $h }, @x
}

# Function for which minimum is to be found.
sub g(\x) { (x[0]-1)² × exp(-x[1]²) + x[1]×(x[1]+2) × exp(-2×x[0]²) }
my $tolerance = 0.0000006 ; my $alpha = 0.1;

my @x = 0.1, -1; # Initial guess of location of minimum.

steepestDescent(@x, $alpha, $tolerance);

say "Testing steepest descent method:";
say my $result = 'The minimum is at x[0] = ' ~ @x[0] ~ ', x[1] = ' ~ @x[1];

my $moar = q:to/END/;
The minimum is at x[0] = 0.10765273561778406, x[1] = -1.223326198625842
END

my $jvm = q:to/END/;
The minimum is at x[0] = 0.10743450794656964, x[1] = -1.2233956711774543
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is $result, chomp $ref;
