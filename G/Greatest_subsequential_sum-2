#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Greatest_subsequential_sum
#c# 2015-12-06 <RC, 2017-01-04 <RC
#m# MOAR: OK
#j#  JVM: OK

#`{
For each starting position, we calculate all the subsets starting at that position.
They are combined with the best subset ($max_subset) from previous loops, to form (@subsets).
The best of those @subsets is saved at the new $max_subset.
Consuming the array (.shift) allows us to skip tracking the starting point; it is always 0.
The empty sequence is used to initialize $max_subset, which fufills the "all negative" requirement of the problem.
}

sub maxsubseq ( *@a ) {
    my $max_subset = [];
    while @a {
        my @subsets = [\,] @a;
        @subsets.push($max_subset);
        $max_subset = @subsets.max: { [+] .list };
        @a.shift;
    }
    $max_subset
}

say my $result1 = maxsubseq( -1, -2,  3,  5,  6, -2, -1,  4, -4,  2, -1 );
say my $result2 = maxsubseq( -2, -2, -1,  3,  5,  6, -1,  4, -4,  2, -1 );
say my $result3 = maxsubseq( -2, -2, -1, -3, -5, -6, -1, -4, -4, -2, -1 );

use Test;
is $result1, '3 5 6 -2 -1 4';
is $result2, '3 5 6 -1 4';
is $result3, '';
