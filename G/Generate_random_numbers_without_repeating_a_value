#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Generate_random_numbers_without_repeating_a_value
#c# 2021-08-28 <RC, 2023-01-22 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# replace call to built-in 'rand' for output stability

my @res;

#`{
Raku has three distinct "random" functions built in. rand() for when you
want some fraction between 0 and 1. roll() when you want to select elements
from a collection with replacement (rolls of a die). And pick() for when
you want to select some elements from a collection without replacement.
(pick a card, any card, or two cards or 10 cards...). If you want to select
all the elements in random order, just pick 'whatever'. Here we'll pick all
from 1 to 20, 5 times using the repetition operator.
}

say 'Pick random elements with replacement';
.put for (1..20).pick(*) xx 4;

say '';
say 'Pick random elements with replacement';
.put for (1..20).roll(20) xx 4;

# not testing above output

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub pick-all (@a is copy) is export {
for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) Ã— $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

@res.push: $_ for (1..20).&pick-all xx 4;

.put for @res;

my $ref = q:to/END/;
3 1 18 15 2 19 4 10 11 12 16 5 6 17 20 9 8 13 7 14
6 10 20 2 5 15 16 8 19 18 3 17 14 7 11 4 13 9 12 1
10 18 8 5 17 13 14 19 7 1 15 4 3 2 12 6 20 16 9 11
18 15 5 1 9 13 12 7 4 19 8 2 14 11 17 6 20 3 16 10
END

use Test;
is @res.join("\n"), chomp $ref;
