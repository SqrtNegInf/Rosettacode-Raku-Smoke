#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Jump_anywhere
#c# 2016-09-16 <RC, 2020-08-25 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2022-11-21 replace call to built-in 'rand' for output stability

class splitmix64 {
    has $!state;
    submethod BUILD ( Int :$seed where * >= 0 = 1 ) { $!state = $seed }
    method next-int {
        my $next = $!state = ($!state + 0x9e3779b97f4a7c15) +& (2⁶⁴ - 1);
        $next = ($next +^ ($next +> 30)) × 0xbf58476d1ce4e5b9 +& (2⁶⁴ - 1);
        $next = ($next +^ ($next +> 27)) × 0x94d049bb133111eb +& (2⁶⁴ - 1);
        ($next +^ ($next +> 31)) +& (2⁶⁴ - 1);
    }
    method next-rat { self.next-int / 2⁶⁴ }
}

my $rng = splitmix64.new( :seed(123456789) );

my @res;

# Label-based jumps
    outer-loop: loop {
        inner-loop: loop {
            # NYI # goto inner-loop if rand > 0.5; # Hard goto
            next inner-loop if $rng.next-rat > 0.5; # Next loop iteration
            redo inner-loop if $rng.next-rat > 0.5; # Re-execute block
            last outer-loop if $rng.next-rat > 0.5; # Exit the loop
            ENTER { @res.push: "Entered inner loop block" }
            LEAVE { @res.push: "Leaving inner loop block" }
        }
        ENTER { @res.push: "Entered outer loop block" }
        LEAVE { @res.push: "Leaving outer loop block" }
        LAST  { @res.push: "Ending outer loop" }
    }

.say for @res;

# Produces random output, but here's a representative run:
# 2022-09-24 currently same for MoarVM, JVM (but that could change)

my $ref = qq:to/END/;
Entered outer loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Entered inner loop block
Leaving inner loop block
Leaving outer loop block
Ending outer loop
END

use Test;
is @res.join("\n"), chomp $ref;

# Continuation-based execution
# Continuations in Raku are currently limited to use in generators via the gather/take model:

    my @list = lazy gather for ^100 -> $i {
        if $i.is-prime {
            say "Taking prime $i";
            take $i;
        }
    }

say @list[5];

is @list[5], '13';


exit; # skip further testing 

# Notice that no further execution of the loop occurs. If we then asked for the element at index 20, we would expect to see 15 more lines of "Taking prime..." followed by the result: 73.

# Failures and exceptions
# Exceptions are fairly typical in Raku:

    die "This is a generic, untyped exception";
# Will walk up the stack until either some `CATCH` block intercepts the specific exception type or we exit the program.
# But if a failure should be recoverable (e.g. execution might reasonably continue along another path) a failure is often the right choice. The fail operator is like "return", but the returned value will only be valid in boolean context or for testing definedness. Any other operation will produce the original exception with the original exception's execution context (e.g. traceback) along with the current context.

    sub foo() { fail "oops" }
    my $failure = foo;
    say "Called foo";
    say "foo not true" unless $failure;
    say "foo not defined" unless $failure.defined;
    say "incremented foo" if $failure++; # exception

#`{
 Called foo
 foo not true
 foo not defined
 oops
   in sub foo at fail.p6 line 1
   in block <unit> at fail.p6 line 2
 Actually thrown at:
   in any  at gen/moar/m-Metamodel.nqp line 3090
   in block <unit> at fail.p6 line 6
}

# However, an exception can `.resume` in order to jump back to the failure point (this is why the stack is not unwound until after exception handling).

  sub foo1($i) {
      if $i == 0 {
          die "Are you sure you want /0?";
      }
      say "Dividing by $i";
      1/$i.Num + 0; # Fighting hard to make this fail
  }

  for ^10 -> $n {
      say "1/$n = " ~ foo1($n);
  }

  CATCH {
      when ~$_ ~~ m:s/Are you sure/ { .resume; #`(yes, I'm sure) }
  }

#`{
This code raises an exception on a zero input, but then resumes execution, divides be zero and then raises a divide by zero exception which is not caught:

 Dividing by 0
 Attempt to divide 1 by zero using /
   in sub foo at fail.p6 line 6
   in block <unit> at fail.p6 line 10

 Actually thrown at:
   in sub foo at fail.p6 line 6
   in block <unit> at fail.p6 line 10
}

