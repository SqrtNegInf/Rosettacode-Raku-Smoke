#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Perceptron
#c# 2020-11-15 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#f# RC file: perceptron.png
#n# On Mac-Pro before 'zef install': 
#n#     (cd /usr/local/lib; ln -s /opt/local/lib/libMagickWand-6.Q16.dylib libMagickWand-7.Q16HDRI.dylib)
#n# 2023-02-13 replace call to built-in 'rand' for output stability
#n# 2024-04-03 non-zero diff; since could shift again, also bring back fuzzy testing 

use myRNG;
my $rng = myRNG.new( :seed(123456) );

use MagickWand;

our ( \c, \runs ) = 0.00001, 500 ;

class Trainer { has ( @.inputs, $.answer ) is rw }

sub linear(\x) { return x × 0.7 + 40 }

class Perceptron { 

   has ( @.weights, Trainer @.training ) is rw ;

   submethod BUILD(:n($n), :w($w), :h($h)) {
      @!weights  = [ $rng.next-rat × 2-1 xx ^$n ];
      @!training = (^runs).map: {
          my (\x,\y) = $rng.next-rat × $w , $rng.next-rat × $h ;
          my \a      = y < linear(x) ?? 1 !! -1;
          Trainer.new: inputs => (x,y,1), answer => a 
      }
   }

   method feedForward(@inputs) { 
      die "weights and input length mismatch" if +@inputs != +self.weights;
      return ( sum( @inputs »×« self.weights ) > 0 ) ?? 1 !! -1
   }

   method train(@inputs, \desired) {
      self.weights »+«= @inputs »×» (c×(desired - self.feedForward(@inputs)))
   }

   method draw(\img) {
      for ^runs { self.train(self.training[$_].inputs, self.training[$_].answer) }
      my $y = linear(my $x = img.width) ;
      img».&{ .stroke-width(3) or .stroke('black') or .fill('none') } # C returns 
      img.draw-line(0.0, linear(0), $x, $y);
      img.stroke-width( 1 );
      for ^runs {
         my $guess = self.feedForward(self.training[$_].inputs);
         ($x, $y) = self.training[$_].inputs[0,1] »-» 4;  
         $guess > 0 ?? img.stroke( 'blue' ) !! img.stroke( 'red' ); 
         img.circle( $x, $y, $x+8, $y );
      }
   }
}

my ($w, $h) = 640, 360;
my $perc = Perceptron.new: n => 3, w => $w, h => $h;
my $o = MagickWand.new or die; 
$o.create( $w, $h, "white" );
$perc.draw($o);
$o.write('run/perceptron.png') or die;

my $compare = chomp qx/which compare/ or die 'Required testing tool <compare> not found';
say my $result = qqx!$compare -metric MAE ref/perceptron.png run/perceptron.png null: 2>&1!;

# 2023-02-14 probably redundant, can remove?
# allow for exact equivalence or close similarity
use Test;
my ($mae,$percent)  = $result.split(' ');
ok $result eq '0.28444 (4.34028e-06)' || $mae < 2000 and $percent.starts-with('(0.');
#ok $result eq '0 (0)'; # || $mae < 2000 and $percent.starts-with('(0.');
