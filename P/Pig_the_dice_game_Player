#!/usr/bin/env perl6
# /usr/bin/env -v MVM_SPESH_DISABLE=1 raku
#u# http://rosettacode.org/wiki/Pig_the_dice_game/Player
#c# 2016-06-11 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# new-disp 'srand' shift
#n# double-call to 'srand' in hope of getting stable output

my @res;

my $games = @*ARGS ?? (shift @*ARGS) !! 3; #100;

constant DIE = 1 .. 6;
constant GOAL = 100;

class player {
    has $.score    is rw = 0;
    has $.ante     is rw;
    has $.rolls    is rw;
    has &.strategy is rw = sub { False }; # default, always roll again

    method turn {
        my $done_turn = False;
        $.rolls = 0;
        $.ante  = 0;
        repeat {
            my $r = DIE.roll; #$out.say: "r: $r";
            given $r {
                $.rolls++;
                when 1 {
                    $.ante = 0;
                    $done_turn = True;
                }
                when 2..* {
                    $.ante += $_;
                }
            }
            $done_turn = True if $.score + $.ante >= GOAL or (&.strategy)();
        } until $done_turn;
        $.score += $.ante;
    }
}

my @players;

# default, go-for-broke, always roll again
@players[0] = player.new;

# try to roll 5 times but no more per turn
@players[1] = player.new( strategy => sub { @players[1].rolls >= 5 } );

# try to accumulate at least 20 points per turn
@players[2] = player.new( strategy => sub { @players[2].ante > 20 } );

# random but 90% chance of rolling again
@players[3] = player.new( strategy => sub { rand < .1 } );

# random but more conservative as approaches goal
@players[4] = player.new( strategy => sub { rand < ( GOAL - @players[4].score ) Ã— .6 / GOAL } );

my @wins = 0 xx @players;

for ^ $games {
srand 1;
say my @x = DIE.roll xx 10;
srand 123456;
    my $player = -1;
    repeat {
        $player++;
        @players[$player % @players].turn;
    } until @players[$player % @players].score >= GOAL;

    @wins[$player % @players]++;

    @res.push: join " ", @players>>.score;
    @players[$_].score = 0 for ^@players; # reset scores for next game
}

@res.push: "\nSCORES: for $games games";
@res.push: join " ", @wins;

say my $result = @res.join: "\n";

my $moar = q:to/END/;
0 86 104 81 17
0 94 100 46 44
0 94 100 46 44

SCORES: for 3 games
0 0 3 0 0
END

my $moar-blead = q:to/END/;
0 40 103 33 25
0 75 103 65 36
0 75 103 65 36

SCORES: for 3 games
0 0 3 0 0
END

use Test;
is @res.join("\n"), chomp qx/uname -a/ ~~ /'Mac-Pro'/ ?? $moar !! $moar-blead;
