#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Partial_function_application
#c# 2016-06-11 <RC
#m# MOAR: OK
#j#  JVM: OK

my @res;

# All Code objects have the .assuming method, which partially applies its
# arguments. For both type safety reasons and parsing sanity reasons we do
# not believe in implicit partial application by leaving out arguments. Also,
# people can understand "assuming" without being steeped in FP culture.

sub fs ( Code $f, @s ) { @s.map: { .$f } }

sub f1 ( $n ) { $n Ã—  2 }
sub f2 ( $n ) { $n ** 2 }

my &fsf1 = &fs.assuming(&f1);  # := not needed
my &fsf2 = &fs.assuming(&f2);  #      "

for [1..3], [2, 4 ... 8] X &fsf1, &fsf2 -> ($s, $f) {
    @res.push: $f.($s);
}
.say for @res;

my $ref = qq:to/END/;
2 4 6
1 4 9
4 8 12 16
4 16 36 64
END

use Test;
is @res.join("\n"), chomp $ref;
