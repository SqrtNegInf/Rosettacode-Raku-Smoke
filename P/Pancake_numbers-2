#!/usr/bin/env raku
#u# https://www.rosettacode.org/wiki/Pancake_numbers
#c# 2024-09-01 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# Maximum number of flips plus examples using exhaustive search

my @res;

sub pancake(\n) {
   my @goalStack = (my \numStacks = $ = 1)..n ; 
   my %newStacks = my %stacks = @goalStack.Str, 0 ;
   for 1..1000 -> \k { 
      my %nextStacks = (); 
      for %newStacks.keysÂ».split(' ') X 2..n -> (@arr, \pos) {
         given flat @arr[0..^pos].reverse, @arr[pos..*-1] {
            %nextStacks{$_.Str} = k unless %stacks{$_.Str}:exists
         }
      }
      %stacks ,= (%newStacks = %nextStacks);
      my $perms    = %stacks.elems;
      my %inverted = %stacks.antipairs;      # this causes loss on examples 
      my \max_key  = %inverted.keys.max;     # but not critical for our purpose
      $perms == numStacks ?? return %inverted{max_key}, k-1 !! numStacks=$perms
   }
   return '', 0
}

@res.push: "The maximum number of flips to sort a given number of elements is:";
for 1..7 -> $j { given pancake($j) { @res.push: "pancake($j) = $_[1]" }}
#for 1..9 -> $j { given pancake($j) { @res.push: "pancake($j) = $_[1] example: $_[0]" }}

.say for @res;

my $ref = q:to/END/;
The maximum number of flips to sort a given number of elements is:
pancake(1) = 0
pancake(2) = 1
pancake(3) = 3
pancake(4) = 4
pancake(5) = 5
pancake(6) = 7
pancake(7) = 8
END

use Test;
is @res.join("\n"), chomp $ref;
