#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Polymorphism
#c# 2015-11-30 <>RC, 2020-08-26 >RC
#m# MOAR: OK
#j#  JVM: OK

# All appropriate constructors, initializers, accessors, and destructors are provided by default, 
# but may be explicitly declared for flexibility.
# To create only readonly accessors for better encapsulation, leave out all the "is rw" traits.
# Here we demonstrate that accessors can behave like variables and may be assigned.

class Point {
    has Real $.x is rw = 0;
    has Real $.y is rw = 0;
    method Str { $ }
}

class Circle {
    has Point $.p is rw = Point.new;
    has Real $.r is rw = 0;
    method Str { $ }
}

my $c = Circle.new(p => Point.new(x => 1, y => 2), r => 3);
say $c;
#$c.p.x = (-10..10).pick;
#$c.p.y = (-10..10).pick;
#$c.r   = (0..10).pick;
$c.p.x = 42;
$c.p.y = 47;
$c.r   =  Ï€;
say $c;

use Test;
is $c.gist.lc, 'circle.new(p => point.new(x => 42, y => 47), r => 3.141592653589793e0)';
