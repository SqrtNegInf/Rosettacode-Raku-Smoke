#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Probabilistic_choice
#c# 2016-05-08 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2023-01-29 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

constant TRIALS = 1e5;

constant @event = <aleph beth gimel daleth he waw zayin heth>;

constant @P = flat (1 X/ 5 .. 11), 1759/27720;
constant @cP = [\+] @P;

my @results;
@results[ @cP.first: { $_ > once $rng.next-rat }, :k ]++ xx TRIALS;

my @res;
say  'Event    Occurred Expected  Difference';
for ^@results {
    my ($occurred, $expected) = @results[$_], @P[$_] Ã— TRIALS;
    @res.push: sprintf "%-9s%8.0f%9.1f%12.1f",
            @event[$_],
                $occurred,
                     $expected,
                          abs $occurred - $expected;
}

.say for @res;

my $ref = qq:to/END/;
aleph       20182  20000.0       182.0
beth        16696  16666.7        29.3
gimel       14331  14285.7        45.3
daleth      12516  12500.0        16.0
he          10954  11111.1       157.1
waw          9926  10000.0        74.0
zayin        9048   9090.9        42.9
heth         6347   6345.6         1.4
END

use Test;
is @res.join("\n"), chomp $ref;
