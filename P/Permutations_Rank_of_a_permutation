#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Permutations/Rank_of_a_permutation
#c# 2016-05-21 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# don't test with high limits, slow...
#n# 2023-01-09 replace call to built-in 'rand' for output stability

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub pick-all (@a is copy) {
    for 1 ..^ @a -> $n {
        my $k = floor $n × $rng.next-rat;
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

#sub rank2inv ( $rank, $n = * ) { $rank.polymod( 1 ..^ $n ) }  # what exactly is the point of 'n = *'? 
sub rank2inv ( $rank, $n ) { $rank.polymod( 1 ..^ $n ) }
sub inv2rank ( @inv )      { [+] @inv Z× [\×] 1, 1, * + 1 … * }

sub inv2perm ( @inv, @items is copy = ^@inv.elems ) {
    my @perm;
    for @inv.reverse -> $i {
        @perm.append: @items.splice: $i, 1
    }
    @perm;
}

sub perm2inv ( @perm ) {            # not in linear time 
    (
        { @perm[++$ .. *].grep( * < $^cur ).elems } for @perm;  
    ).reverse;
}    

for ^6 {
    my @row.push: $^rank;
    for ( *.&rank2inv(3) , &inv2perm, &perm2inv, &inv2rank )  -> &code {
        @row.push: code( @row[*-1] )
    }
    @res.push: @row.gist;
}

my $perms =  4;
my $n     =  8;

@res.push: 'Via BigInt rank';
#for ( ( ^([×] 1 .. $n) ).pick($perms) ) {
for ( ( ^([×] 1 .. $n) ).&pick-all.head($perms) ) {
    @res.push: ($^rank.&rank2inv($n).&inv2perm).gist; 
};

@res.push: 'Via inversion vectors';
for ( { my $i=0;  inv2perm floor((^++$i)×$rng.next-rat) xx $n } … *  ).unique( with => &[eqv] ).[^$perms] {
    @res.push: $_.gist;
};

@res.push: 'Via Raku method pick';
for ( { [(^$n).&pick-all] } … * ).unique( with => &[eqv] ).head($perms) {
    @res.push: $_.gist;
};

.say for @res;

my $ref = qq:to/END/;
[0 (0 0 0) [0 1 2] (0 0 0) 0]
[1 (0 1 0) [0 2 1] (0 1 0) 1]
[2 (0 0 1) [1 0 2] (0 0 1) 2]
[3 (0 1 1) [1 2 0] (0 1 1) 3]
[4 (0 0 2) [2 0 1] (0 0 2) 4]
[5 (0 1 2) [2 1 0] (0 1 2) 5]
Via BigInt rank
[5 4 2 3 6 0 7 1]
[5 3 0 6 4 1 7 2]
[4 1 3 7 6 0 2 5]
[7 2 1 0 3 4 6 5]
Via inversion vectors
[4 6 5 2 1 7 3]
[3 6 1 7 2 5 4]
[4 1 5 6 3 7 2]
[1 6 7 4 5 3 2]
Via Raku method pick
[2 0 7 4 5 6 1 3]
[2 5 7 0 3 4 1 6]
[4 6 3 5 1 7 2 0]
[1 7 0 5 3 6 2 4]
END

use Test;
is @res.join("\n"), chomp $ref;
