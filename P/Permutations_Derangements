#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Permutations/Derangements
#c# 2018-04-05 <RC, 2018-04-05 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# substantial change from the previous version
#n# eqv instead of == so that the derangements() function also works with any set of arbitrary objects (eg. strings, lists, etc.)

my @res;

sub derangements(@l) {
    @l.permutations.grep(-> @p { none(@p Zeqv @l) })
}

sub prefix:<!>(Int $n) {
    (1, 0, 1, -> $a, $b { ($++ + 2) Ã— ($b + $a) } ... *)[$n]
}

@res.push: 'derangements([1, 2, 3, 4])';
@res.push: derangements([1, 2, 3, 4]).gist;

@res.push: 'n == !n == derangements(^n).elems';
for 0 .. 8 -> $n {
    @res.push: "!$n == { !$n } == { derangements(^$n).elems }"
}
.say for @res;

my $ref = qq:to/END/;
derangements([1, 2, 3, 4])
((2 1 4 3) (2 3 4 1) (2 4 1 3) (3 1 4 2) (3 4 1 2) (3 4 2 1) (4 1 2 3) (4 3 1 2) (4 3 2 1))
n == !n == derangements(^n).elems
!0 == 1 == 1
!1 == 0 == 0
!2 == 1 == 1
!3 == 2 == 2
!4 == 9 == 9
!5 == 44 == 44
!6 == 265 == 265
!7 == 1854 == 1854
!8 == 14833 == 14833
END
#!9 == 133496 == 133496

use Test;
is @res.join("\n"), chomp $ref;
