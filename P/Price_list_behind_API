#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Price_list_behind_API
#c# 2021-02-08 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# reduced everything by factor of 10, now has orphan group at high end (with Moar)
#n# 2023-01-28 replace call to built-in 'rand' for output stability

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

#my \minDelta = 1;

sub getMaxPrice { @_.max }

sub getPRangeCount(@prices,\min,\max) { +@prices.grep: min ≤ * ≤ max } # '+' not required, but maybe useful to reader

sub get500(@prices, $min, $max is copy, \n) {
   my $count = getPRangeCount(@prices, $min, $max);
   my $delta = ($max - $min) / 2;
   while $count != n && $delta ≥ 1/2 { #minDelta/2 {
      $count > n ?? ($max -= $delta) !! ($max += $delta);
      $count = getPRangeCount(@prices, $min, $max); 
      $delta /= 2;
   }
   $max, $count
}

sub getAll500(@prices, \min, \max, \n) {
   my ( $pmax, $pcount ) = get500(@prices, min, max, n);
   my @results = [ min, $pmax, $pcount ],;      # trailing comma looks odd, but suffices
   #my @results = ([ min, $pmax, $pcount ],);   # can also enclose in () or []
   while $pmax < max {
      my $pmin = $pmax + 1;
      ( $pmax, $pcount ) = get500(@prices, $pmin, max, n);
      $pcount == 0 and note "Price list from $pmin has too many duplicates.";
      @results.push: [ $pmin, $pmax, $pcount ];
   } 
   @results
} 

my $numPrices = 9999; #(9900..10101).roll;
#my \maxPrice  = 1e4;
my @prices    = (1..$numPrices+1)[$numPrices * $rng.next-rat] xx $numPrices ;

my $actualMax = getMaxPrice(@prices);
@res.push: "Using $numPrices items with prices from 0 to $actualMax:";

my @results = getAll500(@prices, 0, $actualMax, 500);
@res.push: "Split into " ~ +@results ~ " bins of approx 500 elements:";

for @results -> @row {
   my ($min,$max,$subtotal) = @row;
   $max = $actualMax if $max > $actualMax ;
   @res.push: sprintf "  From %6d to %6d with %4d items", $min, $max, $subtotal 
}

.say for @res;

my $ref = q:to/END/;
Using 9999 items with prices from 0 to 9999:
Split into 20 bins of approx 500 elements:
  From      0 to    514 with  503 items
  From    515 to   1017 with  500 items
  From   1018 to   1498 with  498 items
  From   1499 to   2056 with  501 items
  From   2057 to   2568 with  498 items
  From   2569 to   3080 with  500 items
  From   3081 to   3570 with  498 items
  From   3571 to   4021 with  501 items
  From   4022 to   4536 with  500 items
  From   4537 to   5001 with  500 items
  From   5002 to   5524 with  500 items
  From   5525 to   6045 with  500 items
  From   6046 to   6543 with  499 items
  From   6544 to   7055 with  500 items
  From   7056 to   7559 with  500 items
  From   7560 to   8039 with  499 items
  From   8040 to   8542 with  498 items
  From   8543 to   9020 with  499 items
  From   9021 to   9543 with  500 items
  From   9544 to   9999 with  469 items
END

use Test;
is @res.join("\n"), chomp $ref;
