#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Price_list_behind_API
#c# 2021-02-08 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# reduced everything by factor of 10, now has orphan group at high end (with Moar)
#n# new-disp 'srand' shift

srand 123456;

my @res;

#my \minDelta = 1;

sub getMaxPrice { @_.max }

sub getPRangeCount(@prices,\min,\max) { +@prices.grep: min ≤ * ≤ max } # '+' not required, but maybe useful to reader

sub get500(@prices, $min, $max is copy, \n) {
   my $count = getPRangeCount(@prices, $min, $max);
   my $delta = ($max - $min) / 2;
   while $count != n && $delta ≥ 1/2 { #minDelta/2 {
      $count > n ?? ($max -= $delta) !! ($max += $delta);
      $count = getPRangeCount(@prices, $min, $max); 
      $delta /= 2;
   }
   $max, $count
}

sub getAll500(@prices, \min, \max, \n) {
   my ( $pmax, $pcount ) = get500(@prices, min, max, n);
   my @results = [ min, $pmax, $pcount ],;      # trailing comma looks odd, but suffices
   #my @results = ([ min, $pmax, $pcount ],);   # can also enclose in () or []
   while $pmax < max {
      my $pmin = $pmax + 1;
      ( $pmax, $pcount ) = get500(@prices, $pmin, max, n);
      $pcount == 0 and note "Price list from $pmin has too many duplicates.";
      @results.push: [ $pmin, $pmax, $pcount ];
   } 
   @results
} 

my $numPrices = (9900..10101).roll;
#my \maxPrice  = 1e4;
my @prices    = (1..$numPrices+1).roll xx $numPrices ;

my $actualMax = getMaxPrice(@prices);
@res.push: "Using $numPrices items with prices from 0 to $actualMax:";

my @results = getAll500(@prices, 0, $actualMax, 500);
@res.push: "Split into " ~ +@results ~ " bins of approx 500 elements:";

for @results -> @row {
   my ($min,$max,$subtotal) = @row;
   $max = $actualMax if $max > $actualMax ;
   @res.push: sprintf "  From %6d to %6d with %4d items", $min, $max, $subtotal 
}

.say for @res;

my $moar-terminal = q:to/END/;
Using 10027 items with prices from 0 to 10028:
Split into 21 bins of approx 500 elements:
  From      0 to    516 with  500 items
  From    517 to    999 with  499 items
  From   1000 to   1520 with  500 items
  From   1521 to   2009 with  501 items
  From   2010 to   2528 with  500 items
  From   2529 to   3025 with  500 items
  From   3026 to   3549 with  500 items
  From   3550 to   4088 with  500 items
  From   4089 to   4589 with  501 items
  From   4590 to   5069 with  499 items
  From   5070 to   5571 with  500 items
  From   5572 to   6060 with  500 items
  From   6061 to   6543 with  500 items
  From   6544 to   7089 with  501 items
  From   7090 to   7572 with  500 items
  From   7573 to   8048 with  500 items
  From   8049 to   8559 with  500 items
  From   8560 to   9052 with  497 items
  From   9053 to   9550 with  500 items
  From   9551 to  10025 with  501 items
  From  10026 to  10028 with    4 items
END

my $moar-cronjob = q:to/END/;
Using 9996 items with prices from 0 to 9995:
Split into 20 bins of approx 500 elements:
  From      0 to    491 with  502 items
  From    492 to    956 with  499 items
  From    957 to   1439 with  500 items
  From   1440 to   1942 with  500 items
  From   1943 to   2454 with  500 items
  From   2455 to   2973 with  501 items
  From   2974 to   3450 with  500 items
  From   3451 to   3941 with  500 items
  From   3942 to   4429 with  501 items
  From   4430 to   4922 with  500 items
  From   4923 to   5437 with  499 items
  From   5438 to   5945 with  500 items
  From   5946 to   6482 with  502 items
  From   6483 to   6958 with  500 items
  From   6959 to   7461 with  499 items
  From   7462 to   7957 with  500 items
  From   7958 to   8471 with  500 items
  From   8472 to   9001 with  500 items
  From   9002 to   9553 with  500 items
  From   9554 to   9995 with  464 items
END

my $jvm = q:to/END/;
Using 9939 items with prices from 0 to 9940:
Split into 20 bins of approx 500 elements:
  From      0 to    459 with  500 items
  From    460 to    988 with  500 items
  From    989 to   1480 with  500 items
  From   1481 to   1949 with  500 items
  From   1950 to   2457 with  501 items
  From   2458 to   2981 with  500 items
  From   2982 to   3443 with  500 items
  From   3444 to   3946 with  500 items
  From   3947 to   4453 with  500 items
  From   4454 to   4969 with  500 items
  From   4970 to   5472 with  500 items
  From   5473 to   5971 with  500 items
  From   5972 to   6492 with  501 items
  From   6493 to   6995 with  499 items
  From   6996 to   7496 with  502 items
  From   7497 to   7973 with  500 items
  From   7974 to   8486 with  500 items
  From   8487 to   8997 with  502 items
  From   8998 to   9502 with  500 items
  From   9503 to   9940 with  415 items
END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
