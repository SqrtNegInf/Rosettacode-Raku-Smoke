#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Palindromic_primes_with_alternating_digits
#t# inprogress
#c# 2021-12-11 NOT ON RC
#m# MOAR: OK
#j# JVM:  OK
#n# essentially 'smoothly undulating palindromic primes': a(ba){1,}, (but allowing a == b)
#n# 3,5,...1501:  564.97s user 7.89s system 
#n#               536.58s user 8.57s system
#n#     "      :  537.64s user 7.62s system 91%  cpu 9:55.11 total # .hyper inner loop
#n#     "      :  491.13s user 6.86s system 281% cpu 2:56.60 total # .hyper outer loop
#n# b=0 only once, never a=7, b=6 (proved) but 3/4, 7/1?
#n# 18181 is a 'SUPER' prime: (smoothly undulating|strobogrammatic unlucky) palindromic emirp-adjacent rotatable|reflectable
#n# (A345905 Primes p such that 11*p is the concatenation of an emirp and its reverse)
#n# (A178654 Palprimes of the form (q//R(q))/11 where q is an emirp, R() denotes digit-reversal and // concatenation)

use experimental :cached; # definitely helps

sub   gen-SUP         ($a, $b, $m)   { ("$a$b"Ã—10**$m - "$b$a")/99 }
sub   is-SUP          ($n)           { $n eq $n.flip and [==] $n.comb.rotor(2=>-1).map({(.[1]-.[0]).abs}) }
multi is-SUPP         ($n) is cached { is-SUP $n and $n.is-prime }
multi is-SUPP-nocache ($n)           { is-SUP $n and $n.is-prime }  # for use with hyper/race
multi is-SUPP         ($n where so 1==*.comb.all) {  $n.is-prime }  # a == b == 1

multi is-SUPP-state   ($n) { 
    state %abm;
    return True if is-SUP $n and defined %abm{join ':',$n.comb[0,1]};
    return False unless is-SUP $n and $n.is-prime;
    %abm{join ':',$n.comb[0,1]} = $n.chars;
#dd %abm; sleep 1;
    True;
}

sub is-SUPP-with-docs ( $n ) { [and] 
  #`{ palindromic }  $n eq $n.flip, 
  #`{ undulating  }  ([==] $n.comb.rotor(2=>-1).map({(.[1]-.[0]).abs})),  # smoothly!
  #`{ prime       }  $n.is-prime
}

say 'no-op right now';
exit;

(3,5 ... 1501).hyper.map: -> $m {
  for <1 3 7 9> X ^10 -> ($a,$b) {
    next if ($b == 0 and $m > 3) or ($a == $b and $a > 1); # move into is-SUPP?
    sink is-SUPP-state gen-SUP $a, $b, $m
}
print "\n";

# A193419     Numbers n such that 4n+3 is a palindromic prime.
my ($a,$b) = 1, 8;
say "a=$a, b=$b, m=3 ==> 181, and 3+4*181 yields { 3+4*181 }, which breaks down as a={ (3+4*181).comb[0,1].join(', b=')}, m=3";
say '   m SUP  SUPP';
say $_.comb.elems.fmt('%4d') ~ ' ' ~ is-SUP($_) ~ ' ' ~ is-SUPP($_) for map { 3 + 4 * gen-SUP($a,$b,$_)}, <3,5 ... 1501>;
#say $_.comb.elems.fmt('%4d') ~ ' ' ~ is-SUP($_) ~ ' ' ~ is-SUPP($_) for map { 3 + 4 * gen-SUP($a,$b,$_)}, <3 5 77 163 1479 3657 4573>;# 8315
exit;

#(<1 3 7 9> X ^10 X (3,5 ... 15)).map: -> ($a,$b,$m) {
((3,5 ... 15) X <1 3 7 9> X ^10).map: -> ($m,$a,$b) {
    next if ($b == 0 and $m > 3) or ($a == $b and $a > 1); # move into is-SUPP?
    #say "$m $a $b" if is-SUPP gen-SUP $a, $b, $m
    say "$m $a $b" if is-SUPP gen-SUP $a, $b, $m
}
exit;

(3,5 ... 1501).hyper.map: -> $m {
  for <1 3 7 9> X ^10 -> ($a,$b) {
    next if ($b == 0 and $m > 3) or ($a == $b and $a > 1); # move into is-SUPP?
    #so ($a,$b) eq (3,4)|(7,1)|(7,6); # 'eqv' not required? In any case, just begging the question about gaps
    say "$m $a $b" if is-SUPP-nocache gen-SUP $a, $b, $m;
  }
}
exit;

# a=7, b=6 will never yield a SUPP
#my ($a,$b) = 7, 6;
#say [and] map {so ($a~$b)x$_ %% 3|7|13 ~ $a}, 1..10;
exit;

#say is-SUPP gen-SUP(1,1,$_) for <2 3 4 5 19 23 25 317 1031>; exit;

my @mgood = <3 5 77 163 1479>; # 3657 4573 8315>;
my @mbad  = <3 5 77 163 1477>; # 3657 4573 8315>;
say [and] map {is-SUPP gen-SUP 1, 8, $_}, @mgood; # all good
say [and] map {is-SUPP gen-SUP 1, 8, $_}, @mbad;  # bad apple in there
exit;

#say is-SUPP($_) ~ ' ' ~ .comb.elems for map { gen-SUP 1, 8, $_ }, <3 5 77 163 1479 3657 4573 8315>;

=finish 

#n# http://www.worldofnumbers.com/undulat.htm
#n# So related to huge number of OEIS entries: A032758 A059758 A242541
#n# or in degenerate case of a=b, one digit, for lengths: 19, 23, 317, 1031 (the repunit primes, as per A004023)
#n# b=0 only once, never 3/4, 7/1, 7/6: 
#n# to-do: instead of listing, build table of generator-pair frequencies

# (75*10**41657-57)/99
# (31*10**43869-13)/99
# (15*10**44653-51)/99
# (12*10**46499-21)/99
# (79*10**51663-97)/99 .
# (98*10**52931-89)/99 .
# (72*10**53847-27)/99 .
# (79*10**66447-97)/99 .
# (18*10**66657-81)/99 .
# (75*10**72941-57)/99 .
# (98*10**88595-89)/99 .
# (38*10**91997-83)/99 .
# (94*10**92981-49)/99 !

my $ref = <<'EOD';
3 1 0
3 1 3
3 1 5
3 1 8
3 1 9
3 3 1
3 3 5
3 3 7
3 3 8
3 7 2
3 7 5
3 7 8
3 7 9
3 9 1
3 9 2
5 1 8
5 3 2
5 3 5
5 7 2
5 7 4
5 7 8
5 9 4
5 9 5
7 1 2
7 1 6
9 3 2
9 3 8
9 7 2
9 9 1
9 9 2
9 9 7
9 9 8
11 1 2
11 1 4
11 3 2
11 9 1
15 1 5
15 3 8
15 7 3
EOD

18181 wins a prize for appearing in 80+ OEIS entries (strobogrammatic, really?)

101 131 151 181 191 313 353 373 383 727 757 787 797 919 929
18181 32323 35353 72727 74747 78787 94949 95959
1212121 1616161
323232323 383838383 727272727 919191919 929292929 979797979 989898989
12121212121 14141414141 32323232323 91919191919
151515151515151 383838383838383 737373737373737

