#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Parallel_calculations
#c# 2017-10-27 <RC, 2018-02-28 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# older version of task (unlike version on RC) shows wall-clock benefit of concurrency
#n# 2023-01-15 use .hyper not .race

srand 123456;

my @nums = (1_000_000 .. 100_000_000).pick: 10000;
#my \factories = @nums.map: *.&prime-factors; # slowest way to run
my \factories = @nums.hyper.map: *.&prime-factors.cache; # does .cache do anything here?

#say my $gmf1 = (max (factories»[0] »=>« @nums)).value;
 say my $gmf2 = (factories»[0] »=>« @nums).reduce(&max).value;
#say my $gmf3 = (factories»[0] »=>« @nums).reduce(* max *).value;

sub prime-factors ( Int $n where * > 0 ) {
    return $n if $n.is-prime;
    return [] if $n == 1;
    my $factor = find-factor( $n );
    sort flat prime-factors( $factor ), prime-factors( $n div $factor );
}

sub find-factor ( Int $n, $constant = 1 ) {
    my ($x, $rho, $factor) = 2, 1, 1;
    while $factor == 1 {
        $rho ×= 2;
        my $fixed = $x;
        for ^$rho {
            $x = ( $x × $x + $constant ) % $n;
            $factor = ( $x - $fixed ) gcd $n;
            last if 1 < $factor;
        }
    }
    $factor = find-factor( $n, $constant + 1 ) if $n == $factor;
    $factor;
}

use Test;
#is $gmf1, 99518483;
 is $gmf2, 99518483;
#is $gmf3, 99518483;
