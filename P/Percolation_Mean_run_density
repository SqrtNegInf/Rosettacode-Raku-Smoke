#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Percolation/Mean_run_density
#c# 2016-06-11 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2023-01-13 replace call to built-in 'rand' for output stability

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub R($n, $p) { [+] (($rng.next-rat < $p) xx $n).squish }

say 't= ', constant t = 100;

for .1, .3 ... .9 -> $p {
    @res.push: "p= $p, K(p)= {$pÃ—(1-$p)}";
    for 10, 100, 1000 -> $n {
	@res.push: sprintf "  R(%6d, p)= %f", $n, t R/ [+] R($n, $p)/$n xx t
    }
}

.say for @res;

my $ref = qq:to/END/;
p= 0.1, K(p)= 0.09
  R(    10, p)= 0.105000
  R(   100, p)= 0.088500
  R(  1000, p)= 0.090290
p= 0.3, K(p)= 0.21
  R(    10, p)= 0.226000
  R(   100, p)= 0.213400
  R(  1000, p)= 0.210570
p= 0.5, K(p)= 0.25
  R(    10, p)= 0.257000
  R(   100, p)= 0.253000
  R(  1000, p)= 0.250970
p= 0.7, K(p)= 0.21
  R(    10, p)= 0.250000
  R(   100, p)= 0.214700
  R(  1000, p)= 0.210090
p= 0.9, K(p)= 0.09
  R(    10, p)= 0.175000
  R(   100, p)= 0.097700
  R(  1000, p)= 0.091100
END

use Test;
is @res.join("\n"), chomp $ref;
