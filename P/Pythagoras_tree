#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Pythagoras_tree
#c# 2016-08-17 <RC
#t# graphical
#m# MOAR: OK
#j#  JVM: OK
#f# RC file: pythagoras_tree.svg

# We'll generate a SVG image.

my $out = open('run/pythagoras_tree.svg', :w);

class Square {
    has Complex ($.position, $.edge);
    method size { $!edge.abs }
    method svg-polygon {
	qq[<polygon points="{join ' ', map
	{ ($!position + $_ × $!edge).reals».fmt("%0.2f").join(',') }, # DH change for testing only
	0, 1, 1+1i, 1i}" style="fill:lime;stroke=black" />]
    }
    method left-child {
	self.new:
	position => $!position + i×$!edge,
	edge => sqrt(2)/2×cis(π/4)×$!edge;
    }
    method right-child {
	self.new:
	position => $!position + i×$!edge + self.left-child.edge,
	edge => sqrt(2)/2×cis(-π/4)×$!edge;
    }
}

#BEGIN say '<svg width="500" height="500" xmlns="http://www.w3.org/2000/svg">';
$out.say: '<svg width="500" height="500" xmlns="http://www.w3.org/2000/svg">';
END  { $out.say: '</svg>'; $out.close }

sub tree(Square $s, $level = 0) {
    return if $level > 8;
    $out.say: $s.svg-polygon;
    tree($s.left-child, $level+1);
    tree($s.right-child, $level+1);
}

tree Square.new: :position(250+0i), :edge(60+0i);
