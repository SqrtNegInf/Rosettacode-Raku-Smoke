#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Parallel_calculations
#c# 2017-10-25 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# over 3x speed-up over one-at-a-time method

srand 123456;

#Assuming that factors is defined exactly as in the prime decomposition task:

my @nums = (1_000_000 .. 100_000_000).pick: 10000;

my \factories = @nums.race(:batch(@nums / 32)).map: *.&prime-factors.cache;
#my \factories = @nums.map: *.&prime-factors; # one-at-time / slow

my $gmf = (factories»[0] »=>« @nums).reduce(&max).value;
say $gmf;

sub prime-factors ( Int $n where * > 0 ) {
    return $n if $n.is-prime;
    return [] if $n == 1;
    my $factor = find-factor( $n );
    sort flat prime-factors( $factor ), prime-factors( $n div $factor );
}

sub find-factor ( Int $n, $constant = 1 ) {
    my $x      = 2;
    my $rho    = 1;
    my $factor = 1;
    while $factor == 1 {
        $rho *= 2;
        my $fixed = $x;
        for ^$rho {
            $x = ( $x * $x + $constant ) % $n;
            $factor = ( $x - $fixed ) gcd $n;
            last if 1 < $factor;
        }
    }
    $factor = find-factor( $n, $constant + 1 ) if $n == $factor;
    $factor;
}

#`{
The second line takes the list of numbers and converts then to a RaceSeq that is stored in a raw variable. Any RaceSeq overloads map and grep to convert and pick values in worker threads. The runtime will pick the number of OS-level threads and assign worker threads to them while avoiding stalling in any part of the program. A RaceSeq is lazy, so the computation of values will happen in chunks as they are requested in the third line.
Beside RaceSeq and its in order equivalent HyperSeq, Rakudo supports primitive threads, locks and highlevel promises. Using channels and supplies values can be move threadsafe from one thread to another. A react-block can be used as a central hub for message passing.
In Raku most errors are bottled up Exceptions inside Failure objects that remember where they are created and thrown when used. This is useful to pass errors from one thread to another without losing file and linennumber of the source file that caused the error.
In the future hyper operators, junctions and feeds will be candidates for autothreading.
}


my $ref = qq:to/END/;
END

use Test;
is $gmf, 99911887;
#my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
#is @res.join("\n"), chomp $ref;
