#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Prime_triangle
#c# 2022-04-12 <RC, 2023-02-10 >RC
#m# MOAR: OK
#j#  JVM: BROKEN
#n# OEIS:A036440 Number of ways of arranging row n of the prime pyramid.
#n# 'sample' results vary, so just test totals (and limit testing for speed)
#n# 2023-02-10 add link to OEIS

my @res;

my @count = 0, 0, 1;
my $lock = Lock.new;

say '1 2';
 
for 3..13 -> $n { # ..17
    my @even = (2..^$n).grep: * %% 2;
    my @odd  = (3..^$n).grep: so * % 2;
    @even.permutations.race.map: -> @e {
        next if @e[0] == 8|14; # don't need 'quietly' here
        my $nope = 0;
        for @odd.permutations -> @o {
            quietly next unless (@e[0] + @o[0]).is-prime; # supresses warning about use of 'Nil'
            my @list;
           #for (@list = (flat (roundrobin(@e, @o)), $n)).rotor(2 => -1) {
            for (@list = (| roundrobin(@e, @o, :slip), $n)).rotor(2 => -1) {  # new feature 
                $nope++ and last unless .sum.is-prime;
            }
            unless $nope {
                say '1 ' ~ @list.join: ' ' unless @count[$n];
                $lock.protect({ @count[$n]++ });
            }
            $nope = 0;
        }
    }
}


say "\n" ~ my $result = @count[2..*].join: ' ';

my $ref = qq:to/END/;
1 1 1 1 1 2 4 7 24 80 216 648
END

# 1 1 1 1 1 2 4 7 24 80 216 648 1304 3392 13808 59448

use Test;
is $result, chomp $ref;
