#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Percolation/Mean_cluster_density
#c# 2017-03-11 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# downgraded Unicode names to ASCII
#n# unstable results

srand 123456;

# Works with: Rakudo version 2017.02

my @perc;
my $fill = 'x';

enum Direction <DeadEnd Up Right Down Left>;

my @res;

my $K = perctest(15);
@res.push: $_.fmt("%-2s") for @perc;
@res.push: "𝘱 = 0.5, 𝘕 = 15, 𝘒 = $K";

my $trials = 5;
#for 10, 30, 100, 300, 1000 -> $N {
for 10, 30, 100 -> $N {
    my $K = ( [+] perctest($N) xx $trials ) / $trials;
    @res.push: "𝘱 = 0.5, trials = $trials, 𝘕 = $N, 𝘒 = $K";
}

.say for @res;

sub infix:<deq> ( $a, $b ) { $a.defined && ($a eq $b) }

sub perctest ( $grid ) {
    generate $grid;
    my $block = 1;
    for ^$grid X ^$grid -> ($y, $x) {
        fill( [$x, $y], $block++ ) if @perc[$y; $x] eq $fill
    }
    ($block - 1) / $grid²;
}

sub generate ( $grid ) {
    @perc = ();
    @perc.push: [ ( rand < .5 ?? '.' !! $fill ) xx $grid ] for ^$grid;
}

sub fill ( @cur, $block ) {
    @perc[@cur[1]; @cur[0]] = $block;
    my @stack;
    my $current = @cur;

    loop {
        if my $dir = direction( $current ) {
            @stack.push: $current;
            $current = move $dir, $current, $block
        }
        else {
            return unless @stack;
            $current = @stack.pop
        }
    }

    sub direction( [$x, $y] ) {
        ( Down  if @perc[$y + 1][$x] deq $fill ) ||
        ( Left  if @perc[$y][$x - 1] deq $fill ) ||
        ( Right if @perc[$y][$x + 1] deq $fill ) ||
        ( Up    if @perc[$y - 1][$x] deq $fill ) ||
        DeadEnd
    }

    sub move ( $dir, @cur, $block ) {
        my ( $x, $y ) = @cur;
        given $dir {
            when Up    { @perc[--$y; $x] = $block }
            when Down  { @perc[++$y; $x] = $block }
            when Left  { @perc[$y; --$x] = $block }
            when Right { @perc[$y; ++$x] = $block }
        }
        [$x, $y]
    }
}

my $moar-terminal = qq:to/END/;
.  .  .  .  1  .  .  .  2  .  3  .  .  .  4
2  2  2  2  .  .  2  2  2  .  .  .  5  5  .
2  .  .  2  2  2  2  2  2  .  .  5  5  .  .
2  .  2  2  .  .  .  2  2  .  .  5  5  .  6
.  2  2  2  2  2  .  .  2  .  2  .  .  .  .
.  .  .  2  2  2  2  2  2  2  2  .  7  .  .
.  .  .  2  2  2  .  2  2  .  2  .  .  8  8
.  2  2  .  .  2  2  .  .  9  .  .  .  .  .
.  2  2  2  2  2  2  .  .  9  .  .  .  10 .
.  .  .  2  2  2  .  .  .  9  9  9  .  10 10
2  2  .  2  2  .  .  .  .  9  .  9  .  .  10
2  2  2  2  2  .  9  9  9  9  .  .  11 .  .
.  2  2  2  2  2  .  9  .  .  .  11 11 .  12
.  .  .  2  .  .  13 .  .  .  .  .  11 .  12
2  2  2  2  2  .  13 13 13 .  .  .  .  .  .
𝘱 = 0.5, 𝘕 = 15, 𝘒 = 0.057778
𝘱 = 0.5, trials = 5, 𝘕 = 10, 𝘒 = 0.126
𝘱 = 0.5, trials = 5, 𝘕 = 30, 𝘒 = 0.079111
𝘱 = 0.5, trials = 5, 𝘕 = 100, 𝘒 = 0.0696
END

my $moar-cronjob = qq:to/END/;
.  .  .  .  1  .  .  .  2  .  3  .  .  .  4
2  2  2  2  .  .  2  2  2  .  .  .  5  5  .
2  .  .  2  2  2  2  2  2  .  .  5  5  .  .
2  .  2  2  .  .  .  2  2  .  .  5  5  .  6
.  2  2  2  2  2  .  .  2  .  2  .  .  .  .
.  .  .  2  2  2  2  2  2  2  2  .  7  .  .
.  .  .  2  2  2  .  2  2  .  2  .  .  8  8
.  2  2  .  .  2  2  .  .  9  .  .  .  .  .
.  2  2  2  2  2  2  .  .  9  .  .  .  10 .
.  .  .  2  2  2  .  .  .  9  9  9  .  10 10
2  2  .  2  2  .  .  .  .  9  .  9  .  .  10
2  2  2  2  2  .  9  9  9  9  .  .  11 .  .
.  2  2  2  2  2  .  9  .  .  .  11 11 .  12
.  .  .  2  .  .  13 .  .  .  .  .  11 .  12
2  2  2  2  2  .  13 13 13 .  .  .  .  .  .
𝘱 = 0.5, 𝘕 = 15, 𝘒 = 0.057778
𝘱 = 0.5, trials = 5, 𝘕 = 10, 𝘒 = 0.126
𝘱 = 0.5, trials = 5, 𝘕 = 30, 𝘒 = 0.079111
𝘱 = 0.5, trials = 5, 𝘕 = 100, 𝘒 = 0.0696
END

my $jvm = qq:to/END/;
.  1  .  2  .  2  .  2  2  2  .  .  .  3  . 
.  .  2  2  2  2  2  2  .  .  .  .  4  .  . 
.  .  .  .  .  2  2  2  2  .  .  5  .  .  6 
7  7  7  .  .  2  2  2  2  .  .  .  8  .  . 
.  7  .  .  2  2  .  .  2  .  9  9  .  .  . 
.  7  .  7  .  .  .  2  2  .  .  9  .  .  10
.  7  7  7  .  2  2  2  .  .  .  9  .  11 . 
7  7  7  .  .  .  2  .  .  9  9  9  .  11 11
.  7  .  .  12 .  .  9  9  9  .  .  .  11 11
.  7  .  13 .  .  9  9  .  9  .  9  9  .  . 
7  7  7  .  14 .  9  .  9  9  .  9  9  9  9 
7  7  .  .  .  15 .  .  .  9  9  9  9  9  9 
7  7  7  .  .  .  .  .  9  9  .  9  9  .  9 
.  7  .  16 16 .  17 .  .  9  9  9  .  9  9 
.  7  7  .  16 .  .  .  .  9  .  9  9  9  9 
𝘱 = 0.5, 𝘕 = 15, 𝘒 = 0.075556
𝘱 = 0.5, trials = 5, 𝘕 = 10, 𝘒 = 0.112
𝘱 = 0.5, trials = 5, 𝘕 = 30, 𝘒 = 0.074222
𝘱 = 0.5, trials = 5, 𝘕 = 100, 𝘒 = 0.0703
END

use Test;
my $ref = chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
is @res.join('').subst(/<ws>/, '', :g), $ref.subst(/<ws>/, '', :g);
