#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Bitmap/Write_a_PPM_file
#c# 2015-12-06 <RC
#m# MOAR: BROKEN
#j#  JVM: BROKEN

class Pixel { has UInt ($.R, $.G, $.B) }
class Bitmap {
    has UInt ($.width, $.height);
    has Pixel @!data;

    method fill(Pixel $p) {
        @!data = $p.clone xx ($!width × $!height)
    }
    method pixel(
        $i where ^$!width,
        $j where ^$!height
        --> Pixel
    ) is rw { @!data[$i × $!height + $j] }

    method set-pixel ($i, $j, Pixel $p) {
        self.pixel($i, $j) = $p.clone;
    }
    method get-pixel ($i, $j) returns Pixel {
        self.pixel($i, $j);
    }
}

#Thanks to the rw trait on the pixel method, we don't actually need to define two separate methods, set-pixel and get-pixel, but that is an explicit requirement of the task.  (Beware your presuppositions!  In Raku, accessors only determine identity, not use.  In particular, identity is considered orthogonal to lvalue/rvalue context.)

role PPM {
    method P6 returns Blob {
	"P6\n{self.width} {self.height}\n255\n".encode('ascii')
	~ Blob.new: flat map { .R, .G, .B }, self.data
    }
}
my Bitmap $b = Bitmap.new( width => 125, height => 125) but PPM;
for flat ^$b.height X ^$b.width -> $i, $j {
    $b.pixel($i, $j) = Pixel.new: :R($i×2), :G($j×2), :B(255-$i×2);
}

$*OUT.write: $b.P6;
