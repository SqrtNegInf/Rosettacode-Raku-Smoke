#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Birthday_problem
#c# 2016-08-03 <RC, 2019-10-23 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# ouch, for 2..5: 5755.022u 5223.779s 4:53:17.36 62.3% (which is why just running 2..2 for now)
#n# current approach is to repeatedly 'roll' out groups of birthdays (a memory hog, and too slow to be useful)
#n# would it be faster to build a 'population' and sample it?  code everything into bit-fields?
#n# 2021-03-03 flips between .505 and .506
#n# new-disp 'srand' shift (for the better, to testing 'ok')
#n# 'myRNG' is too slow to use here (need a faster 'shuffle')

srand 123456;

my @res;
my $debug = False;

sub simulation($c) {
my $max-trials = 250_000;
my $min-trials =   5_000;

my $n = floor 47 × ($c-1.5)**1.5; # (cf '0/OEIS-A050256')
my $N = min $max-trials, max $min-trials, 1000 × sqrt $n;

say "starting with n = $n and N = $N" if $debug;

loop {
    my $p;
    if ($c == 2) { $p = 1 - $N R/ ((^365).roll($n) xx $N)>>.unique>>.elems.Bag{$n} } # faster, but only works for $c = 2
    else         { $p = $N R/ elems grep { .elems > 0 }, ((grep { $_>=$c }, values bag (^365).roll($n)) xx $N) }
    #my $p = $N R/ elems ((grep { $_>=$c }, values bag (^365).roll($n)) xx $N).race.grep( *.elems > 0); # no benefit

    return($n, $p) if $p > 0.5;

    $N = min $max-trials, max $min-trials, floor 1000/(0.5-$p)**1.25;
    say "n: $n  p: $p  next N: $N" if $debug;
    $n++;
}

}

if ($debug) {
printf "$_ people in a group of %s share a common birthday. (%.3f)\n", simulation($_) for 2..3; 
exit;
}

@res.push: sprintf "$_ people in a group of %s share a common birthday. (%.3f)", simulation($_) for 2..2;

#`{{
# early exit when $p2 completes, why?
# still doesn't address the fundamental non-performant code
    my (@c2, @c3, @c4, @c5);
    my $p2 = Promise.start( { @c2.push: simulation(2) } );
    my $p3 = Promise.start( { @c3.push: simulation(3) } );
    my $p4 = Promise.start( { @c4.push: simulation(4) } );
#   my $p5 = Promise.start( { @c5 = simulation(5) } );
    await $p2, $p3, $p4; # $p5;
    say join ' ', @c2, @c3, @c4, @c5;
}}

.say for @res;

my $moar = qq:to/END/;
2 people in a group of 23 share a common birthday. (0.506)
END
#2 people in a group of 23 share a common birthday. (0.508) # 2020-12-16 previous value
#3 people in a group of 88 share a common birthday. (0.511)
#4 people in a group of 187 share a common birthday. (0.503)
#5 people in a group of 313 share a common birthday. (0.501)

my $jvm = qq:to/END/;
2 people in a group of 23 share a common birthday. (0.507)
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is @res.join("\n"), chomp $ref;
