#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Barnsley_fern
#c# 2018-03-21 <RC, 2021-12-29 <RC
#t# graphical
#m# MOAR: OK
#j# JVM:  BROKEN
#f# RC file: barnsley-fern.png
#n# 2022-10-30 replace call to built-in 'rand' for output stability

use Image::PNG::Portable;

class splitmix64 {
    has $!state;
    submethod BUILD ( Int :$seed where * >= 0 = 1 ) { $!state = $seed }
    method next-int {
        my $next = $!state = ($!state + 0x9e3779b97f4a7c15) +& (2⁶⁴ - 1);
        $next = ($next +^ ($next +> 30)) × 0xbf58476d1ce4e5b9 +& (2⁶⁴ - 1);
        $next = ($next +^ ($next +> 27)) × 0x94d049bb133111eb +& (2⁶⁴ - 1);
        ($next +^ ($next +> 31)) +& (2⁶⁴ - 1);
    }
    method next-rat { self.next-int / 2⁶⁴ }
}

my $rng = splitmix64.new( :seed(987654321) );

my (\w, \h) = 640, 640;
my ($x, $y) =   0,   0;
my $png = Image::PNG::Portable.new: :width(w), :height(h);

# pseudo-random numbers, middle-square method, simulate built-in 'rand' (with no args)
#sub msq { state $seed = 675248; $seed = $seed² div 1000 mod 1000000; $seed/100_000 }

for ^2e5 {
    my $r = 100 × $rng.next-rat;
   #my $r = 100.rand; # same as 100×rand;
    ($x, $y) = do given $r {
        when  $r <=  1 { (                     0,              0.16 × $y       ) }
        when  $r <=  8 { ( 0.20 × $x - 0.26 × $y,  0.23 × $x + 0.22 × $y + 1.60) }
        when  $r <= 15 { (-0.15 × $x + 0.28 × $y,  0.26 × $x + 0.24 × $y + 0.44) }
        default        { ( 0.85 × $x + 0.04 × $y, -0.04 × $x + 0.85 × $y + 1.60) }
    };
    $png.set((w / 2 + $x × 60).Int, (h - $y × 60).Int, 0, 255, 0);
}

$png.write: 'run/barnsley-fern.png';
