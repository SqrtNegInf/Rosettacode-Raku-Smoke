#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Bioinformatics/Sequence_mutation
#c# 2019-11-26 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2022-12-31 replace call to built-in 'rand' for output stability

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

my @bases = <A C G T>;

# The DNA strand
#my $dna = @bases.roll(200).join;
my $dna ~= @bases[4×$rng.next-rat] for ^200;

# The Task
@res.push: "ORIGINAL DNA STRAND:";
@res.push: pretty $dna;
@res.push: "\nTotal bases: "~ +my $bases = $dna.comb.Bag;
@res.push: $bases.sort( ~*.key ).join: "\n";

@res.push: "\nMUTATED DNA STRAND:";
my $mutate = $dna.&mutate(10);
@res.push: pretty diff $dna, $mutate;
@res.push: "\nTotal bases: "~ +my $mutated = $mutate.comb.Bag;
@res.push: $mutated.sort( ~*.key ).join: "\n";

# Helper subs
sub pretty ($string, $wrap = 50) {
    $string.comb($wrap).map( { sprintf "%8d: %s", $++ × $wrap, $_ } ).join: "\n"
}

sub mutate ($dna is copy, $count = 1) {
   #$dna.substr-rw((^$dna.chars).roll, 1) = @bases.roll for ^$count;
    $dna.substr-rw(((^$dna.chars)×$rng.next-rat).round(1), 1) = @bases[4×$rng.next-rat] for ^$count;
    $dna
}

sub diff ($orig, $repl) {
    ($orig.comb Z $repl.comb).map( -> ($o, $r) { $o eq $r ?? $o !! $r.lc }).join
}

.say for @res;

my $ref = q:to/END/;
ORIGINAL DNA STRAND:
       0: ACGGCTCTGGTACCGTACGTACTAATAAGGTTCCGGCAGCTTACCTACTC
      50: CGACACTTCGGATGCAGGCTAGTACTCGAAAGGTAGAGTAGACCGGTTGC
     100: GTAATGGAGAACTACATGAGACATCGCTATCGTTCAAAGGACCCCTGAGC
     150: CCTTTTTGGCCGTGCCCATGTACACCAGCCGTCCACGGATACAGCCACGA

Total bases: 200
A	50
C	57
G	50
T	43

MUTATED DNA STRAND:
       0: ACGGCTCTGGTACCGTACGTACTgATAAGGTTCCGGCAGCTTACCTACTC
      50: CGACACTcCGGATGCAGGCTAGTACTCGAAAGGTAGAGTAGACCGGTTGC
     100: GTAATcGAGAACTACATGAGACATCGCTATCGTTCAAAGGACCCCTGAGg
     150: CCTTTTTGGtCGTGCCCATGTACACCAGCCGTCCtCGGATACAGCCACGA

Total bases: 200
A	48
C	57
G	51
T	44
END

use Test;
is @res.join("\n"), chomp $ref;
