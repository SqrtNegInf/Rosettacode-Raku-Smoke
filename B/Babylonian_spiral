#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Babylonian_spiral
#c# 2022-05-29 <RC
#m# MOAR: OK
#j# JVM:  OK

my @squareCache;

sub babylonianSpiral (\nsteps) {
    @squareCache = (0..nsteps)>>Â²;
    my @dxys = [[0, 0], [0, 1]];
    my $dsq  = 1;

    for ^(nsteps-2) {
        my (\x,\y) = @dxys[*-1];
        my \theta = y.atan2(x);
        my @candidates;

        until @candidates.Bool {
            $dsq++; 
	        for @squareCache.kv -> \i,\a {
	            last if a > $dsq div 2;
	            for ( $dsq.sqrt.floor+1 ... 0 ) -> \j {
                    last if (a + my \b = @squareCache[j] ) < $dsq;
                    if ((a + b) == $dsq) {
                        @candidates.append: [ [i, j], [-i, j], [i, -j], [-i, -j],
                                            [j, i], [-j, i], [j, -i], [-j, -i] ]
                    }
                }
            }
         }

         sub comparer ($in) { ( theta - $in.[1].atan2: $in.[0] ) % tau }

       @dxys.append: ( @candidates.sort: { comparer($^b) < comparer($^a) } )[0];
   }

   my ($sumx, $sumy);
   return @dxys.map: { ($sumx,$sumy) >>+=<< $_ ; [$sumx,$sumy] } 
}

#say "The first 40 Babylonian spiral points are:\n"
say my $result = babylonianSpiral(40);

my $ref = '0 0 0 1 1 2 3 2 5 1 7 -1 7 -4 6 -7 4 -10 0 -10 -4 -9 -7 -6 -9 -2 -9 3 -8 8 -6 13 -2 17 3 20 9 20 15 19 21 17 26 13 29 7 29 0 28 -7 24 -13 17 -15 10 -12 4 -7 4 1 5 9 7 17 13 23 21 26 28 21 32 13 32 4 31 -5 29 -14 24 -22';

use Test;
is $result, chomp $ref;
