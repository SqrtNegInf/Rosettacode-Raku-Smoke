#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Test_integerness
#c# 2016-09-03 <RC
#m# MOAR: OK
#j#  JVM: OK

# In Raku, all types that implement the Numeric role have a method called narrow, which returns an object with the same value but of the most appropriate type. So we can just test the type of that object. This works even with floats with large exponents, because the Int type supports arbitrarily large integers.

sub is-int ($n) { $n.narrow ~~ Int }

for 25.00000, 24.99999, 25.00001, -2.1e120, -5e-2, Inf, 5.0+0.0i, 5-5i {
    say "{.^name} $_ is{' NOT' if !is-int $_} an integer.";
}

#`{

Rat 25 is an integer.
Rat 24.99999 is NOT an integer.
Rat 25.00001 is NOT an integer.
Num -2.1e+120 is an integer.
Num -0.05 is NOT an integer.
Num Inf is NOT an integer.
Complex 5+0i is an integer.
Complex 5-5i is NOT an integer.

}


#use Test;
#is 1, 1, 'dummy';
