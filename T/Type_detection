#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Type_detection
#c# 2016-06-04 <RC, 2020-08-26 >RC
#m# MOAR: OK
#j#  JVM: OK

# Raku is a dynamic language that has gradual, duck typing. It provides introspection methods through its comprehensive MOP (Meta Object Protocol) making it easy to do type detection, subroutine signatures and multi-dispatch. Raku types have two general flavors: content types and container types. Different container types have varying restrictions on what sort of content they can contain and in return provide specialized methods to operate on those contents. Content types give the compiler hints on how to best handle the information, what storage requirements it may have, what operators will work with it, etc.
# This is really a very broad and kind of hand-wavey overview of Raku types. For much more indepth coverage see Raku Synopsis S02: Bits and Pieces: Built-In Data Types

my @results;

sub type ($t) { 
say $t.raku, "\tis type: ", $t.WHAT;
push @results, $t.WHAT.gist;
}

# some content types
.&type for 1, 2.0, 3e0, 4i, Ï€, Inf, NaN, 'String';

# some primitive container types
.&type for $, [ ], @, { }, %, (5 .. 7), (8 ... 10), /0/, {;}, sub {}, ( );

# undefined things
.&type for Any, Nil;

# user defined types
class my-type { };

my my-type $object;

$object.&type;

my $ref = q:to/END/;
(Int)
(Rat)
(Num)
(Complex)
(Num)
(Num)
(Num)
(Str)
(Any)
(Array)
(Array)
(Hash)
(Hash)
(Range)
(Seq)
(Regex)
(Block)
(Sub)
(List)
(Any)
Nil
(my-type)
END

use Test;
is (join "\n", @results), chomp $ref;
