#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Topswops
#c# 2018-12-01 <RC, 2019-10-16 >RC, 2020-07-19 >RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# OEIS:A000375 shuffle n cards, 1..n. If top card is m, reverse order of top m cards, repeat. a(n): maximal steps before top card is 1.
#n# bumping up to 9 swaps, but 10 still too slow ( > 7 min)
#n# 2019-10-17 concurrency is sometimes not working well?  
#n# 2019-10-18 problem appears to be limited to older MacOS?

sub swops(@a is copy) {
    my int $count = 0;
    until @a[0] == 1 {
        @a[ ^@a[0] ] .= reverse;
        ++$count;
    }
    $count
}

#sub topswops($n) { max (1..$n).permutations.map: &swops }                            # none
sub topswops($n) { max (1..$n).permutations.race.map: &swops }                        # default
#sub topswops($n) { max (1..$n).permutations.race(:20batch).map: &swops }             # batch
#sub topswops($n) { max (1..$n).permutations.race(:8degree).map: &swops }             # degree
#sub topswops($n) { max (1..$n).permutations.race(:8degree, :20batch).map: &swops }   # degbat

my @res.push: "$_ {topswops $_}" for 1 .. 9; #10;

.say for @res;

my $ref = q:to/END/;
1 0
2 1
3 2
4 4
5 7
6 10
7 16
8 22
9 30
END
#10 38

use Test;
is @res.join("\n"), chomp $ref;

#`{

distribution of 'sys' timings for 'default' option over 100 runs:

  0 =============================================================================
 10
 20
 30
 40
 50 =
 60 ==============
 70 =
 80 =======

and the corresponding 'real' timings:

  0
 10
 20
 30 ======================================
 40 =======================================
 50
 60
 70
 80 =
 90 ==============
100 =======

}
