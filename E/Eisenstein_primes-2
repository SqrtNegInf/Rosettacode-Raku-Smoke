#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Eisenstein_primes
#c# 2023-06-18 NOT ON RC
#m# MOAR: OK
#j#  JVM: OK
#n# an attempt to make a lazy/infinite stream 

my \ω = exp 2i × π/3;
#my \ω = (-1 + i×3.sqrt)/2;  # differs only in sign on real zero

sub norm    (@p) { @p[0]² - @p[0]×@p[1] + @p[1]² } 
sub display (@p) { (@p[0] + ω×@p[1]).reals».fmt('%+8.4f').join ~ 'i' }

my @E = lazy gather (0..∞).map: -> \a {
  for 0..a -> \b {
    if 0 == a|b || a == b and (.is-prime and 2 == $_ mod 3 given (a,b).max) {  # no need for .abs
       #(.take for (a,b), (a,-b)) if 0 == a;
        (.take for (a,b), (-a,b)) if 0 == b;
        (.take for (b,a), (-b,a), (b,-a), (-b,-a)) if a == b;
    } else {
        (.take for (b,a), (-b,a), (b,-a), (-b,-a)) if norm((a,b)).is-prime;
        (.take for (a,b), (-a,b), (a,-b), (-a,-b)) if norm((a,b)).is-prime 
    }
  }
}

#say norm(@$_).fmt('%4d') ~ ' | ' ~ (.[0],.[1])>>.fmt('%3d') ~ ' | ' ~ display(@$_) for @E[^200].sort: *.&norm; exit;

my $result = (@E[^136].sort: *.&norm).head(100).map(*.&display).batch(4).join("\n");
#say $result; exit;

my $ref = q:to/END/;                                                        # :   vim-kludge
 +0.0000 +1.7321i  -0.0000 -1.7321i  +1.5000 +0.8660i  -1.5000 -0.8660i
 +2.0000 +0.0000i  -2.0000 +0.0000i  +1.0000 +1.7321i  -1.0000 -1.7321i
 -2.0000 +1.7321i  +2.0000 -1.7321i  -2.5000 +0.8660i  +2.5000 -0.8660i
 -0.5000 +2.5981i  +0.5000 -2.5981i  +2.5000 +0.8660i  -2.5000 -0.8660i
 +0.5000 +2.5981i  -0.5000 -2.5981i  +2.0000 +1.7321i  -2.0000 -1.7321i
 -3.0000 +1.7321i  +3.0000 -1.7321i  -2.5000 +2.5981i  +2.5000 -2.5981i
 -3.5000 +0.8660i  +3.5000 -0.8660i  -1.0000 +3.4641i  +1.0000 -3.4641i
 +3.5000 +0.8660i  -3.5000 -0.8660i  +1.0000 +3.4641i  -1.0000 -3.4641i
 +2.5000 +2.5981i  -2.5000 -2.5981i  -3.5000 +2.5981i  +3.5000 -2.5981i
 -4.0000 +1.7321i  +4.0000 -1.7321i  -0.5000 +4.3301i  +0.5000 -4.3301i
 +4.0000 +1.7321i  -4.0000 -1.7321i  +0.5000 +4.3301i  -0.5000 -4.3301i
 +3.5000 +2.5981i  -3.5000 -2.5981i  -3.0000 +3.4641i  +3.0000 -3.4641i
 -4.5000 +0.8660i  +4.5000 -0.8660i  +5.0000 +0.0000i  -5.0000 +0.0000i
 +2.5000 +4.3301i  -2.5000 -4.3301i  -2.0000 +5.1962i  +2.0000 -5.1962i
 +5.5000 +0.8660i  -5.5000 -0.8660i  +2.0000 +5.1962i  -2.0000 -5.1962i
 +3.5000 +4.3301i  -3.5000 -4.3301i  -5.0000 +3.4641i  +5.0000 -3.4641i
 -5.5000 +2.5981i  +5.5000 -2.5981i  -0.5000 +6.0622i  +0.5000 -6.0622i
 +5.5000 +2.5981i  -5.5000 -2.5981i  +0.5000 +6.0622i  -0.5000 -6.0622i
 +5.0000 +3.4641i  -5.0000 -3.4641i  -4.5000 +4.3301i  +4.5000 -4.3301i
 -6.0000 +1.7321i  +6.0000 -1.7321i  -4.0000 +5.1962i  +4.0000 -5.1962i
 -6.5000 +0.8660i  +6.5000 -0.8660i  -2.5000 +6.0622i  +2.5000 -6.0622i
 +6.5000 +0.8660i  -6.5000 -0.8660i  +2.5000 +6.0622i  -2.5000 -6.0622i
 +4.0000 +5.1962i  -4.0000 -5.1962i  -5.5000 +4.3301i  +5.5000 -4.3301i
 -6.5000 +2.5981i  +6.5000 -2.5981i  -4.5000 +6.0622i  +4.5000 -6.0622i
 -7.5000 +0.8660i  +7.5000 -0.8660i  -0.5000 +7.7942i  +0.5000 -7.7942i
END

use Test;
is $result, chomp $ref;
