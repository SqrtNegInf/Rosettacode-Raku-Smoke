#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Exponentiation_order
#c# 2016-09-03 <RC, 2020-08-30 >RC
#m# MOAR: OK
#j#  JVM: OK

sub demo($x) { say "  $x\t───► ", $x.EVAL }

demo '5**3**2';      # show ** is right associative
demo '(5**3)**2';
demo '5**(3**2)';

demo '[**] 5,3,2';   # reduction form, show only final result
demo '[\**] 5,3,2';  # triangle reduction, show growing results

use Test;
is  (5**3**2)	, '1953125';
is  ((5**3)**2)	, '15625';
is  (5**(3**2))	, '1953125';
is  ([**] 5,3,2)	, '1953125';
is  ([\**] 5,3,2)	, '2 9 1953125';

# Note that the reduction forms automatically go right-to-left because the
# base operator is right-associative. Most other operators are
# left-associative and would automatically reduce left-to-right instead.

# Unicode postfix exponents are supported as well:

demo '(5³)²';
demo '5³²';
is (5³)², '15625';
is 5³², 23283064365386962890625;

# The form without parentheses ends up raising to the 32nd power. Nor are you
# even allowed to parenthesize it the other way: 5(³²) would be a syntax
# error. Despite all that, for programs that do a lot of squaring or cubing,
# the postfix forms can enhance both readability and concision.

# triangular production case works too
is  ([\**] 5,³,²)	, '2 9 1953125';
