#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Exceptions
#c# 2016-02-24 <RC
#m# MOAR: OK
#j#  JVM: OK

use lib 'libtest'; # DH work-around for problems with JVM and Test::Output

# The Raku equivalent to Perl 5's eval {...} is try {...}. A try block by
# default has a CATCH block that handles all fatal exceptions by ignoring
# them. If you define a CATCH block within the try, it replaces the default
# CATCH. It also makes the try keyword redundant, because any block can
# function as a try block if you put a CATCH block within it. The inside of a
# CATCH functions as a switch statement on the current exception.

my &testcode = sub {

try {
    die "Help I'm dying!";
    CATCH {
        when X::AdHoc { note .Str.uc; say "Cough, Cough, Aiee!!" }
        default { note "Unexpected exception, $_!" }
    }
}

say "Yay. I'm alive.";

die "I'm dead.";

say "Arrgh.";

CATCH {
    default { note "No you're not."; say $_.Str; }
}

}

my $out = qq:to/OUT/;
Cough, Cough, Aiee!!
Yay. I'm alive.
I'm dead.
OUT

my $err = qq:to/ERR/;
HELP I'M DYING!
No you're not.
ERR

use Test;
use Test::Output;
say output-from (&testcode);
is stdout-from(&testcode), $out;
is stderr-from(&testcode), $err;
