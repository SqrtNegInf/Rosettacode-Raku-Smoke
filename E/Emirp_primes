#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Emirp_primes
#c# 2016-03-01 <RC, 2016-08-22 <>RC, 2018-11-06 >RC
#m# MOAR: OK
#j#  JVM: BROKEN
#n# not palindromic, a different prime when reversed

use Math::Primesieve;

sub prime-hash (Int $max) {
    my $sieve = Math::Primesieve.new;
    my @primes = $sieve.primes($max);
    @primes.Set;
}

sub MAIN-as-sub ($start, $stop = Nil, $display = <slice>) {
    my $end = $stop // $start; 
    my %primes = prime-hash(100Ã—$end);
    my @emirps = lazy gather for 1 .. * -> $n {
        take $n if %primes{$n} and %primes{$n.flip} and $n != $n.flip
    }

    given $display {
        when 'slice'  { return @emirps[$start-1 .. $end-1] }; 
        when 'values' { 
            my @values = gather for @emirps {
                .take if $start < $_ < $end;
                last if $_> $end 
            }
            return @values
        }
    } 
}

# Run with passed parameters: 1 20
my $a1 = '13 17 31 37 71 73 79 97 107 113 149 157 167 179 199 311 337 347 359 389';

#Run with passed parameters: 7700 8000 values
my $a2 = '7717 7757 7817 7841 7867 7879 7901 7927 7949 7951 7963';

say my $result1 =  MAIN-as-sub(1, 20);
say my $result2 = |MAIN-as-sub(7700, 8000, 'values');
say my $result3 = MAIN-as-sub(10_000);

use Test;
is $result1, $a1;
is $result2, $a2;
is $result3, '948349';
