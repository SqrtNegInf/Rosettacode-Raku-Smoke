#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm
#c# 2020-02-24 <RC, 2020-02-28 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# 2020-10-18 'srand' problems strikes intermittantly (but only in non-interactive runs?)
#n# 2020-10-19 output bi-stable, test for which version of results present
#n# 2020-12-06 OK now? Maybe? Hopefully? We'll see...
#n# 2021-03-02 still unstable

srand 123456;

my @res;

use Digest::SHA256::Native;
 
# Following data taken from the C entry
our (\A,\B,\P,\O,\Gx,\Gy) = (355, 671, 1073741789, 1073807281, 13693, 10088);
 
#`{ Following data taken from the Julia entry; 256-bit; tested
our (\A,\B,\P,\O,\Gx,\Gy) = (0, 7, # https://en.bitcoin.it/wiki/Secp256k1
:10("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"),
:10("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141"),
:10("0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"),
:10("0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8")); # }
 
role Horizon { method gist { 'EC Point at horizon' } }
 
class Point {             # modified from the Elliptic_curve_arithmetic entry
   has ($.x, $.y);        # handle modular arithmetic only
   multi method new( \x, \y ) { self.bless(:x, :y) }
   method gist { "EC Point at x=$.x, y=$.y" }
   method isOn { modP(B + $.x × modP(A+$.x²)) == modP($.y²) }
   sub modP ($a is copy) { ( $a %= P ) < 0 ?? ($a += P) !! $a }
}
 
multi infix:<⊞>(Point \p, Point \q) {
   my \λ = $; # slope
   if p.x ~~ q.x and p.y ~~ q.y {
      return Horizon if p.y == 0 ;
      λ = (3×p.x²+ A) × mult_inv(2×p.y, :modulo(P))
   } else {
      λ = (p.y - q.y) × mult_inv(p.x - q.x, :modulo(P))
   }
   my \xr = (λ²- p.x - q.x);
   my \yr = (λ×(p.x - xr) - p.y);
   return Point.bless: x =>  xr % P, y => yr % P
}
 
multi infix:<⊠>(Int \n, Point \p) {
   return 0                if n == 0 ;
   return p                if n == 1 ;
   return p ⊞ ((n-1) ⊠ p ) if n % 2 == 1 ;
   return ( n div 2 ) ⊠ ( p ⊞ p )
}
 
sub mult_inv($n, :$modulo) { # rosettacode.org/wiki/Modular_inverse
   my ($c, $d, $uc, $vd, $vc, $ud, $q) = $n % $modulo, $modulo, 1, 1, 0, 0, 0;
   while $c != 0 {
      ($q, $c, $d) = ($d div $c, $d % $c, $c);
      ($uc, $vc, $ud, $vd) = ($ud - $q×$uc, $vd - $q×$vc, $uc, $vc);
   }
   return $ud % $modulo;
}
 
class Signature {
 
   has ($.n, Point $.G); # Order and Generator point
 
   method generate_signature(Int \private_key, Str \msg) {
      #my \z = :16((sha256 msg).list>>.&{"%02s".sprintf(.base(16))}.join) % $.n;
      my \z = :16(sha256-hex msg) % $.n; # self ref: Blob.list.fmt("%02X",'')
      loop (my $k = my $s = my $r = 0 ; $s == 0 ; ) {
         loop ($r = $s = 0 ; $r == 0 ; ) {
            $r = (( $k = (1..^$.n).roll ) ⊠ $.G).x % $.n;
         }
         $s = ((z + $r×private_key) × mult_inv $k, :modulo($.n)) % $.n;
      }
      return $r, $s, private_key ⊠ $.G ;
   }
 
   method verify_signature(\msg, \r, \s, \public_key) {
      #my \z = :16((sha256 msg).list>>.&{"%02s".sprintf(.base(16))}.join) % $.n;
      my \z = :16(sha256-hex msg) % $.n;
      my \w = mult_inv s, :modulo($.n);
      my (\u1,\u2) = (z×w, r×w)>>.&{ $_ % $.n }
      my \p = (u1 ⊠ $.G ) ⊞ (u2 ⊠ public_key);
      return (p.x % $.n) == (r % $.n)
   }
}
 
@res.push: "The Curve E is        : " ~ "𝑦² = 𝑥³ + %s 𝑥 + %s (mod %s) ".sprintf(A,B,P);
@res.push: "with Generator G at   : (%s,%s)".sprintf(Gx,Gy);
my $ec = Signature.new: n => O, G => Point.new: x => Gx, y => Gy ;
@res.push: "Order(G, E) is        : "~ O;
@res.push: "Is G  ∈ E ?           : "~ $ec.G.isOn;
@res.push: "Message               : "~ my \message = "Show me the monKey";
@res.push: "The private key dA is : "~ my \dA = (1..^O).roll;
my ($r, $s, \Qa) = $ec.generate_signature(dA, message);
@res.push: "The public  key Qa is : "~ Qa.gist;
@res.push: "Is Qa ∈ E ?           : "~ Qa.isOn;
@res.push: "Is signature valid?   : "~ $ec.verify_signature(message, $r, $s, Qa);
@res.push: "Message (Tampered)    : "~ my \altered = "Show me the money";
@res.push: "Is signature valid?   : "~ $ec.verify_signature(altered, $r, $s, Qa);

.say for @res;
#exit;

my $moar-terminal = q:to/END/;
The Curve E is        : 𝑦² = 𝑥³ + 355 𝑥 + 671 (mod 1073741789) 
with Generator G at   : (13693,10088)
Order(G, E) is        : 1073807281
Is G  ∈ E ?           : True
Message               : Show me the monKey
The private key dA is : 988027138
The public  key Qa is : EC Point at x=418392123, y=903771857
Is Qa ∈ E ?           : True
Is signature valid?   : True
Message (Tampered)    : Show me the money
Is signature valid?   : False
END

my $moar-cronjob = q:to/END/;
The Curve E is        : 𝑦² = 𝑥³ + 355 𝑥 + 671 (mod 1073741789) 
with Generator G at   : (13693,10088)
Order(G, E) is        : 1073807281
Is G  ∈ E ?           : True
Message               : Show me the monKey
The private key dA is : 913449363
The public  key Qa is : EC Point at x=889975280, y=302400633
Is Qa ∈ E ?           : True
Is signature valid?   : True
Message (Tampered)    : Show me the money
Is signature valid?   : False
END

my $jvm = q:to/END/;
The Curve E is        : 𝑦² = 𝑥³ + 355 𝑥 + 671 (mod 1073741789) 
with Generator G at   : (13693,10088)
Order(G, E) is        : 1073807281
Is G  ∈ E ?           : True
Message               : Show me the monKey
The private key dA is : 666683498
The public  key Qa is : EC Point at x=1016062020, y=1061016630
Is Qa ∈ E ?           : True
Is signature valid?   : True
Message (Tampered)    : Show me the money
Is signature valid?   : False
END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $*IN.t ?? $moar-terminal !! $moar-cronjob;
