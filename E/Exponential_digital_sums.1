#!/usr/bin/env raku
#u# https://rosettacode.org/wiki/Exponential_digital_sums
#c# 2023-08-15 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# gives 'correct' results, but hard to test with concurrency: even with 'hyper' the final different results in list differ
#n# (could over-produce and truncate, but that's a lot of fussing for not much gain)
#n# full run of 30 'three-or-more' is pretty slow.

my @res;

my @expsum = lazy (2..*).hyper.map( -> $Int {
    my atomicint $miss = 0;
    (2..$Int).map( -> $exp {
        if (my $sum = ($Int ** $exp).comb.sum) > $Int { last if ++⚛$miss > 20 }
        $sum == $Int ?? "$Int^$exp" !! Empty;
    }) || Empty;
});

say "First twenty-five integers that are equal to the digital sum of that integer raised to some power:";
put .join(', ') for @expsum[^25];
say "\nFirst thirty that satisfy that condition in three or more ways:";
put .join(', ') for @expsum.grep({.elems≥3})[^30];
