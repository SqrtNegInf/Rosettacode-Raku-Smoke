#!/usr/bin/env raku
#u# https://rosettacode.org/wiki/Exponential_digital_sums
#c# 2023-08-10 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# single  7.03s user 0.42s system  68  cpu 10.872 total
#n# hyper  12.52s user 0.81s system 241% cpu  5.515 total

my @res;

# Implement a lazy generator. Made some assumptions about search limits. 
# May be poor assumptions, but haven't been able to find any counterexamples. (Edit: and some were bad.)

my @expsum = lazy (2..*).hyper.map( -> $Int {
    my atomicint $miss = 0;
    (2..$Int).map( -> $exp {
        if (my $sum = ($Int ** $exp).comb.sum) > $Int { last if ++⚛$miss > 20 }
        $sum == $Int ?? "$Int^$exp" !! Empty;
    }) || Empty;
});

@res.push: "First twenty-five integers that are equal to the digital sum of that integer raised to some power:";
@res.push: .join(', ') for @expsum[^25];
@res.push: "\nFirst thirty that satisfy that condition in three or more ways:";
@res.push: .join(', ') for @expsum.grep({.elems≥3})[^10];

.say for @res;

my $ref = q:to/END/;
First twenty-five integers that are equal to the digital sum of that integer raised to some power:
7^4
8^3
9^2
17^3
18^3, 18^6, 18^7
20^13
22^4
25^4
26^3
27^3, 27^7
28^4, 28^5
31^7
34^7
35^5
36^4, 36^5
40^13
43^7
45^6
46^5, 46^8
53^7
54^6, 54^8, 54^9
58^7
63^8
64^6
68^7

First thirty that satisfy that condition in three or more ways:
18^3, 18^6, 18^7
54^6, 54^8, 54^9
90^19, 90^20, 90^21, 90^22, 90^28
107^11, 107^13, 107^15
181^16, 181^18, 181^19, 181^20
360^45, 360^46, 360^49, 360^51
370^48, 370^54, 370^57, 370^59
388^32, 388^35, 388^36
523^39, 523^42, 523^44, 523^45
603^44, 603^47, 603^54
END

use Test;
is @res.join("\n"), chomp $ref;
