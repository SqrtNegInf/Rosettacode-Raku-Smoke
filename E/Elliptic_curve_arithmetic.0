#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Elliptic_curve_arithmetic
#c# 2016-04-03 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n# note: '⨯' [VECTOR OR CROSS PRODUCT] used for custom product, '×' [MULTIPLICATION SIGN] for regular product

unit module EC;
our ($A, $B) = (0, 7);

role Horizon { method gist { 'EC Point at horizon' } }
class Point {
    has ($.x, $.y);
    multi method new(
        $x, $y where $y**2 ~~ $x**3 + $A×$x + $B
    ) { self.bless(:$x, :$y) }
    multi method new(Horizon $) { self.bless but Horizon }
    method gist { "EC Point at x=$.x, y=$.y" }
}

multi prefix:<->(Point $p) { Point.new: x => $p.x, y => -$p.y }
multi prefix:<->(Horizon $) { Horizon }
multi infix:<->(Point $a, Point $b) { $a + -$b }

multi infix:<+>(Horizon $, Point $p) { $p }
multi infix:<+>(Point $p, Horizon) { $p }

multi infix:<⨯>(Point $u, Int $n) { $n × $u }
multi infix:<⨯>(Int $n, Horizon) { Horizon }
multi infix:<⨯>(0, Point) { Horizon }
multi infix:<⨯>(1, Point $p) { $p }
multi infix:<⨯>(2, Point $p) {
    my $l = (3⨯$p.x**2 + $A) / (2 ⨯ $p.y);
    my $y = $l ⨯ ($p.x - my $x = $l**2 - 2⨯$p.x) - $p.y;
    $p.bless(:$x, :$y);
}
multi infix:<⨯>(Int $n where $n > 2, Point $p) {
    2 × ($n div 2 × $p) + $n % 2 × $p;
}

multi infix:<+>(Point $p, Point $q) {
    if $p.x ~~ $q.x {
        return $p.y ~~ $q.y ?? 2 × $p !! Horizon;
    }
    else {
        my $slope = ($q.y - $p.y) / ($q.x - $p.x);
        my $y = $slope×($p.x - my $x = $slope**2 - $p.x - $q.x) - $p.y;
        return $p.new(:$x, :$y);
    }
}

#say my $p = Point.new: x => $_, y => sqrt(abs(1 - $_**3 - $A×$_ - $B)) given 1;
#say my $q = Point.new: x => $_, y => sqrt(abs(1 - $_**3 - $A×$_ - $B)) given 2;
say my $p = Point.new: y => $_, x => sqrt(abs(1 - $_**3 - $A×$_ - $B)) given 1;
say my $q = Point.new: y => $_, x => sqrt(abs(1 - $_**3 - $A×$_ - $B)) given 2;
#my $p = +EC::Point->new(-($EC::B - 1)**(1/3), 1);
#my $q = +EC::Point->new(-($EC::B - 4)**(1/3), 2);
say my $s = $p + $q;

say my $a = "checking alignment:  " ~ abs ($p.x - $q.x)×(-$s.y - $q.y) - ($p.y - $q.y)×($s.x - $q.x);
exit;

my $moar = qq:to/END/;
EC Point at x=1, y=2.6457513110645907
EC Point at x=2, y=3.7416573867739413
EC Point at x=-1.7989898732233311, y=0.42167869684980275
checking alignment:  8.881784197001252e-16
END

my $jvm = qq:to/END/;
EC Point at x=1, y=2.6457513110645907
EC Point at x=2, y=3.7416573867739413
EC Point at x=-1.7989898732233311, y=0.42167869684980275
checking alignment:  8.881784197001252E-16
END

use Test;
my $ref = $*VM ~~ /jvm/ ?? $jvm !! $moar;
is ($p.gist, $q.gist, $s.gist, $a).join("\n"), chomp $ref;
