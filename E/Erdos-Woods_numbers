#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Erdős–Woods_numbers
#t# inprogress
#c# 2022-01-xx >RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# OEIS:A059756 Erdős–Woods numbers
#n# OEIS:A059757 smallest values of a for a given E-W number k
#n# OEIS:A111042 odd terms of sequence (not calculated here)
#n# any way to keep this from being intolerably slow?

my @res;

# code!

sub erdős_woods( $n ) {
    my @primes;
    my $P = $k = 1;
    while ($k < $n) { 
        @primes.push: $k if $P % %k; 
    }
    $P *= $k*$k;
    $k++;
    # divs
    my $np = @primes;
    my @partitions = (0, 0, 2**$np-1);
}

=finish
def erdős_woods(n):
    """ Returns the smallest value for `a` of the Erdős-Woods number n, or Inf if n is not in the sequence """
    primes = []
    P = k = 1
    while k < n:
        if P % k:
            primes.append(k)
        P *= k * k
        k += 1
    divs = [
        int(''.join(str((a%p==0) + 0) for p in primes)[::-1], 2)
        for a in range(n)
    ]
    np = len(primes)
    partitions = [(0, 0, 2**np-1)]
    for i in sorted(
        range(1,n),
        key = lambda x: bin(divs[x] | divs[n-x])[::-1].find('1'),
        reverse=True
    ):
        new_partitions = []
        factors = divs[i]
        other_factors = divs[n-i]
        for p in partitions:
            set_a, set_b, r_primes = p
            if factors & set_a or other_factors & set_b:
                new_partitions += (p,)
                continue
            for ix, v in enumerate(bin(factors & r_primes)[2:][::-1]):
                if v=='1':
                    w = 1 << ix
                    new_partitions += ((set_a^w, set_b, r_primes^w),)
            for ix, v in enumerate(bin(other_factors & r_primes)[2:][::-1]):
                if v=='1':
                    w = 1 << ix
                    new_partitions += ((set_a, set_b^w, r_primes^w),)
        partitions = new_partitions
    result = float('inf')
    for px, py, _ in partitions:
        x = y = 1
        for p in primes:
            if px % 2:
                x *= p
            if py % 2:
                y *= p
            px //= 2
            py //= 2
        result = min(result, n*pow(x,-1,y)%y*x-n)
    return result
 
 
K = 3
COUNT = 0
print('The first 20 Erdős–Woods numbers and their minimum interval start values are:')
while COUNT < 20:
    a = erdős_woods(K)
    if a != float('inf'):
        print(f"{K: 3d} -> {a}")
        COUNT += 1
    K += 1
 

exit;
.say for @res;

my $ref = q:to/END/;
 16 -> 2184
 22 -> 3521210
 34 -> 47563752566
 36 -> 12913165320
 46 -> 21653939146794
 56 -> 172481165966593120
 64 -> 808852298577787631376
 66 -> 91307018384081053554
 70 -> 1172783000213391981960
 76 -> 26214699169906862478864
 78 -> 27070317575988954996883440
 86 -> 92274830076590427944007586984
 88 -> 3061406404565905778785058155412
 92 -> 549490357654372954691289040
 94 -> 38646299993451631575358983576
 96 -> 50130345826827726114787486830
100 -> 35631233179526020414978681410
106 -> 200414275126007376521127533663324
112 -> 1022681262163316216977769066573892020
116 -> 199354011780827861571272685278371171794
END

use Test;
is @res.join("\n"), chomp $ref;
