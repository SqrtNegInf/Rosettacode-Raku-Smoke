#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Y_combinator
#c# 2015-11-02 <RC
#m# MOAR: OK
#j#  JVM: OK

sub Y (&f) { { .($_) }( -> &y { f({ y(&y)($^arg) }) } ) }
sub fac (&f) { sub ($n) { $n < 2 ?? 1 !! $n × f($n - 1) } }
sub fib (&f) { sub ($n) { $n < 2 ?? $n !! f($n - 1) + f($n - 2) } }
say map Y($_), ^10 for &fac, &fib;

# Note that Raku doesn't actually need a Y combinator because you can name anonymous functions from the inside:
# say .(10) given sub (Int $x) { $x < 2 ?? 1 !! $x × &?ROUTINE($x - 1); }
say gather { for ^10 -> $i { take .($i) given sub (Int $x) { $x < 2 ?? 1 !! $x × &?ROUTINE($x - 1); } } } 

use Test;
my $x = map Y($_), ^10 for &fac;
my $y = map Y($_), ^10 for &fib;
is $y, <0 1 1 2 3 5 8 13 21 34>, 'for Fibonacci';
is $x, <1 1 2 6 24 120 720 5040 40320 362880>, 'for factorial';
