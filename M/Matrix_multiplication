#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Matrix_multiplication
#c# 2016-02-16 <RC, 2020-03-31 <RC, 2022-09-10 <RC
#m# MOAR: OK
#j#  JVM: OK

# version 1
sub mmult(@a,@b) {
    my @p;
    for ^@a X ^@b[0] -> ($r, $c) {
        @p[$r][$c] += @a[$r][$_] × @b[$_][$c] for ^@b;
    }
    @p;
}

my @a = [1,  1,  1,   1],
        [2,  4,  8,  16],
        [3,  9, 27,  81],
        [4, 16, 64, 256];

my @b = [  4  , -3  ,  4/3,  -1/4 ],
        [-13/3, 19/4, -7/3,  11/24],
        [  3/2, -2  ,  7/6,  -1/4 ],
        [ -1/6,  1/4, -1/6,   1/24];

my @res1.push: $_ for mmult(@a,@b);
.say for @res1;

# version 2
sub mmult1(\a,\b) {
    [
        for ^a -> \r {
            [
                for ^b[0] -> \c {
                    [+] a[r;^b] Z× b[^b;c]
                }
            ]
        }
    ]
}

my @res2.push: $_ for mmult1(@a,@b);

# version 3
multi infix:<×> (@A, @B) {
    @A.map: -> @a { do [+] @a Z× @B[*;$_] for ^@B[0] }
}

my @res3.push: $_ for @a × @b;

# version 4
# Here is an even more concise version, expressing the product of two matrices as the cross dot product 
# of the first matrix with the transpose of the second :
sub infix:<⨯>(@A, @B) {
  cross(@A, ([Z] @B), with => { [+] @^a Z* @^b })
  .rotor(@B);
}

my @res4.push: $_ for @a ⨯ @b;

my $ref = qq:to/END/;
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1
END

use Test;
is @res1.join("\n"), chomp $ref;
is @res2.join("\n"), chomp $ref;
is @res3.join("\n"), chomp $ref;
is @res4.join("\n"), chomp $ref;
