#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Monte_Carlo_methods
#c# 2016-03-31 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2023-01-11 replace call to built-in 'rand' for output stability (**2' vs '²' now the same)

use myRNG;
my $rng = myRNG.new( :seed(123456) );

#my @random_distances = ([+] $rng.next-rat**2 xx 2) xx *;
 my @random_distances = ([+] $rng.next-rat²   xx 2) xx *;

sub approximate_pi(Int $n) {
    4 × @random_distances[^$n].grep(* < 1) / $n
}

say "Monte-Carlo π approximation:";
my @res.push: "$_ iterations:  " ~ approximate_pi $_ for 100, 1_000, 10_000;

 my @pi = ([\+] 4 × (1 > [+] $rng.next-rat**2 xx 2) xx *) Z/ 1 .. *;
#my @pi = ([\+] 4 × (1 > [+] $rng.next-rat²   xx 2) xx *) Z/ 1 .. *;
@res.push: @pi[10, 1000, 10_000];

.say for @res;
#exit;

my $ref = qq:to/END/;
100 iterations:  3.2
1000 iterations:  3.192
10000 iterations:  3.1368
3.636364 3.156843 3.126087
END

my $moar-terminal-super = qq:to/END/;
100 iterations:  3
1000 iterations:  3.172
10000 iterations:  3.1324
3.272727 3.144855 3.132487
END

use Test;
is @res.join("\n"), chomp $ref;
