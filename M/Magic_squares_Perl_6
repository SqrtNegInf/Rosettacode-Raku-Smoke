#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Magic_squares/Perl_6
#c# 2016-03-19 <RC
#m# MOAR: OK
#j#  JVM: OK

#n# generate n-by-n squares for 3..12


#sub MAIN (Int $n where {$n > 0}) {
my $n = 2;
my @sq;
my $i;
my $h;
my $q;
my $result;

#if ($n == 2) {
  for 3..12 -> $n {
    $i = 1;
    $h = $n div 2;
    $q = $n div 4;
    gen-sq($n);
    ($result ~= .fmt("%{$i.chars}d", ' '); $result ~= "\n") for @sq;
     $result ~= sprintf("The magic number is %d", [+] @sq[0].list); $result ~=  "\n\n";
  }
#} else { 
#    gensq($n);
#}

sub gensq($n) {
    $i = 1;
    $h = $n div 2;
    $q = $n div 4;
    gen-sq($n);
    say .fmt("%{$i.chars}d", ' ') for @sq;
    say 'The magic number is ', [+] @sq[0].list; say '';
} 

#    multi sub gen-sq (2) { # invalid
#        note "Sorry, can not generate a 2 x 2 magic square." and exit;
#    }

    multi sub gen-sq ($n where {$n % 2}) { # odd
        my $x = $n/2;
        my $y = 0;
        @sq[($i % $n ?? $y-- !! $y++) % $n][($i % $n ?? $x++ !! $x) % $n] = $i++ for ^$n²;
    }

    multi sub gen-sq ($n where {$n %% 4}) { # doubly even
        my $x = 0;
        my $y = 0;
        @sq[$i % $n ?? $y !! $y++][($i-1) % $n] = $i++ for ^$n²;
        for ^$q -> $r {
            for $q ..^ $n - $q -> $c {
                my $ŕ = $n - 1 - $r;
                my $ć = $n - 1 - $c;
                (@sq[$r;$c], @sq[$ŕ;$ć]) = (@sq[$ŕ;$ć], @sq[$r;$c]);
                (@sq[$c;$r], @sq[$ć;$ŕ]) = (@sq[$ć;$ŕ], @sq[$c;$r]);
            }
        }
    }

    multi sub gen-sq ($n where {$n %% 2 and $n % 4}) { # singly even
        gen-sq($h);
        $i ×= 4;
        for ^$h -> $r {
            for ^$h -> $c {
                @sq[$r + $h; $c]      = @sq[$r;$c] + $h² × 3;
                @sq[$r; $c + $h]      = @sq[$r;$c] + $h² × 2;
                @sq[$r + $h; $c + $h] = @sq[$r;$c] + $h²;
            }
            for ^$q -> $c {
                next if $c == 0 and $r == ($h-1) div 2;
                (@sq[$r;$c], @sq[$r + $h;$c]) = (@sq[$r + $h;$c], @sq[$r;$c]);
            }
            if $h > 4 {
                for ($n - $q + 1) ..^ $n -> $c {
                        (@sq[$r;$c], @sq[$r + $h;$c]) = (@sq[$r + $h;$c], @sq[$r;$c]);
                }
            }
        }
        (@sq[$q;$q], @sq[$q+$h;$q]) = (@sq[$q+$h;$q], @sq[$q;$q]);
    }

#exit unless $n == 2;
my $ref = slurp 'ref/magic_squares.txt';
use Test;
is $result, $ref;
#}
