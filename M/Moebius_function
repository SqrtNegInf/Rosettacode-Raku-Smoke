#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Möbius_function
#c# 2020-01-26 <RC, 2020-01-30 <RC, 2023-01-08 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# junctions slower?

use Prime::Factor;
 
sub μ (Int \n) {
    return 0 if n %% (4|9|25|49|121);               # parens required
    #return 0 if n %% 4 or n %% 9 or n %% 25 or n %% 49 or n %% 121;
    my @p = prime-factors(n);                       # parens optional
    +@p == squish(@p) ?? +@p %% 2 ?? 1 !! -1 !! 0   # parens required
    #+@p == +@p.unique ?? +@p %% 2 ?? 1 !! -1 !! 0
}
 
#my @möbius = lazy flat '', 1, (2..*).hyper.map: -> \n { μ(n) };
 my @möbius = lazy flat '', 1, (2..*).hyper.map: &μ;
 
say my $result = "Möbius sequence - First 199 terms:\n" ~
    @möbius[^200]».fmt('%3s').batch(20).join: "\n";         # WAT?!

my $ref = q:to/END/;
Möbius sequence - First 199 terms:
      1  -1  -1   0  -1   1  -1   0   0   1  -1   0  -1   1   1   0  -1   0  -1
  0   1   1  -1   0   0   1   0   0  -1  -1  -1   0   1   1   1   0  -1   1   1
  0  -1  -1  -1   0   0   1  -1   0   0   0   1   0  -1   0   1   0   1   1  -1
  0  -1   1   0   0   1  -1  -1   0   1  -1  -1   0  -1   1   0   0   1  -1  -1
  0   0   1  -1   0   1   1   1   0  -1   0   1   0   1   1   1   0  -1   0   0
  0  -1  -1  -1   0  -1   1  -1   0  -1  -1   1   0  -1  -1   1   0   0   1   1
  0   0   1   1   0   0   0  -1   0   1  -1  -1   0   1   1   0   0  -1  -1  -1
  0   1   1   1   0   1   1   0   0  -1   0  -1   0   0  -1   1   0  -1   1   1
  0   1   0  -1   0  -1   1  -1   0   0  -1   0   0  -1  -1   0   0   1   1  -1
  0  -1  -1   1   0   1  -1   1   0   0  -1  -1   0  -1   1  -1   0  -1   0  -1
END

use Test;
is $result, chomp $ref;
