#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Memory_layout_of_a_data_structure
#c# 2018-08-18 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# as stands, just trivial
#n# 'bit' not defined

my @res;

#Translation of: Pascal
#The following is specced to work, but implementation of shaped arrays is not quite complete.

enum T_RS232 <
    carrier_detect
    received_data
    transmitted_data
    data_terminal_ready
    signal_ground
    data_set_ready
    request_to_send
    clear_to_send
    ring_indicator
>;

#my bit @signal[T_RS232];
my @signal[signal_ground] = 1;

say my $result = @signal;

#In the absence of shaped arrays, you can do the usual bit-twiddling tricks on a native integer of sufficient size. (Such an integer could presumably be mapped directly to a device register.)

# my $signal +|= 1 +< signal_ground;

#Using a native int is likelier to work on a big-endian machine in any case. Another almost-there solution is the mapping of C representational types into Raku for native interfaces, but it does not yet support bit fields.

#.say for @res;

#my $ref = q:to/END/;
#END

use Test;
is $result.gist, '[1 (Any) (Any) (Any)]';
#is @res.join("\n"), chomp $ref;
