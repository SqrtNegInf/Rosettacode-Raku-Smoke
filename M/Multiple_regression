#!/usr/bin/env perl6 # do-not-check
#u# http://rosettacode.org/wiki/Multiple_regression
#c# 2016-05-01 <RC
#m# MOAR: OK
#j#  JVM: BROKEN
#n# the */× switch doesn't work here due to 'MultiVector' module
#n# remove too-damn-slow designation, try it for a while [for iMac only, really is pretty slow on Mac-Pro]
#n# 2023-01-17 switch to MultiVector breaks this
die 'Really quite slow on Mac-Pro' if qx/uname -a/ ~~ /'Mac-Pro'/;

#    20161123: 1898u 7.2s 31:49 100%
#    20170123: 1431u 5.3s 24:04 100%
#    20171027: 1009u 2.3s 16:51 100%
#    20181004:  822u 3.4s 13:46 100%
#    20200308:  769u 2.7s 12:51 100% 
#    20220304:  447u 7.9s  7:36 100%
#    20230106:  338u 5.5s  5:43 100%

#BEGIN { die 'ecosystem...' if $*VM ~~ /jvm/; }  # wait for zef-j


#We're going to solve the example on the Wikipedia article using Clifford, a geometric algebra module. Optimization for large vector space does not quite work yet, so it's going to take (a lof of) time and a fair amount of memory, but it should work.
#Let's create four vectors containing our input data:

use lib 'lib'; use Clifford; # some version prior to 7.*
#use MultiVector; # was Clifford

my @height = <1.47 1.50 1.52 1.55 1.57 1.60 1.63 1.65 1.68 1.70 1.73 1.75 1.78 1.80 1.83>;
my @weight = <52.21 53.12 54.48 55.84 57.20 58.57 59.93 61.29 63.11 64.47 66.28 68.10 69.92 72.19 74.46>;

my $w = [+] @weight Z* @e;

my $h0 = [+] @e[^@weight];
my $h1 = [+] @height Z* @e;
my $h2 = [+] (@height X** 2) Z* @e;

my $I = $h0∧$h1∧$h2;
my $I2 = ($I·$I.reversion).Real;

my @res;
@res.push: "α = " ~ (($w∧$h1∧$h2)·$I.reversion/$I2).gist;
@res.push: "β = " ~ (($w∧$h2∧$h0)·$I.reversion/$I2).gist;
@res.push: "γ = " ~ (($w∧$h0∧$h1)·$I.reversion/$I2).gist;

my $ref = qq:to/END/;
α = 128.81280357844
β = -143.1620228648
γ = 61.960325442
END

use Test;
is @res.join("\n"), chomp $ref;
