#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Maximum_triangle_path_sum
#c# 2015-10-26 <>RC
#m# MOAR: OK
#j#  JVM: OK


#The Z+ and Zmax are examples of the zipwith metaoperator. We ought to be able to use [Z+]= as an assignment operator here, but rakudo has a bug. Note also we can use the Zmax metaoperator form because max is define as an infix in Raku.

my @rows = slurp("triangle.txt").lines.map: { [.words] }

while @rows > 1 {
    my @last := @rows.pop;
    @rows[*-1] = (@rows[*-1][] Z+ (@last Zmax @last[1..*])).List;
}

#say @rows;

use Test;
is @rows, 1320, 'Verily, the answer is: 1320';

#Here's a more FPish version with the same output.
#We define our own operator and the use it in the reduction metaoperator form, [op], which turns any infix into a list operator.

sub infix:<op1>(@a,@b) { (@a Zmax @a[1..*]) Z+ @b }
#say [op] slurp("triangle.txt").lines.reverse.map: { [.words] }
is ([op1] slurp("triangle.txt").lines.reverse.map: { [.words] }), 1320, 'Truthily, the answer is: 1320';

#Instead of using reverse, one could also define the op as right-associative.
# not working
sub infix:<op2>(@a,@b) is assoc('right') { @a Z+ (@b Zmax @b[1..*]) }
#say [op2] slurp("triangle.txt").lines.map: { [.words] }
is ([op2] slurp("triangle.txt").lines.map: { [.words] }), 1320, 'Wearily, the answer is: 1320';

