#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Mastermind
#c# 2017-01-29 <RC, 2017-02-25 <RC, 2018-04-18 <RC
#m# MOAR: OK
#j#  JVM: OK
#=# RC pipe: C B A E\nC A B F\nC A F E
#n# better testing again

use Test;  

# By default, plays classic Mastermind using letters in place of colors. ( 4 chosen from 6, no repeats, 10 guess limit.) 
# Pass in parameters to modify the game. Enter a string of --length (default 4) letters with or without spaces. 
# Guesses accept lower or upper case.

use myRNG;

# Knuth shuffle
sub pick-all (@a is copy) is export {
    my $rng = myRNG.new( :seed(123456) );
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

sub MAIN (
    Int :$colors  where 1 < * < 21 = 6,  Int :$length  where 3 < * < 11 = 4,
    Int :$guesses where 7 < * < 21 = 10, Bool :$repeat = False
  ) {
    my @valid = ('A' .. 'T')[^$colors];
   #my $puzzle = $repeat ?? @valid.roll($length) !! @valid.pick($length);
    my $puzzle = @valid.&pick-all.head($length);
    say "Puzzle answer is: $puzzle"; # DH leave this in, or when run as cronjob, fails?
    my @guesses;

    my $black = '●';
    my $white = '○';

    my $cnt;
    loop {
        #clearscr();
        die 'Seems to be jammed' if $cnt++ > 20;
        say header();
        printf " %{$length × 2}s :: %s\n", @guesses[$_][0], @guesses[$_][1] for ^@guesses;
        lose() if @guesses == $guesses;
        my $guess = get-guess();
        next unless $guess.&is-valid;
        my $score = score($puzzle, $guess);
        win() if $score eq ($black xx $length).join: ' ';
        @guesses.push: [$guess, $score];
    }

    sub header {
        my $num = $guesses - @guesses;
        qq:to/END/;
        Valid letter, but wrong position: ○ - Correct letter and position: ●
        Guess the {$length} element sequence containing the letters {@valid}
        Repeats are {$repeat ?? '' !! 'not '}allowed. You have $num guess{ $num == 1 ?? '' !! 'es'} remaining.
        END
    }

    sub score ($puzzle, $guess) {
        my @score;
        for ^$length {
            if $puzzle[$_] eq $guess[$_] {
                @score.push: $black;;
            }
            elsif $puzzle[$_] eq any(@$guess) {
                @score.push: $white;
            }
            else {
                @score.push('-');
            }
        }
        #@score.push('-') while @score < 4;
        @score.sort.reverse.join: ' ';
    }

    sub clearscr { $*KERNEL ~~ /'win32'/ ?? run('cls') !! run('clear') }

    sub get-guess { (uc prompt 'Your guess?: ').comb(/@valid/) }
   #sub get-guess { $*VM ~~ /jvm/ ?? <C E B F> !! <E F B A> }

    sub is-valid (@guess) { so $length == @guess }

    sub win  { say 'You Win! The correct answer is: ', $puzzle; say 'ok 1 -'; exit }

    sub lose { say 'Too bad, you ran out of guesses. The solution was: ', $puzzle; say 'not ok 1 -'; exit }
}
