#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Mind_boggling_card_trick
#c# 2018-09-01 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# 2023-01-10 replace call to built-in 'rand' for output stability

my @res;

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub pick-all (@a is copy) is export {
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) × $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

# Generate a shuffled deck
my @deck = shuffle;
@res.push: 'Shuffled deck:          '~ @deck;

my (@discard, @red, @black);

# Deal cards following task description
deal(@deck, @discard, @red, @black);

@res.push: 'Discard pile:           '~ @discard;
@res.push: '"Red"   pile:           '~ @red;
@res.push: '"Black" pile:           '~ @black;

# swap a the same random number of random
# cards between the red and black piles
my $amount = floor((+@red min +@black)×$rng.next-rat);
@res.push: 'Number of cards to swap: '~ $amount;
swap(@red, @black, $amount);

@res.push: 'Red pile after swaps:   '~ @red;
@res.push: 'Black pile after swaps: '~ @black;

@res.push: 'Number of Red   cards in the Red   pile: '~ +@red.grep('R');
@res.push: 'Number of Black cards in the Black pile: '~ +@black.grep('B');

sub shuffle { (flat 'R' xx 26, 'B' xx 26).&pick-all }

sub deal (@deck, @d, @r, @b) {
    while @deck.elems {
        my $top = @deck.shift;
        if $top eq 'R' {
            @r.push: @deck.shift;
        }
        else {
            @b.push: @deck.shift;
        }
        @d.push: $top;
    }
}

sub swap (@r, @b, $a) {
    my @ri  = (^@r).&pick-all.head($a);
    my @bi  = (^@b).&pick-all.head($a);
    my @rs  = @r[@ri];
    my @bs  = @b[@bi];
    @r[@ri] = @bs;
    @b[@bi] = @rs;
}

.say for @res;

my $ref = q:to/END/;
Shuffled deck:          R R B B B R R R R R B R B R B B B B B R B B R B R B R B B R R R R B R R B B R B R R R R B B R B R B B B
Discard pile:           R B B R R B B B B B B R R R B R R R B R R R B R R B
"Red"   pile:           R R R B B B R B R B R R B B
"Black" pile:           B R R R B B R B R B B B
Number of cards to swap: 8
Red pile after swaps:   R R B B R B R B B B B R B R
Black pile after swaps: R B B R R B R R R B B B
Number of Red   cards in the Red   pile: 6
Number of Black cards in the Black pile: 6
END

use Test;
is @res.join("\n"), chomp $ref;
