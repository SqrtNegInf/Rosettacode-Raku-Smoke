#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Multi-base_primes
#c# 2021-07-02 <RC
#m# MOAR: OK
#j# JVM:  BROKEN

my @res;

use Math::Primesieve;

my $sieve = Math::Primesieve.new;
my %prime-base;

my $chars = 4; # for demonstration purposes. Change to 5 for the whole shmegegge.

my $threshold = ('1' ~ 'Z' x $chars).parse-base(36);

my @primes = $sieve.primes($threshold);

%prime-base.push: $_ for (2..36).map: -> $base {
    $threshold = (($base - 1).base($base) x $chars).parse-base($base);
    @primes[^(@primes.first: * > $threshold, :k)].race.map: { .base($base) => $base };
}

%prime-base.=grep: +*.value.elems > 10; # for efficiency

for 1 .. $chars -> $m {
    @res.push: "$m character strings that are prime in maximum bases: " ~ (my $e = ((%prime-base.grep( *.key.chars == $m )).max: +*.value.elems).value.elems);
    @res.push: $_ for %prime-base.grep( +*.value.elems == $e ).grep(*.key.chars == $m).sort: *.key;
    @res.push: '';
}

.say for @res;

my $ref = q:to/END/;
1 character strings that are prime in maximum bases: 34
2	3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36

2 character strings that are prime in maximum bases: 18
21	3 5 6 8 9 11 14 15 18 20 21 23 26 29 30 33 35 36

3 character strings that are prime in maximum bases: 18
131	4 5 7 8 9 10 12 14 15 18 19 20 23 25 27 29 30 34
551	6 7 11 13 14 15 16 17 19 21 22 24 25 26 30 32 35 36
737	8 9 11 12 13 15 16 17 19 22 23 24 25 26 29 30 31 36

4 character strings that are prime in maximum bases: 19
1727	8 9 11 12 13 15 16 17 19 20 22 23 24 26 27 29 31 33 36
5347	8 9 10 11 12 13 16 18 19 22 24 25 26 30 31 32 33 34 36

END

use Test;
is @res.join("\n"), chomp $ref;
