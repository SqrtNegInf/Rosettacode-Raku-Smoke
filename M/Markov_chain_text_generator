#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Markov_chain_text_generator
#t# inprogress
#c# 2016-11-11 <RC, 2017-01-31 >RC, 2017-02-05 <>RC, 2018-05-07 <RC
#m# MOAR: OK
#j#  JVM: OK
#n#  key order of hashes no longer stable (but ArrayHash provides a work-around)
#n# 2021-03-03 yesterday's "good" answer no longer works, updated again...
#n# 2022-09-22 cf Average_loop_length, same problem with ArrayHash binding
#n# 2022-10-02 d'oh, was using out-of-date module, not new/precompiled version
#n# 2022-12-15 replace call to built-in 'rand' for output stability

use ArrayHash;

use lib 'lib';
use myRNG;
my $rng = myRNG.new( :seed(123456) );

#unit sub MAIN ( :$file='ref/alice_oz.txt', :$n=2, :$words=100, );
unit sub MAIN ( :$file='ref/alice-10K.txt', :$n=2, :$words=100, );

sub add-to-dict ( $text, :$n=2, ) {
    my @words = $text.words;

# DH 2017-01-31 4x slower than .rotor version
# DH 2018-10-04 now comparable in speed
# DH 2022-10-03 nb: this branch gives different results than the one being tested
if (False) {
    my @prefix-suffix;
    for ^(@words-$n) -> $i {
        @prefix-suffix.push: @words[$i X+ ^$n], @words[$i+$n].List;
    }
    (%).push: @prefix-suffix.map: * => *;

# Wamba 2017-02-05, + 1 fix: http://rosettacode.org/wiki/User_talk:Wamba
} else {
    my @prefix = @words.rotor: $n => -$n+1;
    (%).push: @prefix Z=> @words[$n .. *];
}

}

my $text = slurp $file;

# DH 2018-05-07 
# kludge for MOAR: create %dict with array-hash to obtain stable key order (after sort); a little slower, but enables testing...
# start kludge
my %dict;
if $*VM ~~ /jvm/ {
   %dict = add-to-dict $text, :$n;
} else {
    my %dictx = add-to-dict $text, :$n;
    %dict := array-hash();
    %dict{$_} = %dictx{$_} for sort %dictx.keys;
}
# end kludge

#my @start-words = %dict.keys.pick.words;
#my @generated-text = lazy |@start-words, { %dict{ "@_[ *-$n .. * ]" }.pick } ...^ !*.defined;

my @keys = %dict.keys;
my @start-words = @keys[@keys Ã— $rng.next-rat].words;  
my @generated-text = lazy |@start-words, { %dict{ "@_[ *-$n .. * ]" }.tail } ...^ !*.defined; # not random
#my @generated-text = lazy |@start-words, { %dict{ "@_[ *-$n .. * ]" }.tail } ...^ !*.defined; # not random

my @res = @generated-text.head(4): $words;
say @res.join(' ');
exit;

my $ref = qq:to/END/;
centre of the table, but it was too slippery; and when she had tired herself out with trying, the poor little thing sat down and cried. 'Come, there's no use in crying like that!' said Alice to herself, rather sharply; 'I advise you to leave off this minute!' She generally gave herself very good advice, (though she very seldom followed it), and sometimes she scolded herself so severely as to bring tears into her eyes; and once she remembered trying to box her own ears for having cheated
END

use Test;
is @res.join(' '), chomp $ref;
