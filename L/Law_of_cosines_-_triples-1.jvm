#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Law_of_cosines_-_triples
#c# 2018-09-25 <RC, 2018-10-18 >RC, 2020-07-19 >RC
#m# MOAR: OK
#j# JVM:  OK
#n# 'extra credit' step is very slow...

my @res;

multi triples (60, $n) {
    my %sq = (1..$n).map: { .² => $_ };
    my $i = 0;
    my @triples[2×$n];
    (1..^$n).map: -> $a {
        for $a^..$n -> $b {
            my $cos = $a × $a + $b × $b - $a × $b;
            (@triples[$i++] = $a, %sq{$cos}, $b) if %sq{$cos}:exists;
        }
    }
    @triples.grep: so *
}

multi triples (90, $n) {
    my %sq = (1..$n).map: { .² => $_ };
    my $i = 0;
    my @triples[2×$n];
    (1..^$n).map: -> $a {
        for $a^..$n -> $b {
            my $cos = $a × $a + $b × $b;
            @triples[$i++] = $a, $b, %sq{$cos} and last if %sq{$cos}:exists;
        }
    }
    @triples.grep: so *
}

multi triples (120, $n) {
    my %sq = (1..$n).map: { .² => $_ };
    my $i = 0;
    my @triples[2×$n];
    (1..^$n).map: -> $a {
        for $a^..$n -> $b {
            my $cos = $a × $a + $b × $b + $a × $b;
            @triples[$i++] = $a, $b, %sq{$cos} and last if %sq{$cos}:exists;
        }
    }
    @triples.grep: so *
}

use Sort::Naturally;

my $n = 13;
@res.push: "Integer triangular triples for sides 1..$n:";
for 120, 90, 60 -> $angle {
    my @itt = triples($angle, $n);
    if $angle == 60 { push @itt, "$_ $_ $_" for 1..$n }
    @res.push: sprintf "Angle %3d° has %2d solutions: %s", $angle, +@itt, @itt.sort(&naturally).join(', ');
}

#my ($angle, $count) = 60, 10_000;
#@res.push: "\nExtra credit:";
#@res.push: "$angle° integer triples in the range 1..$count where the sides are not all the same length: "~ +triples($angle, $count);

.say for @res;

my $ref = q:to/END/;
Integer triangular triples for sides 1..13:
Angle 120° has  2 solutions: 3 5 7, 7 8 13
Angle  90° has  3 solutions: 3 4 5, 5 12 13, 6 8 10
Angle  60° has 15 solutions: 1 1 1, 2 2 2, 3 3 3, 3 7 8, 4 4 4, 5 5 5, 5 7 8, 6 6 6, 7 7 7, 8 8 8, 9 9 9, 10 10 10, 11 11 11, 12 12 12, 13 13 13
END

#Extra credit:
#60° integer triples in the range 1..10000 where the sides are not all the same length: 18394

use Test;
is @res.join("\n"), chomp $ref;
