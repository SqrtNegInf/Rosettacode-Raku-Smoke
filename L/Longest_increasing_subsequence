#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Longest_increasing_subsequence
#c# 2015-12-21 <RC
#m# MOAR: OK
#j#  JVM: OK
#n#  source of GH2788 issue

#Dynamic programming
#Straight-forward implementation of the algorithm described in the video.

sub lis(@d) {
    my @l = [].item xx @d;
    @l[0].push: @d[0];
    for 1 ..^ @d -> $i {
        for ^$i -> $j {
            if @d[$j] < @d[$i] && @l[$i] < @l[$j] + 1 {
                @l[$i] = [ @l[$j][] ]
            }
        }
        @l[$i].push: @d[$i];
    }
    return max :by(*.elems), @l;
}

# Patience sorting

sub lis1(@deck is copy) {
    my @S = [@deck.shift() => Nil].item;
    for @deck -> $card {
        with first { @S[$_][*-1].key > $card }, ^@S -> $i {
            @S[$i].push: $card => @S[$i-1][*-1] // Nil
            #@S[$i].push: $card => $i>0 ?? @S[$i-1][*-1] !! Nil # XXX DH 2019-03-17 work-around XXX bug fixed
        } else {
            @S.push: [ $card => @S[*-1][*-1] // Nil ].item
        }
    }
    reverse map *.key, ( @S[*-1][*-1], *.value ...^ !*.defined )
}

say lis1 <3 2 6 4 5 1>;
say lis1 <0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15>;

use Test;
is (lis  <3 2 6 4 5 1>), '2 4 5';
is (lis1 <3 2 6 4 5 1>), '2 4 5';
is (lis  <0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15>), '0 2 6 9 11 15';
is (lis1 <0 8 4 12 2 10 6 14 1 9 5 13 3 11 7 15>), '0 2 6 9 11 15';
