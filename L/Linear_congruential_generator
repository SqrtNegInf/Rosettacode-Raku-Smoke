#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Linear_congruential_generator
#c# 2015-10-25 <RC
#m# MOAR: OK
#j#  JVM: OK

# We'll define subroutines implementing the LCG algorithm for each version. We'll make them return a lazy list.

constant modulus = 2**31;
sub bsd  {
    $^seed, ( 1103515245 × * + 12345 ) % modulus ... *  # any value > 0 can replace '*'
}
sub ms   {
    map * +> 16, (
	$^seed, ( 214013 × * + 2531011 ) % modulus ... *    #             "
    )
}

say 'BSD LCG first 10 values (first one is the seed):';
.say for bsd(0)[^10];

say "\nMS LCG first 10 values (first one is the seed):";
.say for ms(0)[^10];

#BSD LCG first 10 values (first one is the seed):
my $bsd= qw<
0
12345
1406932606
654583775
1449466924
229283573
1109335178
1051550459
1293799192
794471793
>;

#MS LCG first 10 values (first one is the seed):
my $ms = qw<
0
38
7719
21238
2437
8855
11797
8365
32285
10450
>;

use Test;
say '';
is (bsd(0)[^10]), $bsd, 'BSD algorithm';
is (ms(0)[^10]), $ms, 'MS algorithm';
