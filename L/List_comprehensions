#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/List_comprehensions
#c# 2016-09-22 <RC
#m# MOAR: OK
#j#  JVM: OK

# Raku has single-dimensional list comprehensions that fall out naturally
# from nested modifiers; multidimensional comprehensions are also supported
# via the cross operator; however, Perl 6 does not (yet) support
# multi-dimensional list comprehensions with dependencies between the lists,
# so the most straightforward way is currently:

my $n = 20;

say my @res = gather for 1..$n -> $x {
    for $x..$n -> $y {
        for $y..$n -> $z {
            take $x,$y,$z if $x×$x + $y×$y == $z×$z;
        }
    }
}

# Note that gather/take is the primitive in Raku  corresponding to
# generators or co-routines in other languages. It is not, however, tied to
# function call syntax in Perl 6. We can get away with that because lists are
# lazy, and the demand for more of the list is implicit; it does not need to
# be driven by function calls.

my $ref = qq:to/END/;
3 4 5
5 12 13
6 8 10
8 15 17
9 12 15
12 16 20
END

use Test;
is @res.join("\n"), chomp $ref;
