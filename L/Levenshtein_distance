#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Levenshtein_distance
#c# 2016-02-01 <RC, 2022-08-25 >RC
#m# MOAR: OK
#j#  JVM: OK

# Implementation of the wikipedia algorithm. Since column 0 and row 0 are
# used for base distances, the original algorithm would require us to compare
# "@s[$i-1] eq @t[$j-1]", and reference the $m and $n separately. Prepending
# an unused value (undef) onto @s and @t makes their indices align with the
# $i,$j numbering of @d, and lets us use .end instead of $m,$n.

my  @res;

sub levenshtein_distance ( Str $s, Str $t --> Int ) {
    my @s = *, |$s.comb;
    my @t = *, |$t.comb;

    my @d;
    @d[$_;  0] = $_ for ^@s.end;
    @d[ 0; $_] = $_ for ^@t.end;

    for 1..@s.end X 1..@t.end -> ($i, $j) {
        @d[$i; $j] = @s[$i] eq @t[$j]
            ??   @d[$i-1; $j-1]    # No operation required when eq
            !! ( @d[$i-1; $j  ],   # Deletion
                 @d[$i  ; $j-1],   # Insertion
                 @d[$i-1; $j-1],   # Substitution
               ).min + 1;
    }

    @d[*-1][*-1]; # this does not work: @d[*-1;*-1];
}

for <kitten sitting>, <saturday sunday>, <rosettacode raisethysword>  -> ($s, $t) {
    @res.push: "A levenshtein_distance($s, $t) == "~ levenshtein_distance($s, $t);
}

for <kitten sitting saturday sunday rosettacode raisethysword>         -> $s, $t {
    @res.push: "B levenshtein_distance($s, $t) == "~ levenshtein_distance($s, $t);
}

.say for @res;

my $ref = qq:to/END/;
A levenshtein_distance(kitten, sitting) == 3
A levenshtein_distance(saturday, sunday) == 3
A levenshtein_distance(rosettacode, raisethysword) == 8
B levenshtein_distance(kitten, sitting) == 3
B levenshtein_distance(saturday, sunday) == 3
B levenshtein_distance(rosettacode, raisethysword) == 8
END

use Test;
is @res.join("\n"), chomp $ref;
