#!/usr/bin/env raku
#u# http://rosettacode.org/wiki/Latin_Squares_in_reduced_form/Randomizing_using_Jacobson_and_Matthews’_Technique
#c# 2021-07-30 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# somewhat limited testing, but better than none
#n# would be very slow with myRNG, just update results for now...
#n# Mac-Pro/iMac results diverge, use host-specific tests

srand 123456;

my @res;
my $result;

sub makeCube(\from, Int \n) {  
   my @c = [[[ 0 xx n ] xx n ] xx n ]; 
   #from.Bool ?? do race for ^n X ^n -> (\i,\j) { @c[i;j; { from[i;j]-1 } ] = 1 }
   ##          !! do race for ^n X ^n -> (\i,\j) { @c[i;j; {   (i+j)%n   } ] = 1 }
   from.Bool ?? do for ^n X ^n -> (\i,\j) { @c[i;j; { from[i;j]-1 } ] = 1 }
             !! do for ^n X ^n -> (\i,\j) { @c[i;j; {   (i+j)%n   } ] = 1 }
   return @c                   
}

sub shuffleCube(@c) {
   my ($rx, $ry, $rz); my \n = +@c; my Bool \proper = $ = True;

   repeat { ($rx ,$ry, $rz) = (^n).roll: 3 } until @c[$rx;$ry;$rz] == 0;
   loop { 
      my ($ox, $oy, $oz); 
      for ^n { last if @c[ $ox = $_ ;$ry;$rz] == 1 }
      if !proper and (^3).roll==0 { 
         for $ox^…^n { last if @c[ $ox = $_ ;$ry;$rz] == 1 } 
      }
      for ^n { last if @c[$rx; $oy = $_ ;$rz] == 1 }
      if !proper and (^3).roll==0 {
         for $oy^…^n { last if @c[$rx; $oy = $_ ;$rz] == 1 }
      } 
      for ^n { last if @c[$rx;$ry;  $oz = $_ ] == 1 }
      if !proper and (^3).roll==0 {
         for $oz^…^n { last if @c[$rx;$ry; $oz = $_ ] == 1 }
      }

      (@c[$rx;$ry;$rz],@c[$rx;$oy;$oz],@c[$ox;$ry;$oz],@c[$ox;$oy;$rz]) »+=»1;
      (@c[$rx;$ry;$oz],@c[$rx;$oy;$rz],@c[$ox;$ry;$rz],@c[$ox;$oy;$oz]) »-=»1; 

      @c[$ox;$oy;$oz] < 0 ?? (($rx,$ry,$rz) = ($ox,$oy,$oz)) !! last ;
      proper = False 
   }        
}

sub toMatrix(@c) {
   my \n = +@c;  
   my @m = [[0 xx n] xx n]; 
   for ^n X ^n -> (\i,\j) { 
      for ^n -> \k { if @c[i;j;k] != 0 { @m[i;j] = k and last } }
   }
   return @m
}

sub toReduced(@m is copy) { 
   my \n = +@m; 
   for 0…(n-2) -> \j {
      if ( @m[0;j] != j ) { 
         for j^…^n -> \k {
            if ( @m[0;k] == j ) { 
               for 0…^n -> \i { (@m[i;j], @m[i;k]) = (@m[i;k], @m[i;j]) }
               last 
            } 
         } 
      } 
   }   
   for 1…(n-2) -> \i {
      if ( @m[i;0] != i ) {
         for i^…^n -> \k { 
            if ( @m[k;0] == i ) { 
               for 0…^n -> \j { (@m[i;j], @m[k;j]) = (@m[k;j], @m[i;j]) }     
               last      
            }
         }
      } 
   } 
   return @m
}

sub printAs1based { say ($_ »+» 1).Str for @_.rotor: @_.elems.sqrt }

my (%freq, @c, @in);

#say "Part 1: 10,000 latin Squares of order 4 in reduced form:\n";
@in = [[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 1, 2], [4, 3, 2, 1]];
@c = makeCube(@in, 4); 
for ^5000 {
   shuffleCube @c ; 
   %freq{@c.&toMatrix.&toReduced».List.flat.Str}++
}    
for %freq.keys.sort -> $k { @res.push: %freq{$k} } # 'sort' needed for testing
#for %freq.kv -> $k, $v { printAs1based $k.split(' ');   say "\nOccurs $v times.\n" }

#say "Part 2: 10,000 latin Squares of order 5 in reduced form:\n";
@in = [ [1,2,3,4,5], [2,3,4,5,1], [3,4,5,1,2], [4,5,1,2,3], [5,1,2,3,4] ];
%freq = ();
@c = makeCube(@in, 5);
for ^1000 { 
   shuffleCube @c ; 
   %freq{@c.&toMatrix.&toReduced».List.flat.Str}++ 
}
#for %freq.values.kv -> $i, $j { printf "%2d(%3d)%s", $i+1, $j, ' ' }
for %freq.values.sort.kv -> $i, $j { $result ~= sprintf "%2d(%3d)%s", $i+1, $j, ' ' }

#`{{
say "\n\nPart 3: 750 latin squares of order 42, showing the last one:\n";
@c = makeCube([], 42); # (1..42).pick(*)
( for ^750 { shuffleCube @c } ) and printAs1based @c.&toMatrix».List.flat ;
}}

#`{{ just about timing, so don't test
say "\nPart 4: 100 latin squares of order 256:\n";
my $snapshot = now;
@c = makeCube([], 256);
for ^100 { shuffleCube @c } # without hyper, will do only 100 cycles 
say "Generated in { now - $snapshot } seconds."
}}

.say for @res;
say $result;

my $ref1-terminal = q:to/END/;
1239
1187
1266
1308
END

my $ref2-terminal = q:to/END/;
 1(  8)  2( 10)  3( 11)  4( 13)  5( 13)  6( 13)  7( 13)  8( 14)  9( 14) 10( 14) 11( 14) 12( 14) 13( 14) 14( 15) 15( 15) 16( 15) 17( 15) 18( 16) 19( 16) 20( 16) 21( 16) 22( 16) 23( 16) 24( 16) 25( 16) 26( 16) 27( 17) 28( 17) 29( 18) 30( 18) 31( 18) 32( 18) 33( 19) 34( 19) 35( 19) 36( 19) 37( 20) 38( 20) 39( 20) 40( 20) 41( 20) 42( 21) 43( 21) 44( 21) 45( 21) 46( 22) 47( 22) 48( 22) 49( 22) 50( 23) 51( 23) 52( 23) 53( 26) 54( 26) 55( 27) 56( 29) 
END

my $ref1-cronjob-imac = q:to/END/;
1239
1179
1262
1320
END

my $ref1-cronjob-mac-pro = q:to/END/;
1235
1175
1273
1317
END

my $ref2-cronjob-imac = q:to/END/;
 1( 11)  2( 11)  3( 12)  4( 12)  5( 12)  6( 12)  7( 12)  8( 13)  9( 13) 10( 14) 11( 14) 12( 14) 13( 14) 14( 14) 15( 14) 16( 15) 17( 15) 18( 15) 19( 15) 20( 15) 21( 15) 22( 15) 23( 16) 24( 16) 25( 16) 26( 16) 27( 16) 28( 17) 29( 18) 30( 19) 31( 19) 32( 19) 33( 19) 34( 20) 35( 20) 36( 20) 37( 20) 38( 20) 39( 20) 40( 21) 41( 21) 42( 21) 43( 21) 44( 21) 45( 22) 46( 22) 47( 23) 48( 23) 49( 23) 50( 23) 51( 24) 52( 24) 53( 25) 54( 25) 55( 25) 56( 28) 
END

my $ref2-cronjob-mac-pro = q:to/END/;
 1(  7)  2(  9)  3(  9)  4( 10)  5( 10)  6( 11)  7( 11)  8( 12)  9( 12) 10( 12) 11( 13) 12( 13) 13( 13) 14( 14) 15( 14) 16( 14) 17( 14) 18( 14) 19( 15) 20( 15) 21( 15) 22( 15) 23( 16) 24( 16) 25( 16) 26( 17) 27( 17) 28( 17) 29( 18) 30( 18) 31( 18) 32( 18) 33( 18) 34( 19) 35( 20) 36( 20) 37( 20) 38( 20) 39( 20) 40( 21) 41( 21) 42( 21) 43( 21) 44( 22) 45( 23) 46( 23) 47( 24) 48( 24) 49( 25) 50( 25) 51( 26) 52( 26) 53( 27) 54( 29) 55( 30) 56( 32) 
END

use Test;
if $*IN.t {
is @res.join("\n"), chomp $ref1-terminal;
is $result, chomp $ref2-terminal;
} else {
if qx/uname -a/ ~~ /'Mac-Pro'/ {
is @res.join("\n"), chomp $ref1-cronjob-mac-pro;
is $result, chomp $ref2-cronjob-mac-pro;
} else {
is @res.join("\n"), chomp $ref1-cronjob-imac;
is $result, chomp $ref2-cronjob-imac;
}
}
