#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Longest_common_subsequence
#c# 2015-11-30 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# because of bit-field operations, '+' is frequently used, so got rid of unary usage of '+' when not required

sub lcs(Str $xstr, Str $ystr) {
    return '' unless $xstr && $ystr;

    my ($x, $xs, $y, $ys) = $xstr.substr(0, 1), $xstr.substr(1), $ystr.substr(0, 1), $ystr.substr(1);
    return $x eq $y
        ?? $x ~ lcs($xs, $ys)
        !! max(:by{ $^a.chars }, lcs($xstr, $ys), lcs($xs, $ystr) );
}

sub lcs2(Str $xstr, Str $ystr) {
    my ($xlen, $ylen) = ($xstr, $ystr)Â».chars;
    my @lengths = map {[(0) xx ($ylen+1)]}, 0..$xlen;

    for $xstr.comb.kv -> \i, \x {
        for $ystr.comb.kv -> \j, \yy {                                                                  # yy is vim kludge
            @lengths[i+1;j+1] = x eq yy ?? @lengths[i;j]+1 !! (@lengths[i+1;j], @lengths[i;j+1]).max;
        }
    }

    my @x = $xstr.comb;
    my ($x, $y, $result) = $xlen, $ylen, '';
    while $x != 0 && $y != 0 {
        if @lengths[$x;$y] == @lengths[$x-1;$y] {
            $x--;
        }
        elsif @lengths[$x;$y] == @lengths[$x;$y-1] {
            $y--;
        }
        else {
            $result = @x[$x-1] ~ $result;
            $x--;
            $y--;
        }
    }
    $result
}

# Bit parallel dynamic programming with nearly linear complexity O(n). It is fast.

sub lcs3(Str $xstr, Str $ystr) {
    my ($a,$b) = ([$xstr.comb],[$ystr.comb]);

    my $positions;
    for $a.kv -> $i,$x { $positions{$x} +|= 1 +< ($i % +$a) };

    my $S = +^0;
    my $Vs = [];
    my ($y,$u);
    for (0..$b-1) -> $j {
        $y = $positions{$b[$j]} // 0;
        $u = $S +& $y;
        $S = ($S + $u) +| ($S - $u);
        $Vs[$j] = $S;
    }

    my ($i,$j) = ($a-1, $b-1);
    my $result = '';
    while ($i >= 0 && $j >= 0) {
        if ($Vs[$j] +& (1 +< $i)) { $i-- }
        else {
            unless ($j && ^$Vs[$j-1] +& (1 +< $i)) {
                $result = $a[$i] ~ $result;
                $i--;
            }
            $j--;
        }
    }
    return $result;
}

use Test;
say my $out1 = lcs('thisisa', 'pisatest');
is $out1, 'iss';

my $beg1 = now;
say my $out2 = lcs('testing123testing', 'thisisatest');
is $out2, 'tsitest';
say 'lcs1 took: ', now - $beg1;

my $beg2 = now;
is lcs2('testing123testing', 'thisisatest'), 'tsitest';
say 'lcs2 took: ', now - $beg2;

my $beg3 = now;
is lcs3('testing123testing', 'thisisatest'), 'tsitest';
say 'lcs3 took: ', now - $beg3;
