#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Longest_common_subsequence
#c# 2015-11-30 <RC, 2022-06-09 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# got rid of unary usage of '+', fiddle with sigils

sub lcs(Str $xstr, Str $ystr) {
    return '' unless $xstr && $ystr;

    my ($x, $xs, $y, $ys) = $xstr.substr(0, 1), $xstr.substr(1), $ystr.substr(0, 1), $ystr.substr(1);
    return $x eq $y
        ?? $x ~ lcs($xs, $ys)
        !! max(:by{ $^a.chars }, lcs($xstr, $ys), lcs($xs, $ystr) );
}

sub lcs2(Str $xstr, Str $ystr) {
    my ($xlen, $ylen) = ($xstr, $ystr)».chars;
    my @lengths = map { [(0) xx $ylen+1] }, ^$xlen;

    for $xstr.comb.kv -> \i, \x {
        for $ystr.comb.kv -> \j, \yy {                                                                  # yy is vim kludge
            @lengths[i+1;j+1] = x eq yy ?? @lengths[i;j]+1 !! (@lengths[i+1;j], @lengths[i;j+1]).max;
        }
    }

    my @x = $xstr.comb;
    my ($x, $y, $result) = $xlen, $ylen, '';
    while $x != 0 && $y != 0 {
        if @lengths[$x;$y] == @lengths[$x-1;$y] {
            $x--;
        } elsif @lengths[$x;$y] == @lengths[$x;$y-1] {
            $y--;
        } else {
            $result [R~]= @x[$x-1];
            $x--;
            $y--;
        }
    }
    $result
}

# Bit parallel dynamic programming with nearly linear complexity O(n). It is fast.


sub lcs3(Str $xstr, Str $ystr) {
    my (@a, @b) := ($xstr, $ystr)».comb;
    my (%positions, @Vs, $lcs);

    for @a.kv -> $i, $x { %positions{$x} +|= 1 +< ($i % @a) }
#   -> $i, $x { %positions{$x} +|= 1 +< ($i % @a) } for @a.kv;  # kooky, but it works

    my $S = +^ 0;
    for (0 ..^ @b) -> $j {
        my $u = $S +& (%positions{@b[$j]} // 0);
        @Vs[$j] = $S = ($S + $u) +| ($S - $u);
#       @Vs[$j] = $S = ($S + $_) +| ($S - $_) given $S +& (%positions{@b[$j]} // 0);    # quite a mouthful 
    }

    my ($i, $j) = @a-1, @b-1;
    while ($i ≥ 0 and $j ≥ 0) {
        unless (@Vs[$j] +& (1 +< $i)) {
            $lcs [R~]= @a[$i] unless $j and ^@Vs[$j-1] +& (1 +< $i);
            $j--
        }
        $i--
    }
    $lcs
}

use Test;
say my $out1 = lcs('thisisa', 'pisatest');
is $out1, 'iss';

my $beg1 = now;
say my $out2 = lcs('testing123testing', 'thisisatest');
is $out2, 'tsitest';
say 'lcs1 took: ', now - $beg1;

my $beg2 = now;
is lcs2('testing123testing', 'thisisatest'), 'tsitest';
say 'lcs2 took: ', now - $beg2;

my $beg3 = now;
is lcs3('testing123testing', 'thisisatest'), 'tsitest';
say 'lcs3 took: ', now - $beg3;
