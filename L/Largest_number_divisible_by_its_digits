#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Largest_number_divisible_by_its_digits
#c# 2017-09-02 <RC, 2018-10-13 >RC, 2020-07-19 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# OEIS:A115569 Lynch-Bell numbers
#n# better than 5-folder improvement with .race
#n# align with version on RC

my @res;

# base 10
my $magic-number = 9 × 8 × 7;                        # 504

my $div = 9876432 div $magic-number × $magic-number; # largest 7 digit multiple of 504 < 9876432

for $div, { $_ - $magic-number } ... * -> $test {    # only generate multiples of 504
    next if $test ~~ / <[05]> /;                     # skip numbers containing 0 or 5
    next if $test ~~ / (.).*$0 /;                    # skip numbers with non unique digits
    next unless all $test.comb.map: $test %% *;      # skip numbers that don't divide evenly by all digits

    @res.push: "Found $test";                               # Found a solution, display it
    for $test.comb {
        @res.push: sprintf "%s / %s = %s", $test, $_, $test / $_;
    }
    last
}

# base 16
my $hex = 'FEDCBA987654321';        # largest possible hex number
$magic-number = [lcm] 1 .. 15;   # find least common multiple
$div = :16($hex) div $magic-number × $magic-number;
 
# hunt for target stepping backwards in multiples of the lcm
my $target = ($div, * - $magic-number ... 0).race.first: -> \test {
    my \num= test.base(16);
    (num.contains('0') || num.comb.Bag.values.max > 1) ?? False !! True
};
my $hexnum = $target.base(16);
 
@res.push: "Found $hexnum"; # Found a solution, display it
 
@res.push: ' ' x 12~ 'In base 16'~ ' ' x 36~ 'In base 10';
for $hexnum.comb {
    @res.push: sprintf "%s / %s = %s  |  %d / %2d = %19d",
        $hexnum, $_, ($target / :16($_)).base(16),
        $target, :16($_), $target / :16($_);}

.say for @res;

my $ref = qq:to/END/;
Found 9867312
9867312 / 9 = 1096368
9867312 / 8 = 1233414
9867312 / 6 = 1644552
9867312 / 7 = 1409616
9867312 / 3 = 3289104
9867312 / 1 = 9867312
9867312 / 2 = 4933656
Found FEDCB59726A1348
            In base 16                                    In base 10
FEDCB59726A1348 / F = 10FDA5B4BE4F038  |  1147797065081426760 / 15 =   76519804338761784
FEDCB59726A1348 / E = 1234561D150B83C  |  1147797065081426760 / 14 =   81985504648673340
FEDCB59726A1348 / D = 139AD2E43E0C668  |  1147797065081426760 / 13 =   88292081929340520
FEDCB59726A1348 / C = 153D0F21EDE2C46  |  1147797065081426760 / 12 =   95649755423452230
FEDCB59726A1348 / B = 172B56538F25ED8  |  1147797065081426760 / 11 =  104345187734675160
FEDCB59726A1348 / 5 = 32F8F11E3AED0A8  |  1147797065081426760 /  5 =  229559413016285352
FEDCB59726A1348 / 9 = 1C5169829283B08  |  1147797065081426760 /  9 =  127533007231269640
FEDCB59726A1348 / 7 = 2468AC3A2A17078  |  1147797065081426760 /  7 =  163971009297346680
FEDCB59726A1348 / 2 = 7F6E5ACB93509A4  |  1147797065081426760 /  2 =  573898532540713380
FEDCB59726A1348 / 6 = 2A7A1E43DBC588C  |  1147797065081426760 /  6 =  191299510846904460
FEDCB59726A1348 / A = 197C788F1D76854  |  1147797065081426760 / 10 =  114779706508142676
FEDCB59726A1348 / 1 = FEDCB59726A1348  |  1147797065081426760 /  1 = 1147797065081426760
FEDCB59726A1348 / 3 = 54F43C87B78B118  |  1147797065081426760 /  3 =  382599021693808920
FEDCB59726A1348 / 4 = 3FB72D65C9A84D2  |  1147797065081426760 /  4 =  286949266270356690
FEDCB59726A1348 / 8 = 1FDB96B2E4D4269  |  1147797065081426760 /  8 =  143474633135178345
END

use Test;
is @res.join("\n"), chomp $ref;
