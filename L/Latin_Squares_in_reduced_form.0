#!/usr/bin/env perl6
#n# NOT CURRENT, NOT SMOKE-TESTED
#u# http://rosettacode.org/wiki/Latin_Squares_in_reduced_form
#t# toodamnslow
#c# 2019-12-xx >RC
#m# MOAR: OK
#j#  JVM: OK
#n# performance issues: fine for 4/5, but impossibly slow for 6 (multi-day run-time)
#n# incomplete: need sub calc of n-sized square, and proper extraction of results

my @res[9408]; # for concurrency

# utilities: factorial, sub-factorial, derangements
constant factorial = 1, |[\×] 1..*;
sub prefix:<!>(Int $n) { (1, 0, 1, -> $a, $b { ($++ + 2) × ($b + $a) } ... *)[$n] }
sub derangements(@l) { @l.permutations.grep(-> @p { none(@p Zeqv @l) }) }

my $n = 6;
my @l = 1 X+ ^$n;

#my %D = derangements(@l).classify: *.[0], :as(*.Array);
my %D = derangements(@l).classify(*.[0]); # list

my atomicint $i;

#for [X] (^(!$n/($n-1))) xx $n-1 -> $tuple {
([X] (^(!$n/($n-1))) xx $n-1).race.map: -> $tuple {
    my @c.push: @l; 
    @c.push: %D{2}[$tuple[0]].Array;
INNER:
    for 3 .. $n -> $x {
        my @try = %D{$x}[$tuple[$x-2]].Array;
        last INNER if [or] @try Z== @c[$_].Array for 1..@c-1;
        @c.push: @try;

    }
    next unless @c == $n;
#note 'testing ' ~ join(' : ', @c);
    next unless [==] [Z+] @c;                                                       # check 1: equal column sums

note 'adding: ' ~ join(' : ', @c);          # display as one line 
    @res[$i⚛++] = join("\n", @c) ~ "\n";   # or as square
}

#exit;
#say +@res; exit;
.say for @res; exit;

my @x = <0 1 1 1 4 56 9408>;
printf "Order $_: Size %-4d x $_! x {$_-1}! => Total %d", @x[$_], @x[$_] × factorial[$_] × factorial[$_-1] for 1..6;

my $ref = q:to/END/;
1 2 3 4
2 1 4 3
3 4 1 2
4 3 2 1

1 2 3 4
2 1 4 3
3 4 2 1
4 3 1 2

1 2 3 4
2 3 4 1
3 4 1 2
4 1 2 3

1 2 3 4
2 4 1 3
3 1 4 2
4 3 2 1

Order 1: Size 1    x 1! x 0! => Total 1
Order 2: Size 1    x 2! x 1! => Total 2
Order 3: Size 1    x 3! x 2! => Total 12
Order 4: Size 4    x 4! x 3! => Total 576
Order 5: Size 56   x 5! x 4! => Total 161280
Order 6: Size 9408 x 6! x 5! => Total 812851200
END

use Test;
is @res.join("\n"), chomp $ref;
