#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Logical_operations
#c# 2016-04-24 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n#  where 'say' just works, gather/take construct sometimes requires .gist or .raku (they are equivalent here)

#Raku has an abundance of logical operators for various purposes.

sub logic($a,$b) {
return 
 gather {
    take "$a && $b is", $a && $b;     # short-circuiting
    take "$a || $b is", $a || $b;     # short-circuiting
    take "$a ^^ $b is", ($a ^^ $b).gist;    # emits Nil
    take "!$a is",     !$a;

    take "$a ?& $b is", $a ?& $b;     # non-short-circuiting
    take "$a ?| $b is", $a ?| $b;     # non-short-circuiting
    take "$a ?^ $b is", $a ?^ $b;     # non-short-circuiting

    take "$a +& $b is", $a +& $b;     # numeric bitwise
    take "$a +| $b is", $a +| $b;     # numeric bitwise
    take "$a +^ $b is", $a +^ $b;     # numeric bitwise

    take "$a ~& $b is", $a ~& $b;     # buffer bitwise
    take "$a ~| $b is", $a ~| $b;     # buffer bitwise
    take "$a ~^ $b is", $a ~| $b;     # buffer bitwise

    take "$a & $b is", ($a & $b).raku;       # junctional/autothreading
    take "$a | $b is", ($a | $b).gist;       # junctional/autothreading
    take "$a ^ $b is", ($a ^ $b).raku;       # junctional/autothreading

    take "$a and $b is", ($a and $b); # loose short-circuiting
    take "$a or $b is",  ($a or $b);  # loose short-circuiting
    take "$a xor $b is", ($a xor $b).raku; # emits Nil 
    take "not $a is",    not $a;
 }
}

my @res = logic(3,10);
.put for @res;

my $ref = qq:to/END/;
3 && 10 is 10
3 || 10 is 3
3 ^^ 10 is Nil
!3 is False
3 ?& 10 is True
3 ?| 10 is True
3 ?^ 10 is False
3 +& 10 is 2
3 +| 10 is 11
3 +^ 10 is 9
3 ~& 10 is 1
3 ~| 10 is 30
3 ~^ 10 is 30
3 & 10 is all(3, 10)
3 | 10 is any(3, 10)
3 ^ 10 is one(3, 10)
3 and 10 is 10
3 or 10 is 3
3 xor 10 is Nil
not 3 is False
END


use Test;
is join("\n", @res), chomp $ref;
