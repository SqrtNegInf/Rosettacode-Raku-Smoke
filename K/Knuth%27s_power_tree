#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Knuth's_power_tree
#c# 2016-05-23 <RC, 2018-05-20 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# JVM more accurate than MOAR for 1.1 ** 81? (see end)

srand 123456;

sub power-path ($n ) {
    state @unused_nodes = (2,);
    state @power-tree = (False,0,1);

    until @power-tree[$n].defined {
        my $node = @unused_nodes.shift;

        for  $node X+ power-path($node).reverse {
        #for  $node X+ power-path($node).pick(*) {
            next if @power-tree[$_].defined;
            @unused_nodes.push($_);
            @power-tree[$_]= $node;
        }        
    }

    ( $n, { @power-tree[$_] } ...^ 0 ).reverse;
}

multi power ( $, 0 ) { 1 };
multi power ( $n, $exponent ) {
    state  %p;
    my     %r =  %p{$n}  // ( 0 => 1, 1 => $n ) ;  

    for power-path( $exponent ).rotor( 2 => -1 ) -> ( $p, $c ) {
        %r{ $c } = %r{ $p } Ã— %r{ $c - $p }
    }

    %p{$n} := %r ;
    %r{ $exponent }
}

#say 'Power paths: ',      pairs map *.&power-path,    ^18;
#say '2 ** key = value: ', pairs map { 2.&power($_) }, ^18; 
my @res;
for ^18 -> $i {
    @res.push: "$i: "~ power-path $i;
    @res.push: "2^$i = "~ power 2,$i;
}

@res.push: '191: '~     power-path 191;
@res.push: '3^191 = '~  power   3, 191;
@res.push: '81: '~      power-path  81;
#@res.push: '1.1^81 = '~ (power 1.1,  81).round(.00000000001); # see at end

.say for @res;

my $ref = qq:to/END/;
0: 
2^0 = 1
1: 1
2^1 = 2
2: 1 2
2^2 = 4
3: 1 2 3
2^3 = 8
4: 1 2 4
2^4 = 16
5: 1 2 4 5
2^5 = 32
6: 1 2 4 6
2^6 = 64
7: 1 2 4 6 7
2^7 = 128
8: 1 2 4 8
2^8 = 256
9: 1 2 4 8 9
2^9 = 512
10: 1 2 4 8 10
2^10 = 1024
11: 1 2 4 8 10 11
2^11 = 2048
12: 1 2 4 8 12
2^12 = 4096
13: 1 2 4 8 12 13
2^13 = 8192
14: 1 2 4 8 12 14
2^14 = 16384
15: 1 2 4 8 12 14 15
2^15 = 32768
16: 1 2 4 8 16
2^16 = 65536
17: 1 2 4 8 16 17
2^17 = 131072
191: 1 2 4 8 16 32 64 128 160 176 184 188 190 191
3^191 = 13494588674281093803728157396523884917402502294030101914066705367021922008906273586058258347
81: 1 2 4 8 16 32 64 80 81
END
#1.1^81 = 2253.24023604401

use Test;
is @res.join("\n"), chomp $ref;

exit unless $*VM ~~ /jvm/;
say 'Test JVM against native for 1.1**81 (MOAR is less accurate)';
is (1.1**81), power 1.1, 81;
