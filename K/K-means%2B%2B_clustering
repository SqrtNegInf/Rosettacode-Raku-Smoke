#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/K-means%2B%2B_clustering
#c# 2016-06-04 <RC, 2018-05-02 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# hash order randomization required tweak to algorithm
#n# 2023-01-13 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

# We use Complex numbers to represent points in the plane. We feed the algorithm with three 
# artificially made clouds of points so we can easily see if the output makes sense.

sub infix:«-means++»(Int $K, @data) {
    my @means = @data[@data.elems×$rng.next-rat]; #.pick;
    until @means == $K {
        my @cumulD2 = [\+] @data.map: -> $x {
            min @means.map: { abs($x - $_)**2 }
        }
        my $rand = $rng.next-rat × @cumulD2[*-1];
        @means.push: @data[
            (^@data).first: { @cumulD2[$_] > $rand }
        ];
    }
    sub cluster { @data.classify: -> $x { @means.min: { abs($_ - $x) } } }
    loop (
        my %cluster;
        $*VM ~~ /jvm/ ?? $*TOLERANCE < [+] (@means Z-      keys (%cluster = cluster))».abs X** 2 
                      !! $*TOLERANCE < [+] (@means Z- sort keys (%cluster = cluster))».abs X** 2;
        @means = %cluster.values.map( { .elems R/ [+] @$_ } )
    ) { ; }
    return @means;
}

my @centers = 0, 5, 3 + 2i;
my @data = flat @centers.map: { ($_ + .5 - $rng.next-rat + (.5 - $rng.next-rat) × i) xx 100 }
@data .= &pickall;

my @res.push: $_ for 3-means++ @data;

.say for @res.sort;

my $moar = qq:to/END/;
-0.1115674035933214-0.38426474345204564i
2.957137445270286+2.094498827838054i
5.149822316506206-0.058119410156620366i
END

my $jvm = qq:to/END/;
5.030577139561266-0.011412509918882425i
3.013972386574372+2.040514277466034i
0.04487162381746918-0.0028241040668678264i
END

use Test;
is @res.join("\n"), chomp $*VM ~~ /jvm/ ?? $jvm !! $moar;
