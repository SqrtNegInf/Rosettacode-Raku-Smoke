#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Knuth's_algorithm_S
#c# 2016-01-05 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# cf -2 version
#n# 2023-01-11 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub s_of_n_creator($n) {
    my (@sample, $i);
    -> $item {
        if    ++$i      <= $n { push @sample, $item      }
        elsif   floor($i×$rng.next-rat) <  $n { @sample[$n×$rng.next-rat] = $item }
        @sample
    }
}

# with the switch to myRNG, this fiddly-ness is obsolete
# for MoarVM, needs to be defined even if not used, doesn't matter what content it has as long as it's a numeric range,
# otherwise results change slightly. I blame 'srand'...
#my @items = 'a'..'z';  # no
#my @items = -10..10;   # ok
#my @items  =   0.. 0;   # ok

my @bin;

for ^10000 {
    my &s_of_n = s_of_n_creator(3);
    my @sample;
    #for @items -> $item {
        @sample = .&s_of_n for ^10;
    #}
    @bin[$_]++ for @sample;
    #for @sample -> $s {
    #    @bin[$s]++;
    #}
}

say my $result = @bin.join: ' ';

my $ref = '3011 2970 3004 3016 3030 2922 3047 3031 2981 2988';

use Test;
is $result, chomp $ref;
