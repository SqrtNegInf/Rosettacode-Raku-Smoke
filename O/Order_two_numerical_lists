#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Order_two_numerical_lists
#c# 2016-01-22 <>RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2020-10-07 now stable?
#n# 2021-10-04 wow, been ignoring this for a year now...  Try testing new results, see what happens. (2021-10-22: shift again)
#n# 2023-01-27 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub pick-all (@a is copy) is export {
    my $rng = myRNG.new( :seed(123456) );
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) Ã— $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

my @a = <1 2 4>;
my @b = <1 2 4>;
my @res.push: @a ~ " before " ~ @b ~ " = " ~ ~(@a before @b);

@a = <1 2 4>;
@b = <1 2>;
@res.push: @a ~ " before " ~ @b ~ " = " ~ ~(@a before @b);

@a = <1 2>;
@b = <1 2 4>;
@res.push: @a ~ " before " ~ @b ~ " = " ~ ~(@a before @b);

for 1..10 {
   #my @a = flat (^100).roll((2..3).pick);
   #my @b = flat @a.map: { Bool.pick ?? $_ !! (^100).roll((0..2).pick) }
    my @a = flat (^100).&pick-all.head(<2 3 4>[3*$rng.next-rat]);
    my @b = flat @a.map: { .5 < $rng.next-rat ?? $_ !! (^100).&pick-all.head(<0 1 2>[3*$rng.next-rat]) }
    @res.push: @a ~ " before " ~ @b ~ " = " ~ ~(@a before @b);
}

.say for @res;

my $ref = qq:to/END/;
1 2 4 before 1 2 4 = False
1 2 4 before 1 2 = False
1 2 before 1 2 4 = True
21 0 before 21 0 = False
21 0 28 before 21 21 0 28 = True
21 0 28 92 before 21 21 92 = True
21 0 before 21 0 0 = True
21 0 before 21 0 = False
21 0 28 92 before 0 28 92 = False
21 0 28 92 before 21 0 28 = False
21 0 28 before 21 0 0 21 = False
21 0 before 21 21 = True
21 0 28 92 before 21 0 21 = False
END

use Test;
is @res.join("\n"), chomp $ref;
