#!/usr/bin/env raku
#u# https://rosettacode.org/wiki/One-two_primes
#c# 2023-05-16 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# just test two of the multiple combinations from generalized task
#n# Really, the only one that is a little tricky is the first one (0,1). That one required some specialized logic. 
#n# All of the rest would work with the task specific version with different hard coded digits.
#n# OEIS:A036929 - Smallest n digit prime using only 0 and 1 (or '0' if none exists)
#n# OEIS:A036951 - Smallest n digit prime using only 8 and 9 (or '0' if none exists)

my @res;

for 929,(0,1),
#    229,(1,2),930,(1,3),931,(1,4),932,(1,5),933,(1,6),934,(1,7),935,(1,8),936,(1,9),
#    937,(2,3),938,(2,7),939,(2,9),
#    940,(3,4),941,(3,5),942,(3,7),943,(3,8),
#    944,(4,7),945,(4,9),
#    946,(5,7),947,(5,9),
#    948,(6,7),
#    949,(7,8),950,(7,9),
    951,(8,9)
  -> $oeis, $p {
    @res.push: "\nOEIS:A036{$oeis} - Smallest n digit prime using only {$p[0]} and {$p[1]} (or '0' if none exists):";
    sub condense ($n) { $n.subst(/(.) {} :my $r=$0; ($r**{9..*})/, -> $/ {"($0 x {1+$1.chars}) "}) }
    sub build ($d, $s='') { take $s and return unless $d; build($d-1,$s~$_) for |$p }
    sub get-prime ($d) {
        ($p[0] ?? (gather build $d).first: &is-prime
        !! (gather build $d-1, $p[1]).first: &is-prime
        ) // '0'
    }
    @res.push: sprintf "%4d: %s", $_, condense .&get-prime for flat 1..20, 100, 200;
}

.say for @res;

my $ref = q:to/END/;

OEIS:A036929 - Smallest n digit prime using only 0 and 1 (or '0' if none exists):
   1: 0
   2: 11
   3: 101
   4: 0
   5: 10111
   6: 101111
   7: 1011001
   8: 10010101
   9: 100100111
  10: 1000001011
  11: 10000001101
  12: 100000001111
  13: 1000000111001
  14: 10000000001011
  15: 100000000100101
  16: 1(0 x 10) 11101
  17: 1(0 x 12) 1101
  18: 1(0 x 11) 100111
  19: 1(0 x 13) 10011
  20: 1(0 x 12) 1100101
 100: 1(0 x 93) 101101
 200: 1(0 x 189) 1110101011

OEIS:A036951 - Smallest n digit prime using only 8 and 9 (or '0' if none exists):
   1: 0
   2: 89
   3: 0
   4: 8999
   5: 89899
   6: 888989
   7: 8888989
   8: 88888999
   9: 888898889
  10: 8888888989
  11: 88888888999
  12: 888888898999
  13: 8888888999899
  14: (8 x 13) 9
  15: (8 x 10) 98999
  16: (8 x 10) 989999
  17: (8 x 16) 9
  18: (8 x 13) 98889
  19: (8 x 16) 989
  20: (8 x 13) 9888989
 100: (8 x 91) 998998889
 200: (8 x 190) 9888898989
END

use Test;
is @res.join("\n"), chomp $ref;
