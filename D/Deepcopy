#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Deepcopy
#c# 2019-04-03 <RC, 2020-08-25 >RC
#m# MOAR: OK
#j# JVM:  OK

my @res;

#`{{
Raku doesn't currently provide a proper mechanism for deep copies, but depending on your requirements you could use one of these work-arounds:


1) Use .deepmap(*.clone):
.deepmap constructs a copy of the data structure, and .clone makes a shallow copy of each leaf node. Limitations:

 Hangs indefinitely when given a self-referential data structure.
 Descends only into Iterable collections (like Array/Hash), which means that a Pair or a typical custom object would be considered a leaf node.
}}

my %x1 = foo => 0, bar => [0, 1];
my %y1 = %x1.deepmap(*.clone);

%x1<bar>[1]++;
@res.push: %x1.gist;
@res.push: %y1.gist;


#`{{
2) Use .raku.EVAL:
.raku serializes the data structure to Raku code, and .EVAL deserializes it. Limitations:

 Doesn't work correctly if the data structure contains elements that can't be properly serialized, such as closures or file handles.
}}

my %x2 = foo => 0, bar => [0, 1];
my %y2 = %x2.raku.EVAL;

%x2<bar>[1]++;
@res.push: %x2.gist;
@res.push: %y2.gist;

.say for @res; 

my $ref = q:to/END/;
{bar => [0 2], foo => 0}
{bar => [0 1], foo => 0}
{bar => [0 2], foo => 0}
{bar => [0 1], foo => 0}
END

use Test;
is @res.join("\n"), chomp $ref;
