#!/usr/bin/env raku
#u# https://www.rosettacode.org/wiki/Determine_if_a_string_has_all_unique_characters
#c# 2019-10-30 <RC, 2020-08-25 >RC, 2023-10-12 <RC
#m# MOAR: OK
#j# JVM:  BROKEN
#n# for JVM: NFC not yet implemented. Sorry.
#n# '.raku' serves to quote the output, useful for empty test string

my @res;

  -> $str {
    my $i = 0;
    @res.push: "\n{$str.raku} (length: {$str.chars}), has ";
    my %m = $str.comb.Bag;
    if any(%m.values) > 1 {
        @res[*-1] ~= "duplicated characters:";
        @res.push: "'{.key}' ({.key.uninames}; hex ordinal: {(.key.ords).fmt: "0x%X"})" ~
        " in positions: {.value.join: ', '}" for %m.grep( *.value > 1 ).sort( *.value[0] ).sort;
    } else {
        @res[*-1] ~= "no duplicated characters."
    }
} for
    '',
    '.',
    'abcABC',
    'XYZ ZYX',
    '1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ',
    '01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X',
    '🦋🙂👨‍👩‍👧‍👦🙄ΔΔ̂ 🦋Δ👍👨‍👩‍👧‍👦';


.say for @res;

my $ref = q:to/END/;

"" (length: 0), has no duplicated characters.

"." (length: 1), has no duplicated characters.

"abcABC" (length: 6), has no duplicated characters.

"XYZ ZYX" (length: 7), has duplicated characters:
'X' (LATIN CAPITAL LETTER X; hex ordinal: 0x58) in positions: 2
'Y' (LATIN CAPITAL LETTER Y; hex ordinal: 0x59) in positions: 2
'Z' (LATIN CAPITAL LETTER Z; hex ordinal: 0x5A) in positions: 2

"1234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ" (length: 36), has duplicated characters:
'0' (DIGIT ZERO; hex ordinal: 0x30) in positions: 2

"01234567890ABCDEFGHIJKLMN0PQRSTUVWXYZ0X" (length: 39), has duplicated characters:
'0' (DIGIT ZERO; hex ordinal: 0x30) in positions: 4
'X' (LATIN CAPITAL LETTER X; hex ordinal: 0x58) in positions: 2

"🦋🙂👨‍👩‍👧‍👦🙄ΔΔ̂ 🦋Δ👍👨‍👩‍👧‍👦" (length: 11), has duplicated characters:
'Δ' (GREEK CAPITAL LETTER DELTA; hex ordinal: 0x394) in positions: 2
'👨‍👩‍👧‍👦' (MAN ZERO WIDTH JOINER WOMAN ZERO WIDTH JOINER GIRL ZERO WIDTH JOINER BOY; hex ordinal: 0x1F468 0x200D 0x1F469 0x200D 0x1F467 0x200D 0x1F466) in positions: 2
'🦋' (BUTTERFLY; hex ordinal: 0x1F98B) in positions: 2
END

use Test;
is @res.join("\n"), chomp $ref;
