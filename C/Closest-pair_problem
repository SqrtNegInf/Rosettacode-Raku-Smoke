#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Closest-pair-problem
#c# 2016-04-05 <RC, 2022-06-10 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# always random points, just test that both methods agree
#n# 2022-06-10 surprise! refactor made it 2x faster
#n#            next step: concurrency (simpple addition of .race doesn't cut it)

#srand 123456;

sub dist-squared-slow (@a, @b) { [+] (@a Z- @b) X ² }  # cute, but much slower

sub dist-squared(@a, @b) { (@a[0] - @b[0])² + (@a[1] - @b[1])² }

sub closest-pair-simple(@points is copy) {
    #return ∞ if @points < 2;
    my ($a, $b, $d2) = |@points[0,1], dist-squared(|@points[0,1]);
    while @points {
        my \p = pop @points;
        for @points -> \l {
            ($a, $b, $d2) = p, l, $_ if $_ < $d2 given dist-squared(p, l);
        }
    }
    $a, $b, $d2.sqrt
}

sub closest-pair(@r) {
    closest-pair-real (@r.sort: *.[0]), @r.sort: *.[1]
}

sub closest-pair-real(@rx, @ry) {
    return closest-pair-simple(@rx) if @rx ≤ 3;

    my (@yR, @yL);
    my (@xP, @yP) := (@rx, @ry);
    my \N  = @xP;
    my \midx = ceiling(N/2) - 1;
    my @PL := @xP[     0 ..  midx];
    my @PR := @xP[midx+1 ..^ N   ];
    my \xm  = @xP[midx;0];
    (.[0] ≤ xm ?? @yR !! @yL).push: @$_ for @yP;
    my (\al, \bl, \dL) = closest-pair-real(@PL, @yR);
    my (\ar, \br, \dR) = closest-pair-real(@PR, @yL);
    my ($w1, $w2, $closest) = dR < dL ?? (ar, br, dR) !! (al, bl, dL);
    my @yS = @yP.grep: { (xm - .[0]).abs < $closest }

    for 0 ..^ @yS -> \i {
        for i+1 ..^ @yS -> \k {
            next unless @yS[k;1] - @yS[i;1] < $closest;
            ($w1, $w2, $closest) = |@yS[k, i], $_ if $_ < $closest given dist-squared(|@yS[k, i]).sqrt;
        }
    }
    $w1, $w2, $closest
}

my @points = (^1000).map: { [rand × 20 - 10, rand × 20 - 10] }

#my $start = now;
my ($af, $bf, $df) = closest-pair(@points);
say "fast $df at [$af], [$bf]";
#say now - $start;

#$start = now;
my ($as, $bs, $ds) = closest-pair-simple(@points);
say "slow $ds at [$as], [$bs]";
#say now - $start;

use Test;
is $df, $ds;
