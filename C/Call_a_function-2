#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Call_a_function
#c# 2019-09-25 NOT ON RC (see .1 version)
#m# MOAR: OK
#j# JVM:  OK
#n# entry was by Tim Toady in 2011 (no modifications since)
#n# validated the listed function call syntax (it all works, with some effort)

my (@f0, @i0, @f1, @j1, @l1, @f2, @k2, @m2, @f3, @g3, @h3, @n3);

multi f ()          { state $x;                                    @f0.push: "f0-" ~ ++$x }
multi f ($a)        { state $x; die if 1  != $a;                   @f1.push: "f1-" ~ ++$x }
multi f ($a,$b)     { state $x; die if 3  != $a+$b;                @f2.push: "f2-" ~ ++$x }
multi f (@a)        { state $x; die if @a != [2,3,4];              @f3.push: "f3-" ~ ++$x }
multi f ($a,$b,$c)  { state $x; die if 2  != $a || 4 != $c;        @f3.push: "F3-" ~ ++$x }
sub   g ($a,*@b)    { state $x; die if @b != [2,3,4] || 1 != $a;   @g3.push: "g3-" ~ ++$x }

my \i = ->          { state $x;                                    @i0.push: "i0-" ~ ++$x }
my \l = -> $a       { state $x; die if 1 != $a;                    @l1.push: "l1-" ~ ++$x }
my \m = -> $a,$b    { state $x; die if 1 != $a || 2 != $b;         @m2.push: "m2-" ~ ++$x }
my \n = -> @a       { state $x; die if @a != [2,3,4];              @n3.push: "n3-" ~ ++$x }

Int.^add_method( 'j', method () 
                    { state $x; die if 1 != self;                  @j1.push: "j1-" ~ ++$x } );
Int.^add_method( 'k', method ($a) 
                    { state $x; die if 1 != self || 2 != $a;       @k2.push: "k2-" ~ ++$x } );
Int.^add_method( 'h', method (@a) 
                    { state $x; die if @a != [2,3,4] || 1 != self; @h3.push: "h3-" ~ ++$x } );

my $ref   =  &f;  # soft ref
my :($f, $g) :=  (&f, &g);        # see jnthn's comment in https://github.com/rakudo/rakudo/issues/5194
#y $f    :=  &f;  # hard ref
#y $g    :=  &g;  # hard ref
my $f-sym = '&f'; # symbolic ref
my $g-sym = '&g'; # symbolic ref
my $j-sym =  'j'; # symbolic ref
my $k-sym =  'k'; # symbolic ref
my $h-sym =  'h'; # symbolic ref

#Calling a function with no arguments:

f;            # f0-1  as list operator
f();          # f0-2  as function
i.();         # i0-1  as function, explicit postfix form  # defined via pointy-block (also see Church_numerals)
$ref();       # f0-3  as object invocation
$ref.();      # f0-4  as object invocation, explicit postfix
&f();         # f0-5  as object invocation
&f.();        # f0-6  as object invocation, explicit postfix
::($f-sym)(); # f0-7  as symbolic ref
say join ' ', @f0, @i0;

#Calling a function with exactly one argument:

f 1;          #  f1-1  as list operator
f(1);         #  f1-2  as named function
l.(1);        #  l1-1  as named function, explicit postfix  # defined via pointy-block
$f(1);        #  f1-3  as object invocation (must be hard ref)   
$ref.(1);     #  f1-4  as object invocation, explicit postfix
1.$f;         #  f1-5  as pseudo-method meaning $f(1) (hard ref only)
1.$f();       #  f1-6  as pseudo-method meaning $f(1) (hard ref only)
1.&f;         #  f1-7  as pseudo-method meaning &f(1) (is hard f)
1.&f();       #  f1-8  as pseudo-method meaning &f(1) (is hard f)
1.j;          #  j1-1  as method via dispatcher             # required custom routine, 'Int.^add_method'
1.j();        #  j1-2  as method via dispatcher
1."$j-sym"(); #  j1-3  as method via dispatcher, symbolic
say join ' ', @f1, @l1, @j1;

# Calling a function with exactly two arguments:

f 1,2;         #  f2-1  as list operator
f(1,2);        #  f2-2  as named function
m.(1,2);       #  m2-1  as named function, explicit postfix  # defined via pointy-block
$ref(1,2);     #  f2-3  as object invocation (must be hard ref)
$ref.(1,2);    #  f2-4  as object invocation, explicit postfix
1.$f: 2;       #  f2-5  as pseudo-method meaning $f(1,2) (hard ref only)
1.$f(2);       #  f2-6  as pseudo-method meaning $f(1,2) (hard ref only)
1.&f: 2;       #  f2-7  as pseudo-method meaning &f(1,2) (is hard f)
1.&f(2);       #  f2-8  as pseudo-method meaning &f(1,2) (is hard f)
1.k: 2;        #  k2-1  as method via dispatcher             # required custom routine, 'Int.^add_method'
1.k(2);        #  k2-2  as method via dispatcher
1."$k-sym"(2); #  k2-3  as method via dispatcher, symbolic
say join ' ', @f2, @k2, @m2;

# Calling a function with a variable number of arguments (varargs):

my @args = 2,3,4;

f @args;           #  f3-1  as list operator
f(@args);          #  f3-2  as named function
n.(@args);         #  n3-1  as named function, explicit postfix  # defined via pointy-block
$ref(@args);       #  f3-3  as object invocation (must be hard ref)
$ref.(@args);      #  f3-4  as object invocation, explicit postfix
1.$g: @args;       #  g3-1  as pseudo-method meaning $f(1,@args) (hard ref)
1.$g(@args);       #  g3-2  as pseudo-method meaning $f(1,@args) (hard ref)
1.&g: @args;       #  g3-3  as pseudo-method meaning &f(1,@args)
1.&g(@args);       #  g3-4  as pseudo-method meaning &f(1,@args)
1.h: @args;        #  h3-1  as method via dispatcher         # required custom routine, 'Int.^add_method'
1.h(@args);        #  h3-2  as method via dispatcher
1."$h-sym"(@args); #  h3-3  as method via dispatcher, symbolic
f(|@args);         #  F3-1  equivalent to f(1,2,3)
say join ' ', @f3, @g3, @h3, @n3;

my $reference = qq:to/END/;
f0-1 f0-2 f0-3 f0-4 f0-5 f0-6 f0-7
i0-1
f1-1 f1-2 f1-3 f1-4 f1-5 f1-6 f1-7 f1-8
j1-1 j1-2 j1-3
l1-1
f2-1 f2-2 f2-3 f2-4 f2-5 f2-6 f2-7 f2-8
k2-1 k2-2 k2-3
m2-1
f3-1 f3-2 f3-3 f3-4 F3-1
g3-1 g3-2 g3-3 g3-4
h3-1 h3-2 h3-3
n3-1
END

use Test;
is (@f0, @i0, @f1, @j1, @l1, @f2, @k2, @m2, @f3, @g3, @h3, @n3).join("\n"), chomp $reference;
