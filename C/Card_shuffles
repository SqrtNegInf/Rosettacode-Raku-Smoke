#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Card_shuffles
#c# 2016-05-22 <RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2022-12-31 replace call to built-in 'rand' for output stability

use myRNG;
my $rng = myRNG.new( :seed(123456) );

sub overhand ( @cards ) {
   #my @splits = roll 10, ^( @cards.elems div 5 )+1;
    my @foo = ^( @cards.elems div 5 )+1;
    my @splits.push: @foo[@foo.elemsÃ—$rng.next-rat] for ^10;
    @cards.rotor( @splits, :partial ).reverse.flat
}

sub riffle ( @pile1 is copy ) {
    my @pile2 = @pile1.splice: @pile1.elems div 2 ;
    roundrobin(
        @pile1.rotor(((1..3) xx 7).&pickall.head(7), :partial ),
        @pile2.rotor(((1..3) xx 9).&pickall.head(9), :partial ),
        :slip)
}

my @cards = ^20;
@cards .= &overhand for ^10;
put @cards;

my @cards2 = ^20;
@cards2 .= &riffle for ^10;
put @cards2;

put my $cards3 = (^20).&pickall;

use Test;
is @cards,  '4 3 6 8 7 2 5 9 0 19 14 1 12 13 18 15 10 11 16 17';
is @cards2, '0 1 2 10 11 12 3 4 5 6 7 8 16 17 18 9 13 14 15 19';
is $cards3, '2 0 17 14 1 18 3 9 10 11 15 4 5 16 19 8 7 12 6 13';
