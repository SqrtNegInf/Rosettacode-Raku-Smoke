#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Calculating_the_value_of_e
#c# 2018-04-21 <RC, 2018-05-08 <RC, 2022-09-18 <RC, 2022-10-16 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# D.Conway: http://blogs.perl.org/users/damian_conway/2019/09/to-compute-a-constant-of-calculusa-treatise-on-multiple-ways.html
#n#  1 + Σ(1, ∞, 1∕*!) @ https://www.reddit.com/r/perl6/comments/cwk07i/perl_or_math_why_choose_defining_e_in_more/
#n# see also: E/Engel_expansion
#n# Grondilu replaced earlier implementation (not cool) which thundergnat++ says gave wrong result (but did it?)

my $result1 = ([\+] 1.FatRat X/ 1, |[\×] 1..499)[*-1].comb(80).join: "\n"; # Grondilu

sub postfix:<!> (Int $n) { (constant f = 1, |[\×] 1..*)[$n] }
sub e (Int $terms) { sum map { FatRat.new(1,.!) }, ^$terms }
#sub 𝑒 (Int $terms) { sum map { FatRat.new(1,.!) }, ^$terms } # durn that JVM...

say my $result2 = e(500).comb(80).join: "\n";
#say my $result = 𝑒(500).comb(80).join: "\n";

# slightly different again:
constant 𝑒-alt = [\+] 1.FatRat X/ 1, |[\×] 1..*;
my $result3 = 𝑒-alt[499].comb(80).join: "\n";

# if you don't need high precision, it's a built-in.
say ''; say e;

my $ref = qq:to/END/;
2.718281828459045235360287471352662497757247093699959574966967627724076630353547
59457138217852516642742746639193200305992181741359662904357290033429526059563073
81323286279434907632338298807531952510190115738341879307021540891499348841675092
44761460668082264800168477411853742345442437107539077744992069551702761838606261
33138458300075204493382656029760673711320070932870912744374704723069697720931014
16928368190255151086574637721112523897844250569536967707854499699679468644549059
87931636889230098793127736178215424999229576351482208269895193668033182528869398
49646510582093923982948879332036250944311730123819706841614039701983767932068328
23764648042953118023287825098194558153017567173613320698112509961818815930416903
51598888519345807273866738589422879228499892086805825749279610484198444363463244
96848756023362482704197862320900216099023530436994184914631409343173814364054625
31520961836908887070167683964243781405927145635490613031072085103837505101157477
04171898610687396965521267154688957035035402123407849819334321068170121005627880
23519303322474501585390473041995777709350366041699732972508868769664035557071622
684471625608
END

use Test;
is $result1.join("\n"), chomp $ref;
is $result2.join("\n"), chomp $ref;
is $result3.join("\n"), chomp $ref;
