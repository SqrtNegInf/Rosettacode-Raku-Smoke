#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Closest_pair_problem
#c# 2016-04-05 <RC, 2022-06-11 >RC, 2022-06-26 >RC
#m# MOAR: OK
#j#  JVM: OK
#n# 2022-06-10 surprise! refactor made it faster (not the intent, just a side-affect)
#n# 2022-07-26 concurrency gives a especially notable boost for the 'simple' routine (from glacial to rocket-powered)
#n#            optimal 'batch' size is really small, less than a dozen; makes sense if you think about it...
#n#            'real' routine results flipping back and forth, just test distance value

srand 123456;

sub dist-squared-slow (@a, @b) { [+] (@a Z- @b) X ² }  # cute, but much slower

sub dist-squared(@a, @b) { (@a[0] - @b[0])² + (@a[1] - @b[1])² }

sub closest-pair-simple(@points is copy) {
    return ∞ if @points < 2;
    my ($a, $b, $d2) = |@points[0,1], dist-squared(|@points[0,1]);
    while @points {
        my \p = pop @points;
        for @points -> \l {
            ($a, $b, $d2) = p, l, $_ if $_ < $d2 given dist-squared(p, l);
        }
    }
    $a, $b, $d2.sqrt
}

sub closest-pair(@r) {
    closest-pair-real (@r.sort: *.[0]), @r.sort: *.[1]
}

sub closest-pair-real(@rx, @ry) {
    return closest-pair-simple(@rx) if @rx ≤ 3;

    my \N  = @rx;
    my \midx = ceiling(N/2) - 1;
    my @PL := @rx[     0 ..  midx];
    my @PR := @rx[midx+1 ..^ N   ];
    my \xm  = @rx[midx;0];
    (.[0] ≤ xm ?? my @yR !! my @yL).push: @$_ for @ry;
    my (\al, \bl, \dL) = closest-pair-real(@PL, @yR);
    my (\ar, \br, \dR) = closest-pair-real(@PR, @yL);
    my ($w1, $w2, $closest) = dR < dL ?? (ar, br, dR) !! (al, bl, dL);
    my @yS = @ry.grep: { (xm - .[0]).abs < $closest }

    for 0 ..^ @yS -> \i {
        for i+1 ..^ @yS -> \k {
            next unless @yS[k;1] - @yS[i;1] < $closest;
            ($w1, $w2, $closest) = |@yS[k, i], $_ if $_ < $closest given dist-squared(|@yS[k, i]).sqrt;
        }
    }
    $w1, $w2, $closest
}

my @points = (^50000).map: { [rand × 20 - 10, rand × 20 - 10] }

my $start = now;
my @candidates1 = @points.sort(*.[0]).rotor( 10 => -2, :partial).race.map: { closest-pair-simple(@$_) }
say 'simple ' ~ my $result1 = (@candidates1.sort: *.[2]).head(1).gist;
say now - $start;

$start = now;
my @candidates2 = @points.sort(*.[0]).rotor( 10 => -2, :partial).race.map: { closest-pair(@$_) }
say 'real ' ~ my $result2 = (@candidates2.sort: *.[2]).head(1).gist;
say now - $start;

use Test;
if qx/uname -a/ ~~ /'Mac-Pro'/ {
is $result1, '(([5.357253647936908 4.854172412139823] [5.3571808948036335 4.853905220434942] 0.00027691952902988656))'; # simple
ok $result2.contains: '0.00027691952902988656'; # real
} else {
is $result1, '(([4.886974792802745 3.7718344375524087] [4.886958683982282 3.7716888063651393] 0.00014651940759567136))'; # simple
is $result2, '(([4.886958683982282 3.7716888063651393] [4.886974792802745 3.7718344375524087] 0.00014651940759567136))'; # real
}
