#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Curve_that_touches_three_points
#c# 2018-11-12 <RC, 2022-06-09 >RC
#m# MOAR: OK
#j# JVM:  BROKEN
#f# RC file: curve-3-points-alt.png

use Image::PNG::Portable;

# the 3 points of interest
my @points = (10,10), (100,200), (200,10);

# Solve for a quadratic line that passes through those points
my (\a, \b, \c) = (rref ([.[0]², .[0], 1, .[1]] for @points) )[*;*-1];

# evaluate quadratic equation
sub f (\x) { a×x² + b×x + c }

my ($w, $h) = 500, 500; # image size
my $scale   = 2;        # scaling factor

my $png = Image::PNG::Portable.new: :width($w), :height($h);

my ($lastx, $lasty) = 8, f(8).round;
(9 .. 202).map: -> $x {
    my $f = f($x).round;
    line($lastx, $lasty, $x, $f, $png, [0,255,127]);
    ($lastx, $lasty) = $x, $f;
}

# Highlight the 3 defining points
dot( | $_, $(255,0,0), $png, 2) for @points;

$png.write: 'run/curve-3-points-alt.png';

# the more direct-from-math verison
sub rref (@M is copy) {
    my $column-count = @M[0];
    my $col = 0;
    for @M.keys -> $row {
          reduce-row( @M, $row, $col );
        clear-column( @M, $row, $col );
        last if ++$col == $column-count;
    }
    return @M;

    sub    scale-row ( @M, \r,        \scale ) { @M[r]  =              @M[r]  »×» scale   }
    sub    shear-row ( @M, \r1, \r2,  \scale ) { @M[r1] = @M[r1] »+» ( @M[r2] »×» scale ) }
    sub   reduce-row ( @M, \r,      \c       ) { scale-row @M, r, 1/@M[r;c] }
    sub clear-column ( @M, \r,      \c       ) { shear-row @M, $_, r, -@M[$_;c] for @M.keys.grep: * != r }
}

sub line($x0 is copy, $y0 is copy, $x1 is copy, $y1 is copy, $png, @rgb) {
    my $steep = abs($y1 - $y0) > abs($x1 - $x0);
    ($x0,$y0,$x1,$y1) »×=» $scale;
    if $steep {
        ($x0, $y0) = ($y0, $x0);
        ($x1, $y1) = ($y1, $x1);
    }
    if $x0 > $x1 {
        ($x0, $x1) = ($x1, $x0);
        ($y0, $y1) = ($y1, $y0);
    }
    my $Δx = $x1 - $x0;
    my $Δy = abs($y1 - $y0);
    my $error = 0;
    my $Δerror = $Δy / $Δx;
    my $y-step = $y0 < $y1 ?? 1 !! -1;
    my $y = $y0;
    next if $y < 0;
    for $x0 .. $x1 -> $x {
        next if $x < 0;
        if $steep {
            $png.set($y, $x, |@rgb);
        } else {
            $png.set($x, $y, |@rgb);
        }
        $error += $Δerror;
        if $error ≥ 0.5 {
            $y += $y-step;
            $error -= 1.0;
        }
    }
}

sub dot ($X is copy, $Y is copy, @rgb, $png, $radius = 3) {
    ($X, $Y) »×=» $scale;
    for ($X X+ -$radius .. $radius) X ($Y X+ -$radius .. $radius) -> ($x, $y) {
        $png.set($x, $y, |@rgb) if ( $X - $x + ($Y - $y) × i ).abs <= $radius;
    }
}
