#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Chaos_game
#c# 2016-06-08 <RC
#t# graphical
#m# MOAR: OK
#j#  JVM: BROKEN
#f# RC file: chaos-game-perl6.png
#n# generates Sierpinski Triangle, more or less
#n# 2022-11-02 replace call to built-in 'rand' for output stability

BEGIN { die 'ecosystem...' if $*VM ~~ /jvm/; }  # wait for zef-j

use Image::PNG::Portable;

use lib 'lib';
use myRNG;
my $rng = myRNG.new( :seed(123456) );

my ($w, $h) = 640, 640;
my $png = Image::PNG::Portable.new: :width($w), :height($h), :alpha(False);
my @vertex = [0, 0], [$w, 0], [$w/2, $h];
my ($x, $y) = 0, 0;

for ^1e5 {
    ($x, $y) = do given @vertex[3×$rng.next-rat] -> @v { ((($x, $y) »+« @v) »/» 2)».Int };
    $png.set: $x, $y, 0, 255, 0;
}

$png.write: 'run/chaos-game-perl6.png';

#`{{
# 3x faster, but output non-deterministic, so cannot test

my ($w, $h) = 640, 640;

my $png = Image::PNG::Portable.new: :width($w), :height($h);

my @vertex = [0, 0], [$w, 0], [$w/2, $h];

my @xy = [0,0], [0,0], [0,0], [0,0];

# :degree must be equal to or less than @xy elements.
(^1e5).race(:4degree).map: {
    my $p = ++$ % +@xy;
    @xy[$p] = do given @vertex.pick -> @v { ((@xy[$p] »+« @v) »/» 2)».Int };
    $png.set: |@xy[$p], 0, 255, 0;
}

$png.write: 'run/chaos-game-perl6.png';
}}
