#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Constrained_random_points_on_a_circle
#c# 2016-01-09 <RC, 2018-12-03 >RC
#m# MOAR: OK
#j#  JVM: OK
#f# RC file: constrained_random_points2.dat
#n# 2022-11-04 replace call to built-in 'rand' for output stability

# Turning that program completely inside-out and reducing to a single statement with a single non-parameter variable
# (compare with main version)

use lib 'lib';
use myRNG;
my $rng = myRNG.new( :seed(123456) );

# Knuth shuffle
sub shuffle (@a is copy) {
    for 1 ..^ @a -> $n {
        my $k = (0 .. $n)[($n+1) Ã— $rng.next-rat];
        $k == $n or @a[$k, $n] = @a[$n, $k];
    }
    @a
}

my $out = open("run/constrained_random_points2.dat", :w);

($out.say: ~.map: { $_ // ' ' } for my @matrix) given do
   #-> [$x, $y] { @matrix[$x][$y] = '*' } for pick 100, do
    -> [$x, $y] { @matrix[$x][$y] = '*' } for head 100, do
        for shuffle(^32 X ^32) -> ($x, $y) {
            [$x,$y] when 100..225 given [+] ($x,$y X- 15) X**2;
        }

$out.close;
