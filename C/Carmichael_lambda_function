#!/usr/bin/env raku
#u# https://www.rosettacode.org/wiki/Carmichael_lambda_function
#c# 2024-02-28 <RC
#m# MOAR: OK
#j# JVM:  OK
#n# OEIS:A181776 - a(n) = lambda(lambda(n)), where lambda(n) is the Carmichael lambda function
#n3 OEIS:A002322 - xref to actual Carmichael lambda function (aka 'universal exponent of n')

my @res;

use Prime::Factor;

sub phi(Int $p, Int $r) { return $p**($r - 1) × ($p - 1) }

sub CarmichaelLambda(Int $n) {

   state %cache = 1 => 1, 2 => 1, 4 => 2;

   sub CarmichaelHelper(Int $p, Int $r) {
      my Int $n = $p ** $r;
      return %cache{$n} if %cache{$n}:exists;
      return %cache{$n} = $p > 2 ?? phi($p, $r) !! phi($p, $r - 1)
   }

   if $n < 1 { die "'n' must be a positive integer." }
   return %cache{$n} if %cache{$n}:exists;
   if ( my %pps = prime-factors($n).Bag ).elems == 1 { 
      my ($p, $r) = %pps.kv>>.Int;
      return %cache{$n} = $p > 2 ?? phi($p, $r) !! phi($p, $r - 1)
   }
   return [lcm] %pps.kv.map: -> $k, $v { CarmichaelHelper($k.Int, $v) } 
}

sub iteratedToOne($i is copy) {
   my $k = 0;
   while $i > 1 { $i = CarmichaelLambda($i) andthen $k++ } 
   return $k
}

@res.push: " n   λ   k";
@res.push: "----------";
for 1..25 -> $n {
   @res.push: sprintf "%2d  %2d  %2d", $n, CarmichaelLambda($n), iteratedToOne($n)
}

@res.push: "\nIterations to 1       i     lambda(i)";
@res.push: "=====================================";
@res.push: "   0                  1            1";

my ($maxI, $maxN) = 5e6, 10; # for N=15, takes around 47 minutes with an i5-10500T
my @found = True, |( False xx $maxN );
for 1 .. $maxI -> $i {
   unless @found[ my $n = iteratedToOne($i) ] {
      @res.push: sprintf "%4d %18d %12d", $n, $i, CarmichaelLambda($i);
      @found[$n] = True andthen ( last if $n == $maxN )
   }
}

.say for @res;

my $ref = q:to/END/;
 n   λ   k
----------
 1   1   0
 2   1   1
 3   2   2
 4   2   2
 5   4   3
 6   2   2
 7   6   3
 8   2   2
 9   6   3
10   4   3
11  10   4
12   2   2
13  12   3
14   6   3
15   4   3
16   4   3
17  16   4
18   6   3
19  18   4
20   4   3
21   6   3
22  10   4
23  22   5
24   2   2
25  20   4

Iterations to 1       i     lambda(i)
=====================================
   0                  1            1
   1                  2            1
   2                  3            2
   3                  5            4
   4                 11           10
   5                 23           22
   6                 47           46
   7                283          282
   8                719          718
   9               1439         1438
  10               2879         2878
END

use Test;
is @res.join("\n"), chomp $ref;
