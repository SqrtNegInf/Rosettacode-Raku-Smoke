#!/usr/bin/env perl6
#u# http://rosettacode.org/wiki/Continued_fraction
#c# 2015-10-31 <>RC
#m# MOAR: OK
#j#  JVM: OK

sub continued-fraction(:@a, :@b, Int :$n = 100)
{
    my $x = @a[0];
    $x = @a[$_ - 1] + @b[$_] / $x for reverse 1 ..^ $n;
    $x;
}

printf "√2 ≈%.9f\n", my $r1 = continued-fraction(:a(1, |(2 xx *)), :b(Nil,    |(1 xx *)));
printf "e  ≈%.9f\n", my $e1 = continued-fraction(:a(2, |(1 .. *)), :b(Nil, 1, |(1 .. *)));
printf "π  ≈%.9f\n", my $p1 = continued-fraction(:a(3, |(6 xx *)), :b(Nil,    |((1, 3, 5 ... *) X** 2)));

# Raku has a builtin composition operator. We can use it with the
# triangular reduction metaoperator, and evaluate each resulting function at
# infinity (any value would do actually, but infinite makes it consistent
# with this particular task).

sub continued-fraction1(@a, @b) {
    map { .(∞) }, [\o] map { @a[$_] + @b[$_] / * }, ^∞
}

printf "√2 ≈%.9f\n", my $r2 = continued-fraction1((1, |(2 xx *)),                (1 xx *))[10];
printf "e  ≈%.9f\n", my $e2 = continued-fraction1((2, |(1 .. *)),          (1, |(1 .. *)))[10];
printf "π  ≈%.9f\n", my $p2 = continued-fraction1((3, |(6 xx *)), ((1, 3, 5 ... *) X** 2))[100];

use Test;
plan 6;
is-approx $r1, 2**0.5, '√2';
is-approx $e1, e,      '𝑒';  # Unicode (not for JVM)
is-approx $p1, π,      'π';  #          "
is-approx $r2, sqrt(2),'√2';
is-approx $e2, e,      '𝑒';
is-approx $p2, π,      'π';
